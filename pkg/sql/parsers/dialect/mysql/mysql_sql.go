// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const PHYPLAN = 57562
const ADD = 57563
const RETURNS = 57564
const SCHEMA = 57565
const TABLE = 57566
const SEQUENCE = 57567
const INDEX = 57568
const VIEW = 57569
const TO = 57570
const IGNORE = 57571
const IF = 57572
const PRIMARY = 57573
const COLUMN = 57574
const CONSTRAINT = 57575
const SPATIAL = 57576
const FULLTEXT = 57577
const FOREIGN = 57578
const KEY_BLOCK_SIZE = 57579
const SHOW = 57580
const DESCRIBE = 57581
const EXPLAIN = 57582
const DATE = 57583
const ESCAPE = 57584
const REPAIR = 57585
const OPTIMIZE = 57586
const TRUNCATE = 57587
const MAXVALUE = 57588
const PARTITION = 57589
const REORGANIZE = 57590
const LESS = 57591
const THAN = 57592
const PROCEDURE = 57593
const TRIGGER = 57594
const STATUS = 57595
const VARIABLES = 57596
const ROLE = 57597
const PROXY = 57598
const AVG_ROW_LENGTH = 57599
const STORAGE = 57600
const DISK = 57601
const MEMORY = 57602
const CHECKSUM = 57603
const COMPRESSION = 57604
const DATA = 57605
const DIRECTORY = 57606
const DELAY_KEY_WRITE = 57607
const ENCRYPTION = 57608
const ENGINE = 57609
const MAX_ROWS = 57610
const MIN_ROWS = 57611
const PACK_KEYS = 57612
const ROW_FORMAT = 57613
const STATS_AUTO_RECALC = 57614
const STATS_PERSISTENT = 57615
const STATS_SAMPLE_PAGES = 57616
const DYNAMIC = 57617
const COMPRESSED = 57618
const REDUNDANT = 57619
const COMPACT = 57620
const FIXED = 57621
const COLUMN_FORMAT = 57622
const AUTO_RANDOM = 57623
const ENGINE_ATTRIBUTE = 57624
const SECONDARY_ENGINE_ATTRIBUTE = 57625
const INSERT_METHOD = 57626
const RESTRICT = 57627
const CASCADE = 57628
const ACTION = 57629
const PARTIAL = 57630
const SIMPLE = 57631
const CHECK = 57632
const ENFORCED = 57633
const RANGE = 57634
const LIST = 57635
const ALGORITHM = 57636
const LINEAR = 57637
const PARTITIONS = 57638
const SUBPARTITION = 57639
const SUBPARTITIONS = 57640
const CLUSTER = 57641
const TYPE = 57642
const ANY = 57643
const SOME = 57644
const EXTERNAL = 57645
const LOCALFILE = 57646
const URL = 57647
const PREPARE = 57648
const DEALLOCATE = 57649
const RESET = 57650
const EXTENSION = 57651
const RETENTION = 57652
const PERIOD = 57653
const INCREMENT = 57654
const CYCLE = 57655
const MINVALUE = 57656
const PUBLICATION = 57657
const SUBSCRIPTIONS = 57658
const PUBLICATIONS = 57659
const PROPERTIES = 57660
const PARSER = 57661
const VISIBLE = 57662
const INVISIBLE = 57663
const BTREE = 57664
const HASH = 57665
const RTREE = 57666
const BSI = 57667
const IVFFLAT = 57668
const MASTER = 57669
const ZONEMAP = 57670
const LEADING = 57671
const BOTH = 57672
const TRAILING = 57673
const UNKNOWN = 57674
const LISTS = 57675
const OP_TYPE = 57676
const REINDEX = 57677
const EXPIRE = 57678
const ACCOUNT = 57679
const ACCOUNTS = 57680
const UNLOCK = 57681
const DAY = 57682
const NEVER = 57683
const PUMP = 57684
const MYSQL_COMPATIBILITY_MODE = 57685
const UNIQUE_CHECK_ON_AUTOINCR = 57686
const MODIFY = 57687
const CHANGE = 57688
const SECOND = 57689
const ASCII = 57690
const COALESCE = 57691
const COLLATION = 57692
const HOUR = 57693
const MICROSECOND = 57694
const MINUTE = 57695
const MONTH = 57696
const QUARTER = 57697
const REPEAT = 57698
const REVERSE = 57699
const ROW_COUNT = 57700
const WEEK = 57701
const REVOKE = 57702
const FUNCTION = 57703
const PRIVILEGES = 57704
const TABLESPACE = 57705
const EXECUTE = 57706
const SUPER = 57707
const GRANT = 57708
const OPTION = 57709
const REFERENCES = 57710
const REPLICATION = 57711
const SLAVE = 57712
const CLIENT = 57713
const USAGE = 57714
const RELOAD = 57715
const FILE = 57716
const TEMPORARY = 57717
const ROUTINE = 57718
const EVENT = 57719
const SHUTDOWN = 57720
const NULLX = 57721
const AUTO_INCREMENT = 57722
const APPROXNUM = 57723
const SIGNED = 57724
const UNSIGNED = 57725
const ZEROFILL = 57726
const ENGINES = 57727
const LOW_CARDINALITY = 57728
const AUTOEXTEND_SIZE = 57729
const ADMIN_NAME = 57730
const RANDOM = 57731
const SUSPEND = 57732
const ATTRIBUTE = 57733
const HISTORY = 57734
const REUSE = 57735
const CURRENT = 57736
const OPTIONAL = 57737
const FAILED_LOGIN_ATTEMPTS = 57738
const PASSWORD_LOCK_TIME = 57739
const UNBOUNDED = 57740
const SECONDARY = 57741
const RESTRICTED = 57742
const USER = 57743
const IDENTIFIED = 57744
const CIPHER = 57745
const ISSUER = 57746
const X509 = 57747
const SUBJECT = 57748
const SAN = 57749
const REQUIRE = 57750
const SSL = 57751
const NONE = 57752
const PASSWORD = 57753
const SHARED = 57754
const EXCLUSIVE = 57755
const MAX_QUERIES_PER_HOUR = 57756
const MAX_UPDATES_PER_HOUR = 57757
const MAX_CONNECTIONS_PER_HOUR = 57758
const MAX_USER_CONNECTIONS = 57759
const FORMAT = 57760
const VERBOSE = 57761
const CONNECTION = 57762
const TRIGGERS = 57763
const PROFILES = 57764
const LOAD = 57765
const INLINE = 57766
const INFILE = 57767
const TERMINATED = 57768
const OPTIONALLY = 57769
const ENCLOSED = 57770
const ESCAPED = 57771
const STARTING = 57772
const LINES = 57773
const ROWS = 57774
const IMPORT = 57775
const DISCARD = 57776
const JSONTYPE = 57777
const MODUMP = 57778
const OVER = 57779
const PRECEDING = 57780
const FOLLOWING = 57781
const GROUPS = 57782
const DATABASES = 57783
const TABLES = 57784
const SEQUENCES = 57785
const EXTENDED = 57786
const FULL = 57787
const PROCESSLIST = 57788
const FIELDS = 57789
const COLUMNS = 57790
const OPEN = 57791
const ERRORS = 57792
const WARNINGS = 57793
const INDEXES = 57794
const SCHEMAS = 57795
const NODE = 57796
const LOCKS = 57797
const ROLES = 57798
const TABLE_NUMBER = 57799
const COLUMN_NUMBER = 57800
const TABLE_VALUES = 57801
const TABLE_SIZE = 57802
const NAMES = 57803
const GLOBAL = 57804
const PERSIST = 57805
const SESSION = 57806
const ISOLATION = 57807
const LEVEL = 57808
const READ = 57809
const WRITE = 57810
const ONLY = 57811
const REPEATABLE = 57812
const COMMITTED = 57813
const UNCOMMITTED = 57814
const SERIALIZABLE = 57815
const LOCAL = 57816
const EVENTS = 57817
const PLUGINS = 57818
const CURRENT_TIMESTAMP = 57819
const DATABASE = 57820
const CURRENT_TIME = 57821
const LOCALTIME = 57822
const LOCALTIMESTAMP = 57823
const UTC_DATE = 57824
const UTC_TIME = 57825
const UTC_TIMESTAMP = 57826
const REPLACE = 57827
const CONVERT = 57828
const SEPARATOR = 57829
const TIMESTAMPDIFF = 57830
const CURRENT_DATE = 57831
const CURRENT_USER = 57832
const CURRENT_ROLE = 57833
const SECOND_MICROSECOND = 57834
const MINUTE_MICROSECOND = 57835
const MINUTE_SECOND = 57836
const HOUR_MICROSECOND = 57837
const HOUR_SECOND = 57838
const HOUR_MINUTE = 57839
const DAY_MICROSECOND = 57840
const DAY_SECOND = 57841
const DAY_MINUTE = 57842
const DAY_HOUR = 57843
const YEAR_MONTH = 57844
const SQL_TSI_HOUR = 57845
const SQL_TSI_DAY = 57846
const SQL_TSI_WEEK = 57847
const SQL_TSI_MONTH = 57848
const SQL_TSI_QUARTER = 57849
const SQL_TSI_YEAR = 57850
const SQL_TSI_SECOND = 57851
const SQL_TSI_MINUTE = 57852
const RECURSIVE = 57853
const CONFIG = 57854
const DRAINER = 57855
const SOURCE = 57856
const STREAM = 57857
const HEADERS = 57858
const CONNECTOR = 57859
const CONNECTORS = 57860
const DAEMON = 57861
const PAUSE = 57862
const CANCEL = 57863
const TASK = 57864
const RESUME = 57865
const MATCH = 57866
const AGAINST = 57867
const BOOLEAN = 57868
const LANGUAGE = 57869
const WITH = 57870
const QUERY = 57871
const EXPANSION = 57872
const WITHOUT = 57873
const VALIDATION = 57874
const UPGRADE = 57875
const RETRY = 57876
const ADDDATE = 57877
const BIT_AND = 57878
const BIT_OR = 57879
const BIT_XOR = 57880
const CAST = 57881
const COUNT = 57882
const APPROX_COUNT = 57883
const APPROX_COUNT_DISTINCT = 57884
const SERIAL_EXTRACT = 57885
const APPROX_PERCENTILE = 57886
const CURDATE = 57887
const CURTIME = 57888
const DATE_ADD = 57889
const DATE_SUB = 57890
const EXTRACT = 57891
const GROUP_CONCAT = 57892
const MAX = 57893
const MID = 57894
const MIN = 57895
const NOW = 57896
const POSITION = 57897
const SESSION_USER = 57898
const STD = 57899
const STDDEV = 57900
const MEDIAN = 57901
const CLUSTER_CENTERS = 57902
const KMEANS = 57903
const STDDEV_POP = 57904
const STDDEV_SAMP = 57905
const SUBDATE = 57906
const SUBSTR = 57907
const SUBSTRING = 57908
const SUM = 57909
const SYSDATE = 57910
const SYSTEM_USER = 57911
const TRANSLATE = 57912
const TRIM = 57913
const VARIANCE = 57914
const VAR_POP = 57915
const VAR_SAMP = 57916
const AVG = 57917
const RANK = 57918
const ROW_NUMBER = 57919
const DENSE_RANK = 57920
const BIT_CAST = 57921
const BITMAP_BIT_POSITION = 57922
const BITMAP_BUCKET_NUMBER = 57923
const BITMAP_COUNT = 57924
const BITMAP_CONSTRUCT_AGG = 57925
const BITMAP_OR_AGG = 57926
const NEXTVAL = 57927
const SETVAL = 57928
const CURRVAL = 57929
const LASTVAL = 57930
const ARROW = 57931
const ROW = 57932
const OUTFILE = 57933
const HEADER = 57934
const MAX_FILE_SIZE = 57935
const FORCE_QUOTE = 57936
const PARALLEL = 57937
const STRICT = 57938
const UNUSED = 57939
const BINDINGS = 57940
const DO = 57941
const DECLARE = 57942
const LOOP = 57943
const WHILE = 57944
const LEAVE = 57945
const ITERATE = 57946
const UNTIL = 57947
const CALL = 57948
const PREV = 57949
const SLIDING = 57950
const FILL = 57951
const SPBEGIN = 57952
const BACKEND = 57953
const SERVERS = 57954
const HANDLER = 57955
const PERCENT = 57956
const SAMPLE = 57957
const MO_TS = 57958
const PITR = 57959
const CDC = 57960
const ROLLUP = 57961
const KILL = 57962
const BACKUP = 57963
const FILESYSTEM = 57964
const PARALLELISM = 57965
const RESTORE = 57966
const QUERY_RESULT = 57967

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"ROLLUP",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12510

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 134,
	11, 782,
	22, 782,
	-2, 775,
	-1, 157,
	241, 1193,
	243, 1092,
	-2, 1139,
	-1, 184,
	43, 605,
	243, 605,
	270, 612,
	271, 612,
	469, 605,
	-2, 640,
	-1, 224,
	646, 1953,
	-2, 515,
	-1, 527,
	646, 2073,
	-2, 396,
	-1, 585,
	646, 2132,
	-2, 394,
	-1, 586,
	646, 2133,
	-2, 395,
	-1, 587,
	646, 2134,
	-2, 397,
	-1, 722,
	322, 176,
	441, 176,
	442, 176,
	-2, 1857,
	-1, 788,
	83, 1643,
	-2, 2009,
	-1, 789,
	83, 1661,
	-2, 1980,
	-1, 793,
	83, 1662,
	-2, 2008,
	-1, 826,
	83, 1570,
	-2, 2207,
	-1, 827,
	83, 1571,
	-2, 2206,
	-1, 828,
	83, 1572,
	-2, 2196,
	-1, 829,
	83, 2168,
	-2, 2189,
	-1, 830,
	83, 2169,
	-2, 2190,
	-1, 831,
	83, 2170,
	-2, 2198,
	-1, 832,
	83, 2171,
	-2, 2178,
	-1, 833,
	83, 2172,
	-2, 2187,
	-1, 834,
	83, 2173,
	-2, 2199,
	-1, 835,
	83, 2174,
	-2, 2200,
	-1, 836,
	83, 2175,
	-2, 2205,
	-1, 837,
	83, 2176,
	-2, 2210,
	-1, 838,
	83, 2177,
	-2, 2211,
	-1, 839,
	83, 1639,
	-2, 2047,
	-1, 840,
	83, 1640,
	-2, 1841,
	-1, 841,
	83, 1641,
	-2, 2056,
	-1, 842,
	83, 1642,
	-2, 1850,
	-1, 844,
	83, 1645,
	-2, 1858,
	-1, 845,
	83, 1646,
	-2, 2080,
	-1, 847,
	83, 1649,
	-2, 1877,
	-1, 849,
	83, 1651,
	-2, 2092,
	-1, 850,
	83, 1652,
	-2, 2091,
	-1, 851,
	83, 1653,
	-2, 1921,
	-1, 852,
	83, 1654,
	-2, 2004,
	-1, 855,
	83, 1657,
	-2, 2103,
	-1, 857,
	83, 1659,
	-2, 2106,
	-1, 858,
	83, 1660,
	-2, 2108,
	-1, 859,
	83, 1663,
	-2, 2116,
	-1, 860,
	83, 1664,
	-2, 1989,
	-1, 861,
	83, 1665,
	-2, 2034,
	-1, 862,
	83, 1666,
	-2, 1999,
	-1, 863,
	83, 1667,
	-2, 2024,
	-1, 874,
	83, 1548,
	-2, 2201,
	-1, 875,
	83, 1549,
	-2, 2202,
	-1, 876,
	83, 1550,
	-2, 2203,
	-1, 975,
	464, 640,
	465, 640,
	-2, 606,
	-1, 1025,
	125, 1841,
	136, 1841,
	156, 1841,
	-2, 1815,
	-1, 1142,
	22, 809,
	-2, 758,
	-1, 1252,
	11, 782,
	22, 782,
	-2, 1428,
	-1, 1334,
	22, 809,
	-2, 758,
	-1, 1684,
	83, 1714,
	-2, 2006,
	-1, 1685,
	83, 1715,
	-2, 2007,
	-1, 1852,
	84, 964,
	-2, 970,
	-1, 2296,
	108, 1131,
	152, 1131,
	191, 1131,
	194, 1131,
	283, 1131,
	-2, 1124,
	-1, 2452,
	11, 782,
	22, 782,
	-2, 905,
	-1, 2485,
	84, 1801,
	157, 1801,
	-2, 1991,
	-1, 2486,
	84, 1801,
	157, 1801,
	-2, 1990,
	-1, 2487,
	84, 1777,
	157, 1777,
	-2, 1977,
	-1, 2488,
	84, 1778,
	157, 1778,
	-2, 1982,
	-1, 2489,
	84, 1779,
	157, 1779,
	-2, 1909,
	-1, 2490,
	84, 1780,
	157, 1780,
	-2, 1903,
	-1, 2491,
	84, 1781,
	157, 1781,
	-2, 1831,
	-1, 2492,
	84, 1782,
	157, 1782,
	-2, 1979,
	-1, 2493,
	84, 1783,
	157, 1783,
	-2, 1907,
	-1, 2494,
	84, 1784,
	157, 1784,
	-2, 1902,
	-1, 2495,
	84, 1785,
	157, 1785,
	-2, 1891,
	-1, 2496,
	84, 1801,
	157, 1801,
	-2, 1892,
	-1, 2497,
	84, 1801,
	157, 1801,
	-2, 1893,
	-1, 2499,
	84, 1790,
	157, 1790,
	-2, 2024,
	-1, 2500,
	84, 1767,
	157, 1767,
	-2, 2009,
	-1, 2501,
	84, 1799,
	157, 1799,
	-2, 1980,
	-1, 2502,
	84, 1799,
	157, 1799,
	-2, 2008,
	-1, 2503,
	84, 1799,
	157, 1799,
	-2, 1859,
	-1, 2504,
	84, 1797,
	157, 1797,
	-2, 1999,
	-1, 2505,
	84, 1794,
	157, 1794,
	-2, 1882,
	-1, 2506,
	83, 1748,
	84, 1748,
	157, 1748,
	399, 1748,
	400, 1748,
	401, 1748,
	-2, 1830,
	-1, 2507,
	83, 1749,
	84, 1749,
	157, 1749,
	399, 1749,
	400, 1749,
	401, 1749,
	-2, 1832,
	-1, 2508,
	83, 1750,
	84, 1750,
	157, 1750,
	399, 1750,
	400, 1750,
	401, 1750,
	-2, 2052,
	-1, 2509,
	83, 1752,
	84, 1752,
	157, 1752,
	399, 1752,
	400, 1752,
	401, 1752,
	-2, 1981,
	-1, 2510,
	83, 1754,
	84, 1754,
	157, 1754,
	399, 1754,
	400, 1754,
	401, 1754,
	-2, 1962,
	-1, 2511,
	83, 1756,
	84, 1756,
	157, 1756,
	399, 1756,
	400, 1756,
	401, 1756,
	-2, 1908,
	-1, 2512,
	83, 1758,
	84, 1758,
	157, 1758,
	399, 1758,
	400, 1758,
	401, 1758,
	-2, 1887,
	-1, 2513,
	83, 1759,
	84, 1759,
	157, 1759,
	399, 1759,
	400, 1759,
	401, 1759,
	-2, 1888,
	-1, 2514,
	83, 1761,
	84, 1761,
	157, 1761,
	399, 1761,
	400, 1761,
	401, 1761,
	-2, 1829,
	-1, 2515,
	84, 1804,
	157, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1864,
	-1, 2516,
	84, 1804,
	157, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1878,
	-1, 2517,
	84, 1807,
	157, 1807,
	399, 1807,
	400, 1807,
	401, 1807,
	-2, 1860,
	-1, 2518,
	84, 1807,
	157, 1807,
	399, 1807,
	400, 1807,
	401, 1807,
	-2, 1924,
	-1, 2519,
	84, 1804,
	157, 1804,
	399, 1804,
	400, 1804,
	401, 1804,
	-2, 1946,
	-1, 2731,
	108, 1131,
	152, 1131,
	191, 1131,
	194, 1131,
	283, 1131,
	-2, 1125,
	-1, 2749,
	81, 702,
	157, 702,
	-2, 1309,
	-1, 3163,
	194, 1131,
	307, 1396,
	-2, 1368,
	-1, 3342,
	108, 1131,
	152, 1131,
	191, 1131,
	194, 1131,
	-2, 1249,
	-1, 3344,
	108, 1131,
	152, 1131,
	191, 1131,
	194, 1131,
	-2, 1249,
	-1, 3356,
	81, 702,
	157, 702,
	-2, 1309,
	-1, 3377,
	194, 1131,
	307, 1396,
	-2, 1369,
	-1, 3526,
	108, 1131,
	152, 1131,
	191, 1131,
	194, 1131,
	-2, 1250,
	-1, 3554,
	84, 1211,
	157, 1211,
	-2, 1131,
	-1, 3694,
	84, 1211,
	157, 1211,
	-2, 1131,
	-1, 3851,
	84, 1215,
	157, 1215,
	-2, 1131,
	-1, 3898,
	84, 1216,
	157, 1216,
	-2, 1131,
}

const yyPrivate = 57344

const yyLast = 51547

var yyAct = [...]int{
	755, 732, 3944, 757, 3918, 2779, 213, 3937, 3855, 1937,
	1664, 3458, 3362, 3754, 3862, 3861, 3854, 3694, 3735, 3149,
	3780, 741, 3182, 3811, 3582, 3254, 3391, 1660, 3672, 734,
	2773, 2574, 3639, 3729, 1287, 3693, 3255, 3514, 3513, 3758,
	2691, 3511, 3612, 1498, 785, 1431, 622, 1143, 1024, 3663,
	2776, 3462, 1575, 3736, 3738, 3324, 3453, 3329, 1885, 3535,
	640, 1437, 646, 646, 2343, 730, 3158, 1137, 646, 664,
	673, 2752, 37, 673, 3523, 3106, 1711, 3528, 3378, 1667,
	3120, 3080, 3493, 2483, 3252, 3345, 2889, 3109, 3314, 2868,
	2888, 2032, 1725, 2887, 2045, 2802, 3178, 3160, 3347, 3167,
	2884, 3294, 2068, 2951, 1996, 3240, 198, 65, 2609, 2446,
	2911, 2143, 685, 2481, 2346, 3220, 2029, 2101, 2720, 3087,
	681, 3091, 1897, 3085, 3166, 3081, 1491, 3129, 2307, 2732,
	1133, 724, 2275, 3078, 2376, 133, 2252, 2782, 3055, 1564,
	2126, 670, 2553, 3083, 3082, 2924, 2998, 729, 2251, 2109,
	2139, 36, 1571, 2102, 1817, 2535, 2934, 2025, 2110, 1576,
	948, 2138, 1579, 2447, 2074, 1999, 2434, 2704, 2709, 1997,
	2804, 2784, 2429, 2344, 1927, 2744, 209, 8, 208, 7,
	6, 2306, 1861, 2173, 2296, 2479, 1658, 733, 2140, 622,
	1367, 1081, 1476, 1538, 1507, 1607, 1663, 1471, 1400, 2287,
	639, 2150, 723, 2642, 1159, 1718, 1420, 742, 1698, 2108,
	1649, 2105, 2090, 213, 23, 213, 1590, 1072, 1073, 1896,
	1587, 1545, 2064, 1857, 646, 1475, 678, 1860, 2339, 1657,
	1017, 2454, 947, 984, 2430, 108, 1529, 655, 878, 1726,
	687, 688, 1537, 27, 1416, 1473, 1432, 672, 24, 17,
	10, 2641, 199, 1356, 924, 945, 930, 191, 16, 1332,
	1018, 1288, 970, 684, 195, 1220, 1221, 1222, 1219, 1220,
	1221, 1222, 1219, 2147, 880, 881, 14, 3745, 3657, 1051,
	2677, 1220, 1221, 1222, 1219, 2677, 2004, 1586, 2677, 2456,
	1440, 1069, 3359, 3136, 731, 2968, 2967, 2157, 1138, 3486,
	1033, 642, 3332, 3247, 1139, 2597, 621, 2541, 2538, 954,
	2539, 1830, 669, 1552, 2536, 1548, 1064, 1065, 197, 1068,
	676, 1070, 15, 651, 641, 2250, 3719, 665, 1030, 1065,
	33, 1004, 1351, 900, 1065, 898, 658, 3065, 2256, 1831,
	2260, 1354, 1599, 3048, 1032, 667, 3045, 3050, 645, 645,
	3047, 1052, 725, 3929, 653, 1454, 1824, 1347, 1550, 3451,
	2947, 2945, 1138, 1598, 647, 2079, 3724, 1403, 3619, 3613,
	2669, 2667, 3454, 3253, 8, 2123, 7, 3740, 1063, 951,
	952, 2104, 1282, 938, 879, 939, 1220, 1221, 1222, 1219,
	994, 668, 3025, 2096, 1220, 1221, 1222, 1219, 2384, 666,
	890, 1218, 1182, 2583, 2144, 3498, 3494, 1362, 3346, 3679,
	2591, 196, 2671, 2298, 1585, 2297, 726, 196, 196, 61,
	187, 158, 919, 196, 1046, 1041, 1036, 1040, 1044, 3644,
	3791, 196, 899, 2738, 897, 1594, 933, 1407, 929, 1515,
	1361, 196, 196, 196, 61, 187, 158, 725, 3836, 1605,
	1360, 1359, 1049, 3680, 196, 900, 1039, 196, 1357, 1375,
	898, 1034, 3023, 1392, 1833, 1591, 1028, 1029, 1363, 196,
	61, 187, 158, 996, 2155, 2882, 995, 999, 997, 1602,
	998, 2736, 196, 61, 187, 158, 2291, 1593, 192, 2970,
	132, 2473, 2693, 192, 910, 683, 1217, 2918, 2919, 2009,
	2010, 1604, 2959, 895, 2474, 132, 2917, 1047, 3646, 891,
	653, 192, 192, 192, 980, 1477, 1050, 1479, 1190, 1630,
	2008, 1192, 2554, 955, 192, 3049, 2460, 192, 3046, 2459,
	2694, 2739, 2461, 1154, 1842, 1843, 1438, 1439, 1037, 192,
	993, 869, 3475, 868, 870, 871, 1616, 872, 873, 1193,
	957, 1428, 192, 196, 61, 187, 158, 2042, 1911, 1436,
	3865, 3866, 1048, 1435, 1438, 1439, 1666, 935, 1005, 928,
	2706, 3153, 196, 61, 187, 158, 1215, 1027, 932, 931,
	2707, 1450, 1210, 1026, 1451, 1650, 3256, 3743, 1654, 3742,
	1001, 3886, 2239, 1374, 1197, 913, 3741, 1198, 3829, 920,
	3743, 3824, 1038, 1551, 1549, 3727, 3151, 3742, 3823, 3833,
	1441, 3813, 1653, 3922, 3923, 979, 977, 1151, 3816, 927,
	2672, 3741, 3822, 192, 3616, 1200, 3256, 1066, 1067, 2705,
	3813, 1186, 1071, 3730, 3731, 3732, 3733, 976, 937, 2578,
	2952, 1157, 192, 926, 646, 646, 2953, 925, 2954, 950,
	1148, 2159, 2823, 912, 1003, 646, 1147, 1188, 2712, 918,
	956, 989, 157, 1639, 194, 1162, 1165, 1162, 1165, 1191,
	1194, 2695, 1453, 2026, 2016, 673, 673, 3751, 646, 1045,
	3269, 916, 3474, 1645, 985, 184, 3315, 2151, 2087, 3102,
	3476, 3503, 3838, 3839, 3092, 1187, 3322, 2419, 1655, 3648,
	3649, 1670, 2988, 2286, 1075, 3834, 3835, 1195, 1558, 1557,
	936, 2696, 1213, 1214, 3403, 1042, 3831, 3864, 1043, 936,
	986, 990, 1652, 3631, 2588, 3632, 2986, 1212, 183, 2382,
	2156, 1002, 670, 670, 670, 2670, 1185, 3452, 2946, 3653,
	973, 1260, 971, 975, 993, 917, 1376, 1350, 972, 969,
	968, 1426, 974, 959, 960, 958, 961, 962, 963, 964,
	3096, 991, 2874, 992, 3418, 3744, 3656, 2421, 3272, 3500,
	1033, 1196, 1189, 2992, 987, 988, 2676, 1464, 1140, 3634,
	1139, 1139, 2422, 2423, 3118, 3181, 1139, 1147, 2476, 3609,
	2145, 2145, 2145, 1146, 3298, 1177, 1208, 1209, 1030, 2969,
	2020, 3893, 893, 2966, 2427, 2257, 1832, 2134, 1600, 2689,
	3633, 983, 2040, 2041, 1032, 2178, 1291, 982, 1053, 1035,
	1669, 1668, 934, 3155, 1065, 1207, 3100, 1202, 1065, 638,
	1203, 1065, 978, 2146, 1065, 1452, 1065, 1065, 3415, 1651,
	894, 1156, 3130, 1033, 3107, 671, 3773, 2690, 1199, 3768,
	1139, 675, 2158, 2745, 719, 3678, 3684, 721, 1205, 3179,
	3180, 923, 720, 2870, 1164, 1163, 1164, 1163, 2414, 2362,
	1000, 1030, 674, 2880, 3094, 2342, 2365, 2293, 1166, 1676,
	1679, 1680, 3097, 3098, 2162, 2164, 2165, 1032, 3408, 3056,
	1677, 2537, 1153, 3676, 3759, 1353, 671, 1355, 3099, 1553,
	3837, 682, 3775, 669, 669, 669, 879, 62, 3363, 671,
	981, 3781, 1142, 1372, 640, 3150, 953, 949, 665, 665,
	665, 1174, 1170, 1171, 1292, 1330, 1141, 1029, 1335, 3499,
	645, 1136, 2668, 2364, 2592, 2778, 667, 667, 667, 3647,
	1201, 1145, 1834, 159, 3370, 1135, 1176, 948, 2271, 159,
	159, 1261, 1438, 1439, 1415, 159, 1254, 3108, 62, 2349,
	3184, 911, 909, 159, 1173, 1358, 3643, 1640, 193, 3307,
	1641, 62, 2711, 159, 159, 159, 3305, 1427, 2363, 1206,
	671, 896, 668, 668, 668, 3108, 159, 1438, 1439, 159,
	666, 666, 666, 3069, 2417, 3750, 1150, 1152, 1155, 671,
	646, 159, 3419, 1466, 1204, 3103, 3573, 646, 3955, 3093,
	622, 622, 2027, 3830, 159, 1434, 3650, 3685, 2476, 2989,
	622, 622, 2852, 2394, 1502, 1502, 2393, 646, 3465, 2715,
	2716, 1256, 1257, 1258, 1259, 3627, 1168, 3306, 2824, 3737,
	2825, 2826, 62, 2718, 2714, 2415, 2416, 1413, 673, 1530,
	640, 1500, 1500, 3156, 3677, 1541, 1541, 1487, 1486, 1303,
	1304, 62, 3504, 1175, 2774, 2775, 213, 2778, 1504, 2017,
	3562, 1412, 3631, 1411, 3632, 622, 1509, 3095, 1646, 2724,
	2727, 2728, 2729, 2725, 2726, 159, 1430, 1429, 3568, 3782,
	3626, 3583, 3584, 3585, 3589, 3587, 3588, 3586, 2348, 3664,
	3159, 1369, 1370, 2350, 159, 1134, 3044, 1379, 1380, 1381,
	1382, 1383, 3698, 1385, 1373, 2385, 3348, 3853, 2359, 1391,
	1251, 2342, 3940, 3449, 1678, 1465, 3259, 1583, 3634, 2163,
	1368, 683, 1588, 1559, 3179, 3180, 3810, 1474, 3175, 1597,
	1334, 938, 3060, 939, 1223, 2584, 1336, 2465, 1496, 1497,
	2913, 2915, 1253, 3183, 2380, 2148, 1182, 2351, 2015, 3633,
	1994, 1263, 2617, 2929, 2930, 1384, 3211, 2991, 1628, 1390,
	1422, 1423, 1378, 1389, 2682, 994, 1388, 1387, 2352, 1836,
	1006, 677, 1502, 3308, 1502, 1147, 1271, 2160, 2161, 1606,
	1125, 1121, 1122, 1123, 1124, 2019, 2622, 3575, 2621, 2620,
	2618, 3176, 1399, 1402, 2821, 3295, 1592, 942, 943, 944,
	3000, 2999, 1397, 1603, 2843, 2844, 2686, 1845, 940, 3116,
	2266, 2265, 1562, 2264, 1565, 1566, 670, 2174, 1366, 670,
	670, 1455, 1456, 2270, 1846, 1442, 1567, 1568, 1445, 1623,
	1624, 1033, 1638, 3697, 1181, 1364, 1365, 3484, 1033, 3062,
	1531, 2263, 1502, 994, 1485, 1844, 1573, 1574, 996, 901,
	3941, 995, 2406, 902, 3536, 3956, 1596, 2619, 994, 1724,
	1481, 1483, 3820, 2853, 2855, 2856, 2857, 2854, 1218, 1712,
	1494, 1495, 1578, 1773, 1408, 1582, 1461, 1581, 1408, 1516,
	3217, 651, 3951, 1472, 1510, 1528, 1522, 3852, 1542, 1686,
	1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696,
	1697, 2353, 2379, 1508, 3963, 1709, 1710, 3948, 1543, 1406,
	2914, 3564, 1665, 3569, 3570, 3563, 1414, 3359, 2358, 1377,
	2476, 1627, 2356, 1424, 1662, 1554, 996, 3946, 2842, 995,
	1626, 1443, 1444, 2289, 1446, 1447, 3213, 1448, 2322, 1147,
	3117, 996, 2444, 2208, 995, 1835, 2207, 3260, 3935, 1838,
	1643, 1840, 3900, 1782, 1182, 2153, 1614, 1758, 1847, 1617,
	1849, 1850, 2556, 1681, 3873, 1530, 1815, 2750, 1659, 3135,
	1858, 1502, 1863, 1864, 3627, 1866, 1466, 646, 3628, 905,
	1609, 1409, 646, 3938, 3939, 1502, 937, 669, 2683, 948,
	669, 669, 1886, 1837, 3177, 1637, 1007, 1144, 2623, 2624,
	3947, 1502, 665, 1636, 3311, 665, 665, 1466, 1635, 1634,
	1631, 1656, 664, 2445, 1661, 1818, 2278, 3217, 1633, 1218,
	667, 3901, 1647, 667, 667, 3901, 1220, 1221, 1222, 1219,
	904, 1772, 1910, 3867, 907, 906, 1632, 3874, 3849, 2279,
	2280, 1917, 1917, 1700, 1466, 2751, 1466, 1466, 3271, 2288,
	646, 646, 2244, 1984, 1858, 1988, 2583, 3801, 1502, 1991,
	1992, 1540, 1540, 2187, 2006, 3188, 668, 3186, 2445, 668,
	668, 1144, 2321, 3776, 666, 1179, 1826, 666, 666, 622,
	1615, 1502, 3764, 1618, 1619, 3054, 1865, 3052, 1763, 1764,
	1765, 2445, 2932, 1220, 1221, 1222, 1219, 1914, 1867, 1180,
	3717, 1779, 3716, 2067, 1780, 2698, 3660, 2751, 646, 1858,
	1502, 3850, 2050, 1648, 646, 646, 646, 681, 681, 2673,
	1821, 1793, 1794, 2573, 2060, 2061, 2062, 2063, 2561, 1939,
	3660, 2069, 1707, 1708, 3711, 1787, 2144, 2007, 213, 2186,
	1814, 213, 213, 1218, 213, 2043, 2153, 3710, 1986, 2335,
	1755, 1756, 1180, 1759, 2249, 3765, 1854, 1855, 1856, 2243,
	1816, 1774, 1417, 1421, 1421, 1421, 1920, 1862, 1869, 1870,
	1871, 1872, 1822, 3718, 1781, 2311, 1783, 2242, 1784, 1785,
	1786, 1878, 2349, 2352, 1773, 1773, 2112, 1417, 1417, 3709,
	2021, 1220, 1221, 1222, 1219, 1773, 1773, 1891, 2012, 2215,
	2014, 1853, 2128, 2035, 2036, 3708, 3688, 3660, 2052, 2053,
	2054, 2033, 2034, 3687, 1056, 1061, 1062, 1331, 2135, 3659,
	3660, 1883, 1903, 2049, 3424, 1671, 1672, 1673, 1674, 1675,
	2936, 2028, 1882, 1919, 1908, 1886, 2038, 3021, 1993, 1502,
	2142, 1398, 2122, 2065, 2078, 3372, 1893, 2081, 2082, 1899,
	2084, 3338, 1715, 1182, 1862, 2114, 3287, 1488, 3283, 1592,
	3196, 2908, 3660, 1868, 2753, 1921, 1922, 1716, 1873, 2586,
	2585, 1720, 1721, 1722, 1723, 1916, 1918, 1985, 3660, 2153,
	1757, 2648, 2577, 670, 2329, 1990, 2153, 2640, 1767, 1888,
	1889, 1033, 3660, 2136, 1033, 1995, 2011, 2476, 2013, 2599,
	2203, 1898, 1033, 1900, 1901, 2188, 1659, 2133, 2581, 2022,
	2118, 1220, 1221, 1222, 1219, 2072, 2353, 1907, 3373, 1030,
	2569, 2348, 2342, 2347, 3339, 2345, 2350, 2058, 3321, 3288,
	1030, 3284, 2047, 3197, 2445, 1032, 1923, 1924, 2563, 2048,
	1819, 2558, 2107, 2055, 2056, 2550, 1032, 2548, 1611, 1268,
	1167, 2546, 1131, 2107, 1218, 2073, 2075, 2184, 1126, 2544,
	1218, 2171, 2172, 2310, 2245, 2222, 883, 884, 885, 886,
	1894, 1895, 1218, 2092, 3599, 883, 884, 885, 886, 3422,
	2351, 2311, 2221, 2206, 2197, 2196, 2195, 1904, 1905, 1251,
	2037, 2152, 1620, 2559, 2046, 2124, 1235, 1762, 1761, 1033,
	2046, 2046, 2046, 2113, 3140, 2121, 2119, 1915, 1058, 1059,
	1060, 2564, 2983, 903, 2559, 1890, 2132, 3957, 2551, 3926,
	2549, 2130, 2254, 2255, 2545, 2258, 3769, 1030, 2261, 1404,
	3131, 1887, 2545, 1405, 1762, 1761, 2311, 2244, 1218, 1490,
	1906, 3537, 724, 1032, 1513, 646, 646, 646, 2137, 1418,
	3351, 2377, 1902, 1449, 669, 1218, 1218, 1218, 1218, 1218,
	646, 646, 646, 646, 2153, 1621, 3746, 3349, 1909, 665,
	3770, 1912, 1913, 2308, 1238, 1239, 1240, 1241, 1242, 1235,
	2166, 3658, 2175, 2314, 1466, 3538, 3623, 667, 1492, 1459,
	1460, 3566, 1462, 1463, 3352, 1467, 1468, 1469, 1819, 1493,
	1700, 2168, 3565, 1819, 1819, 3551, 758, 768, 3132, 1799,
	1466, 3350, 2167, 2180, 3507, 888, 759, 3331, 760, 764,
	767, 763, 761, 762, 888, 3218, 3209, 2371, 1517, 1518,
	1519, 1520, 1521, 668, 1523, 1524, 1525, 1526, 1527, 3203,
	1489, 666, 1533, 1534, 1535, 1536, 1792, 2131, 1706, 3198,
	3111, 2877, 3133, 2077, 1404, 2876, 2080, 908, 1405, 2083,
	2722, 2678, 2085, 2596, 1703, 1705, 1702, 1419, 1704, 2562,
	2326, 765, 2467, 2117, 2328, 2116, 2330, 2115, 2378, 1220,
	1221, 1222, 1219, 1394, 646, 1917, 1393, 1149, 2169, 2170,
	3248, 3245, 2449, 2449, 2006, 2449, 2536, 2606, 2530, 2216,
	2217, 2076, 2219, 766, 2238, 2240, 2241, 1719, 2246, 2226,
	1848, 1719, 1417, 2181, 622, 622, 2938, 2127, 1220, 1221,
	1222, 1219, 1147, 1546, 3821, 2076, 1421, 3246, 1502, 646,
	1222, 1219, 2331, 1219, 1220, 1221, 1222, 1219, 1421, 3578,
	3577, 2955, 646, 2813, 2272, 2540, 2811, 2790, 1147, 2520,
	640, 1291, 2788, 3557, 2290, 2471, 1541, 3954, 2006, 3508,
	3509, 2525, 3931, 2527, 2341, 2340, 1270, 213, 2661, 2383,
	2662, 3930, 2386, 2387, 2388, 2389, 2390, 2391, 2392, 1269,
	3501, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403,
	2404, 2405, 3877, 2407, 2408, 2409, 2410, 2411, 2453, 2412,
	3319, 1033, 2451, 2315, 2455, 3848, 3847, 2566, 2864, 3771,
	2692, 2327, 1777, 2334, 1220, 1221, 1222, 1219, 3713, 2462,
	3953, 2463, 2177, 2608, 2579, 2862, 2182, 1778, 2142, 1030,
	2860, 2282, 2283, 2284, 3701, 1502, 2478, 1502, 3502, 1502,
	2468, 2469, 2849, 3691, 1147, 1032, 2299, 2300, 2301, 2302,
	2354, 2355, 2598, 2360, 1220, 1221, 1222, 1219, 3320, 1292,
	3681, 3614, 2524, 2532, 2589, 3540, 2863, 2194, 1220, 1221,
	1222, 1219, 3539, 2531, 3364, 2201, 3692, 1547, 1502, 2626,
	2424, 2428, 3353, 2861, 2318, 2484, 2575, 2576, 2859, 2324,
	2457, 2721, 2325, 3318, 2633, 3199, 3101, 2218, 2979, 1502,
	2848, 2950, 2223, 2224, 2225, 1500, 2949, 2228, 2229, 2230,
	2231, 2232, 2233, 2234, 2235, 2236, 2237, 1220, 1221, 1222,
	1219, 2625, 2847, 2472, 2846, 1546, 1500, 2845, 2837, 2475,
	1234, 1233, 1243, 1244, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1235, 2634, 1220, 1221, 1222, 1219, 2680, 2681, 2523,
	2521, 2684, 3014, 2831, 2637, 2638, 2830, 2610, 2829, 2610,
	1220, 1221, 1222, 1219, 3858, 2323, 2635, 2828, 1147, 2674,
	1472, 2552, 1147, 2464, 1481, 1483, 2248, 2095, 2632, 1502,
	2094, 2593, 1466, 2093, 2614, 2089, 2088, 2044, 1988, 1841,
	1839, 1220, 1221, 1222, 1219, 1612, 2749, 2595, 1349, 3325,
	2590, 3330, 2755, 3086, 2199, 3950, 3002, 3757, 2571, 3651,
	3652, 3949, 3013, 2580, 2604, 1508, 2582, 1484, 3459, 3924,
	2765, 2587, 2316, 2317, 3892, 3891, 2665, 3888, 2046, 1129,
	1147, 1659, 2319, 2320, 1220, 1221, 1222, 1219, 2787, 1220,
	1221, 1222, 1219, 2600, 2601, 1147, 1147, 1147, 1917, 3827,
	3788, 1147, 3826, 2797, 2798, 2799, 2800, 1147, 2807, 3640,
	2808, 2809, 2737, 2810, 2733, 2812, 3808, 3753, 2616, 3512,
	3734, 2198, 1220, 1221, 1222, 1219, 2807, 3725, 2746, 3705,
	3700, 2734, 1220, 1221, 1222, 1219, 1128, 719, 2449, 2766,
	721, 3699, 2349, 2352, 3655, 720, 3642, 1033, 1220, 1221,
	1222, 1219, 2865, 1939, 2719, 2699, 3641, 2768, 3615, 2484,
	3559, 2708, 622, 3519, 2051, 3480, 2756, 3505, 1988, 1819,
	3784, 1819, 1147, 2006, 2006, 2006, 2006, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1235, 1147, 2006, 3487, 3485, 2449,
	1819, 1819, 1220, 1221, 1222, 1219, 3482, 3479, 2871, 3478,
	2785, 3457, 3455, 3432, 2785, 2781, 1502, 2700, 3429, 2603,
	3426, 2717, 2869, 2643, 2644, 3317, 3316, 646, 646, 2649,
	2792, 2701, 1540, 2703, 2740, 1862, 8, 2748, 7, 3313,
	2754, 3303, 3296, 2793, 2794, 3280, 3278, 3206, 2796, 3205,
	3200, 3194, 2522, 3193, 2803, 3112, 3073, 3072, 2767, 3068,
	2770, 2529, 2185, 2819, 2820, 3066, 3064, 2783, 3061, 3059,
	3468, 2789, 2253, 2993, 2990, 1421, 2948, 2922, 2835, 2836,
	2795, 2858, 2565, 213, 2568, 2904, 2353, 2786, 213, 2850,
	2840, 2348, 2342, 2347, 2838, 2345, 2350, 1220, 1221, 1222,
	1219, 2834, 2833, 2832, 2873, 2687, 2827, 2337, 2679, 2675,
	1773, 2839, 1773, 825, 824, 2965, 3636, 3467, 2933, 2890,
	1226, 1227, 1228, 1229, 1230, 1231, 1232, 1224, 2978, 2572,
	2267, 2262, 2890, 2259, 1502, 2098, 2872, 2985, 1220, 1221,
	1222, 1219, 2747, 2878, 1220, 1221, 1222, 1219, 2607, 2091,
	2351, 2613, 2891, 2892, 2893, 2894, 1829, 1828, 2627, 2628,
	2903, 2905, 2907, 1613, 1299, 1295, 2630, 2631, 2764, 1294,
	1132, 892, 3635, 3412, 3624, 2923, 1566, 2920, 2183, 3481,
	3466, 2960, 2636, 3344, 3343, 3275, 1567, 1568, 3342, 2939,
	3017, 3310, 2971, 3292, 2943, 2906, 3290, 3289, 3286, 1818,
	1220, 1221, 1222, 1219, 2964, 1573, 1574, 3285, 3279, 3277,
	1671, 1819, 1220, 1221, 1222, 1219, 1033, 1220, 1221, 1222,
	1219, 3261, 3251, 3007, 3250, 3009, 1578, 1033, 2962, 1582,
	3236, 1581, 2875, 2757, 3063, 2780, 2937, 3235, 2972, 3141,
	2941, 3067, 2762, 2763, 3076, 3070, 3071, 2982, 2940, 3016,
	3051, 3019, 2987, 1147, 1220, 1221, 1222, 1219, 3012, 3089,
	2956, 2963, 2958, 3004, 2975, 2974, 3003, 2973, 2961, 3105,
	2997, 2931, 2697, 2547, 646, 2543, 1220, 1221, 1222, 1219,
	2191, 2542, 2227, 2220, 2981, 2214, 3121, 1147, 2759, 2760,
	646, 3548, 1147, 1147, 2916, 1760, 2994, 2213, 3015, 2212,
	2995, 2006, 2308, 2211, 3139, 2209, 2758, 3005, 3006, 3001,
	2205, 2761, 2204, 2926, 2927, 2202, 3053, 2193, 2190, 2189,
	3010, 3011, 2097, 2371, 3008, 1220, 1221, 1222, 1219, 1812,
	1811, 1810, 3115, 3075, 1776, 3165, 1775, 3168, 1766, 3168,
	3168, 1746, 196, 1514, 1147, 1234, 1233, 1243, 1244, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1235, 1512, 3876, 2733,
	1289, 3124, 3189, 3783, 3058, 3057, 3128, 3720, 3707, 3702,
	1502, 1502, 1561, 3185, 1220, 1221, 1222, 1219, 3593, 3143,
	3576, 3074, 3572, 3550, 3534, 3187, 3152, 3154, 3442, 3440,
	3410, 3409, 3148, 3406, 1033, 3405, 1033, 1500, 1500, 3371,
	3368, 1033, 3366, 3333, 196, 3137, 187, 158, 1572, 770,
	134, 3114, 192, 3190, 3191, 134, 3163, 646, 1563, 1577,
	3123, 1580, 1030, 1569, 3089, 3126, 3127, 1033, 3134, 1401,
	3138, 2866, 2791, 1466, 3164, 2742, 1988, 1988, 1032, 2741,
	3173, 3026, 3027, 2659, 2735, 3147, 2702, 3028, 3029, 3030,
	3031, 2660, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039,
	3040, 3041, 2658, 3169, 3170, 2341, 2340, 2557, 2466, 3174,
	1220, 1221, 1222, 1219, 192, 652, 2413, 2309, 134, 2281,
	2247, 1701, 192, 1147, 2057, 1852, 1825, 2626, 1644, 1220,
	1221, 1222, 1219, 1595, 1570, 1348, 3249, 1333, 1329, 1328,
	1327, 1326, 1325, 2942, 3227, 2944, 1324, 1323, 1742, 1322,
	1321, 3195, 1320, 1319, 1318, 1739, 1317, 1316, 1315, 1741,
	1738, 1740, 1744, 1745, 1819, 1314, 1313, 1743, 1312, 1819,
	1311, 3171, 1310, 1309, 1308, 1307, 3214, 3215, 1306, 1305,
	2127, 1302, 646, 3202, 1301, 1300, 3201, 1298, 3208, 1297,
	3207, 2431, 3204, 3800, 2657, 3212, 1296, 1293, 1286, 3225,
	3113, 1243, 1244, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1235, 3229, 1285, 1283, 1282, 2996, 3125, 1281, 3232, 3233,
	3234, 1220, 1221, 1222, 1219, 1280, 1463, 1279, 2436, 2440,
	2441, 2442, 2437, 3244, 2438, 2443, 3238, 1278, 2439, 3018,
	1277, 1276, 1031, 2656, 1275, 1274, 1273, 134, 1272, 1267,
	1266, 1265, 2069, 3300, 1264, 1184, 3302, 1130, 3221, 3222,
	2484, 3798, 134, 3796, 134, 3794, 3407, 3262, 3264, 2313,
	1220, 1221, 1222, 1219, 2295, 1172, 2610, 3906, 3263, 3904,
	3281, 3863, 3224, 3267, 3268, 1234, 1233, 1243, 1244, 1236,
	1237, 1238, 1239, 1240, 1241, 1242, 1235, 2723, 646, 1988,
	3304, 3273, 2655, 2477, 2210, 2100, 2654, 1183, 3226, 3337,
	2897, 1749, 1750, 1751, 1752, 1753, 1754, 1747, 1748, 2900,
	2896, 2895, 3146, 3555, 2901, 2449, 2006, 3356, 2653, 1220,
	1221, 1222, 1219, 1220, 1221, 1222, 1219, 3293, 2570, 2898,
	3309, 2652, 2560, 2046, 2899, 1395, 3110, 3312, 2977, 3297,
	3374, 118, 3417, 1147, 3299, 1220, 1221, 1222, 1219, 2651,
	2381, 2902, 3165, 2441, 2442, 3239, 1147, 2650, 1220, 1221,
	1222, 1219, 3444, 64, 3161, 1033, 3162, 1147, 63, 3421,
	3445, 1977, 1033, 1502, 2647, 3142, 1220, 1221, 1222, 1219,
	3144, 3145, 3326, 2646, 1220, 1221, 1222, 1219, 3172, 3328,
	1555, 3358, 646, 2555, 1988, 1880, 1881, 3365, 1147, 3367,
	1500, 1220, 1221, 1222, 1219, 3265, 3266, 648, 3404, 2594,
	1220, 1221, 1222, 1219, 2575, 2576, 3423, 1608, 1589, 3443,
	3355, 3397, 2268, 2059, 3354, 1178, 3361, 213, 3084, 649,
	3334, 3335, 3336, 3077, 650, 2769, 3340, 3341, 2743, 2333,
	1147, 1875, 1876, 1877, 3436, 2304, 3433, 2815, 1884, 3446,
	1851, 3411, 3413, 3416, 2816, 2817, 2818, 3915, 3270, 1762,
	1761, 3704, 3420, 1344, 1345, 1342, 1343, 3425, 2645, 1340,
	1341, 3428, 3427, 3231, 1338, 1339, 3431, 3192, 2425, 3483,
	3375, 2639, 2420, 1989, 3437, 1458, 3434, 3435, 3490, 1457,
	3438, 1211, 1147, 3414, 2925, 1220, 1221, 1222, 1219, 3464,
	2269, 3430, 2129, 1410, 2803, 1386, 3216, 1433, 1220, 1221,
	1222, 1219, 3883, 3881, 1147, 1502, 1502, 3841, 3818, 3817,
	3121, 3815, 3228, 3760, 3721, 2629, 3488, 3489, 3607, 3461,
	3460, 3606, 3527, 3450, 3527, 2890, 3545, 3456, 3282, 3258,
	2605, 3257, 1500, 1712, 3242, 2366, 2336, 1147, 3544, 1147,
	3521, 3522, 1220, 1221, 1222, 1219, 1610, 3547, 3517, 3549,
	3241, 2935, 1408, 3908, 3907, 3907, 1502, 1220, 1221, 1222,
	1219, 3301, 3492, 3496, 2046, 3497, 3495, 2890, 2980, 2685,
	2297, 2192, 3506, 1352, 646, 1169, 1147, 1147, 3908, 3574,
	1147, 1147, 3518, 1712, 3237, 3524, 1425, 1144, 72, 3532,
	3520, 3543, 2, 3531, 2114, 200, 3, 3927, 3358, 3928,
	1714, 3274, 1, 3590, 2666, 3595, 1823, 3552, 3276, 1346,
	3553, 1886, 3404, 3604, 3580, 3581, 887, 3558, 3591, 3592,
	1033, 882, 3610, 3611, 1478, 3397, 3556, 1220, 1221, 1222,
	1219, 2458, 3560, 3448, 2039, 1502, 1506, 1827, 889, 3291,
	2909, 3515, 2910, 2436, 2440, 2441, 2442, 2437, 3230, 2438,
	2443, 3596, 3601, 2439, 2912, 3637, 2688, 2149, 2879, 3600,
	2418, 2285, 1500, 3104, 1396, 3630, 941, 1768, 2046, 3602,
	1625, 1055, 1161, 3477, 1665, 1622, 1665, 1160, 3622, 883,
	884, 885, 886, 1158, 1144, 1717, 772, 2103, 3617, 134,
	134, 134, 1031, 2867, 2841, 3621, 3603, 3625, 3629, 3469,
	948, 3470, 3914, 3943, 3875, 3673, 3667, 3917, 1642, 756,
	3809, 3726, 3879, 3515, 3515, 3728, 3546, 3515, 3515, 3620,
	2154, 1147, 1216, 3597, 2957, 966, 813, 3598, 783, 1284,
	1601, 3690, 3654, 3024, 3696, 3022, 1057, 782, 3661, 3323,
	2713, 3608, 2928, 3675, 1054, 3357, 967, 3668, 2086, 3723,
	3464, 3618, 3670, 3669, 3360, 1556, 1560, 2332, 3683, 3682,
	3779, 3554, 3157, 2777, 1147, 1252, 3686, 1584, 3665, 1502,
	1234, 1233, 1243, 1244, 1236, 1237, 1238, 1239, 1240, 1241,
	1242, 1235, 3774, 3369, 3473, 3471, 3472, 689, 2018, 3703,
	620, 1819, 1015, 3594, 2099, 690, 1500, 2312, 3832, 3706,
	921, 2294, 3712, 1033, 922, 1819, 914, 2731, 3439, 2602,
	2730, 3441, 3714, 1682, 1225, 3749, 1699, 3042, 3739, 3043,
	1262, 728, 2179, 2710, 3392, 2921, 71, 70, 3447, 69,
	3722, 1147, 68, 1234, 1233, 1243, 1244, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1235, 221, 3761, 774, 220, 3638,
	3510, 3805, 3919, 754, 3747, 753, 752, 751, 1665, 750,
	3579, 749, 2435, 3756, 2433, 2432, 2001, 2000, 3755, 3752,
	2066, 3119, 2806, 2801, 3778, 1928, 1926, 1470, 1147, 2361,
	3763, 2368, 1925, 3860, 3789, 3790, 1502, 3571, 2851, 3803,
	3463, 3806, 3793, 3795, 3797, 3799, 1874, 2357, 3772, 1945,
	3777, 3515, 2822, 3807, 3715, 1942, 1941, 2814, 3786, 3567,
	3561, 1337, 1973, 1500, 3671, 3526, 3792, 3376, 3381, 3377,
	3383, 2303, 1080, 1076, 1078, 1079, 1077, 2615, 3210, 3802,
	2338, 3079, 3814, 1502, 3812, 2277, 3673, 1233, 1243, 1244,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1235, 3825, 2276,
	2274, 2273, 3851, 1371, 3748, 3828, 3491, 3393, 3859, 3840,
	1500, 3842, 3541, 3542, 3844, 2482, 3845, 3846, 3515, 2480,
	3384, 1127, 3223, 3762, 3219, 2111, 3843, 2125, 3766, 3767,
	2976, 3379, 2002, 1998, 2881, 2426, 3401, 3402, 3645, 3868,
	1879, 3869, 3380, 3870, 915, 3871, 2292, 3882, 3872, 3884,
	3885, 41, 115, 105, 175, 56, 3880, 3878, 174, 3787,
	3887, 55, 1147, 3739, 113, 3515, 1234, 1233, 1243, 1244,
	1236, 1237, 1238, 1239, 1240, 1241, 1242, 1235, 172, 3385,
	54, 3696, 3896, 1974, 100, 99, 112, 170, 53, 3898,
	3899, 3897, 205, 204, 207, 3913, 3903, 3921, 3905, 206,
	3920, 3902, 3909, 3910, 3911, 3912, 203, 2533, 2534, 1511,
	202, 1544, 201, 652, 3932, 3925, 1147, 3819, 1977, 3530,
	877, 44, 43, 176, 42, 106, 3933, 57, 3778, 3934,
	3936, 40, 39, 38, 34, 13, 3942, 3945, 12, 35,
	22, 21, 1629, 20, 26, 134, 32, 31, 127, 126,
	30, 125, 124, 3662, 123, 122, 121, 120, 29, 1974,
	3952, 19, 48, 47, 1935, 46, 9, 116, 3921, 3959,
	1951, 3920, 3958, 111, 109, 3400, 28, 2347, 3945, 3960,
	110, 107, 103, 101, 3964, 83, 82, 81, 3889, 3890,
	96, 95, 94, 93, 1977, 1944, 92, 91, 89, 3894,
	90, 965, 3389, 80, 1978, 1979, 79, 78, 77, 76,
	98, 104, 102, 134, 87, 97, 88, 86, 85, 84,
	134, 75, 74, 73, 3386, 3390, 3388, 3387, 156, 155,
	1943, 154, 153, 134, 3666, 152, 134, 134, 1967, 1220,
	1221, 1222, 1219, 3020, 150, 151, 1951, 149, 148, 134,
	147, 146, 145, 1665, 144, 49, 50, 51, 52, 166,
	165, 167, 169, 171, 3395, 3396, 168, 173, 163, 161,
	164, 1271, 1788, 1789, 1790, 1791, 162, 160, 1795, 1796,
	1797, 1798, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 66, 11, 114, 18, 25, 1234, 1233, 1243,
	1244, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1235, 4,
	0, 0, 3403, 0, 1967, 0, 0, 0, 1746, 0,
	1955, 0, 0, 0, 3382, 0, 0, 0, 0, 0,
	3394, 1961, 0, 0, 0, 0, 0, 0, 0, 3785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1949, 1983, 0, 0, 1950, 1952, 1954, 0, 1956,
	1957, 1958, 1962, 1963, 1964, 1966, 1969, 1970, 1971, 0,
	0, 0, 0, 0, 0, 0, 1959, 1968, 1960, 0,
	0, 0, 0, 0, 0, 0, 1934, 1936, 1933, 0,
	0, 1930, 0, 0, 0, 0, 1955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1961, 0, 0,
	0, 0, 1975, 0, 0, 1946, 0, 1929, 0, 0,
	3856, 0, 0, 0, 0, 0, 0, 1949, 1983, 0,
	0, 1950, 1952, 1954, 0, 1956, 1957, 1958, 1962, 1963,
	1964, 1966, 1969, 1970, 1971, 0, 0, 0, 0, 0,
	0, 0, 1959, 1968, 1960, 0, 0, 1972, 0, 0,
	3399, 0, 0, 0, 1938, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1948, 0, 0, 0, 0, 0,
	0, 1947, 0, 0, 0, 1742, 0, 0, 1975, 0,
	3856, 0, 1739, 2176, 0, 0, 1741, 1738, 1740, 1744,
	1745, 1746, 0, 0, 1743, 1965, 0, 0, 0, 0,
	0, 0, 0, 0, 1953, 1931, 1932, 1234, 1233, 1243,
	1244, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1235, 0,
	0, 0, 0, 1972, 0, 0, 3398, 0, 3856, 0,
	1246, 0, 1250, 0, 0, 0, 0, 0, 0, 0,
	1948, 0, 0, 2005, 0, 0, 0, 1947, 1247, 1249,
	1245, 0, 1248, 1234, 1233, 1243, 1244, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1235, 0, 0, 0, 0, 0,
	0, 1965, 0, 0, 0, 0, 0, 0, 0, 0,
	1953, 0, 0, 0, 3962, 0, 0, 0, 0, 0,
	0, 0, 0, 1981, 1980, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3533, 0, 0, 0, 0, 134, 0, 0,
	134, 134, 0, 134, 0, 0, 0, 1727, 1728, 1729,
	1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1749, 1750,
	1751, 1752, 1753, 1754, 1747, 1748, 1940, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1742, 0,
	0, 0, 0, 1031, 0, 1739, 134, 0, 0, 1741,
	1738, 1740, 1744, 1745, 1031, 0, 0, 1743, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1976, 0,
	134, 1982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 790, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 781,
	547, 498, 416, 370, 565, 564, 0, 0, 848, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1252, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736,
	1737, 1749, 1750, 1751, 1752, 1753, 1754, 1747, 1748, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 862, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 863, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 846, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	859, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 858, 839, 841, 842, 845, 849, 850, 851,
	852, 853, 855, 857, 861, 628, 0, 554, 569, 632,
	568, 625, 390, 2452, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 860, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 847, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 2005, 541, 542,
	539, 637, 0, 599, 600, 0, 134, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 869, 843, 868, 870, 871, 867, 872, 873,
	854, 748, 0, 799, 865, 864, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 874, 875, 817, 801, 247, 876, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 0, 630, 496, 497, 631,
	607, 0, 740, 196, 61, 187, 158, 0, 0, 0,
	0, 0, 196, 61, 187, 158, 0, 0, 0, 0,
	0, 188, 0, 0, 0, 0, 0, 0, 179, 0,
	188, 0, 189, 0, 0, 0, 0, 179, 0, 134,
	0, 189, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 132, 0, 0, 0, 0, 0, 0, 1974, 0,
	132, 0, 0, 1935, 0, 0, 119, 0, 0, 0,
	0, 0, 0, 192, 0, 119, 0, 0, 0, 0,
	0, 0, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1977, 1944, 0, 0, 0, 0, 0,
	0, 0, 0, 1978, 1979, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1943,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1951, 0, 0, 0, 0,
	140, 141, 0, 142, 143, 0, 0, 0, 0, 140,
	141, 0, 142, 143, 0, 0, 0, 0, 0, 0,
	0, 0, 2005, 2005, 2005, 2005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2005, 0, 0, 0, 0,
	0, 0, 701, 700, 707, 697, 0, 0, 0, 0,
	0, 0, 0, 0, 704, 705, 0, 706, 710, 0,
	0, 691, 0, 1967, 0, 0, 0, 0, 0, 0,
	0, 715, 157, 185, 194, 186, 117, 0, 0, 0,
	0, 157, 185, 194, 186, 117, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 178, 177, 0, 0,
	0, 0, 67, 0, 184, 178, 177, 0, 0, 0,
	0, 67, 0, 0, 0, 719, 0, 0, 721, 0,
	0, 0, 134, 720, 0, 0, 0, 134, 0, 0,
	0, 0, 0, 0, 0, 1934, 2772, 1933, 0, 0,
	2771, 0, 0, 0, 0, 1955, 0, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 1961, 0, 0, 134,
	0, 0, 0, 180, 181, 182, 0, 0, 0, 0,
	0, 0, 180, 181, 182, 0, 1949, 1983, 0, 0,
	1950, 1952, 1954, 0, 1956, 1957, 1958, 1962, 1963, 1964,
	1966, 1969, 1970, 1971, 0, 0, 190, 0, 0, 0,
	0, 1959, 1968, 1960, 0, 190, 0, 0, 0, 0,
	0, 0, 0, 1938, 0, 0, 0, 128, 0, 0,
	0, 183, 0, 129, 0, 0, 128, 0, 0, 0,
	183, 0, 129, 0, 0, 0, 0, 1975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 692, 694, 693, 1931, 1932, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 0, 0, 0,
	130, 0, 1972, 0, 703, 0, 0, 0, 0, 130,
	0, 718, 0, 60, 0, 0, 0, 0, 696, 1948,
	0, 0, 60, 0, 0, 0, 1947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 0, 134, 0,
	1965, 0, 0, 134, 0, 0, 0, 0, 0, 1953,
	2005, 0, 62, 0, 0, 0, 0, 0, 0, 1099,
	0, 62, 1981, 1980, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 193, 0,
	139, 0, 0, 0, 0, 159, 138, 193, 0, 139,
	58, 0, 0, 0, 159, 0, 0, 0, 0, 58,
	0, 0, 0, 0, 0, 1940, 0, 0, 0, 0,
	698, 702, 708, 0, 709, 711, 0, 0, 712, 713,
	714, 0, 0, 716, 717, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 1976, 0, 0,
	1982, 0, 0, 0, 0, 0, 131, 45, 0, 0,
	0, 0, 0, 59, 0, 131, 45, 5, 0, 0,
	0, 1084, 59, 0, 0, 0, 0, 135, 136, 0,
	0, 137, 0, 0, 0, 0, 135, 136, 0, 0,
	137, 1107, 1111, 1113, 1115, 1117, 1118, 1120, 0, 1125,
	1121, 1122, 1123, 1124, 0, 1102, 1103, 1104, 1105, 1082,
	1083, 1108, 0, 1085, 0, 1087, 1088, 1089, 1090, 1086,
	1091, 1092, 1093, 1094, 1095, 1098, 1100, 1096, 1097, 1106,
	0, 0, 0, 0, 0, 0, 0, 1110, 1112, 1114,
	1116, 1119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 695,
	0, 0, 0, 1107, 1111, 1113, 1115, 1117, 1118, 1120,
	0, 1125, 1121, 1122, 1123, 1124, 0, 1102, 1103, 1104,
	1105, 1082, 1083, 1108, 0, 1085, 0, 1087, 1088, 1089,
	1090, 1086, 1091, 1092, 1093, 1094, 1095, 1098, 1100, 1096,
	1097, 1106, 0, 0, 0, 0, 0, 0, 0, 1110,
	1112, 1114, 1116, 1119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 134, 1101, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2611, 2612, 0,
	0, 0, 0, 0, 0, 2005, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 790, 0, 0, 0,
	0, 0, 0, 0, 0, 386, 0, 511, 544, 533,
	617, 499, 0, 0, 0, 0, 0, 0, 743, 0,
	0, 0, 326, 0, 0, 356, 548, 530, 540, 531,
	516, 517, 518, 525, 336, 519, 520, 521, 491, 522,
	492, 523, 524, 781, 547, 498, 416, 370, 565, 564,
	0, 0, 848, 856, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 134, 0, 771, 825,
	824, 758, 768, 0, 0, 299, 219, 493, 613, 495,
	494, 759, 0, 760, 764, 767, 763, 761, 762, 0,
	840, 1109, 0, 0, 0, 0, 0, 727, 739, 0,
	744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 736, 737, 0, 0, 0, 0,
	791, 0, 738, 0, 0, 786, 765, 769, 0, 0,
	0, 0, 289, 422, 439, 300, 412, 452, 305, 419,
	295, 385, 409, 0, 0, 291, 437, 418, 367, 346,
	347, 290, 134, 404, 324, 338, 321, 383, 766, 789,
	793, 320, 862, 787, 447, 293, 0, 446, 382, 433,
	438, 368, 362, 1109, 292, 435, 366, 361, 350, 328,
	863, 351, 352, 342, 394, 360, 395, 343, 372, 371,
	373, 0, 0, 0, 0, 0, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 784, 0, 610, 0, 449, 0, 0, 846,
	0, 0, 0, 421, 0, 0, 353, 0, 0, 0,
	788, 0, 407, 388, 859, 0, 0, 405, 358, 434,
	396, 440, 423, 448, 401, 397, 284, 424, 323, 369,
	296, 298, 318, 325, 327, 329, 330, 378, 379, 391,
	411, 425, 426, 427, 322, 306, 406, 307, 340, 308,
	285, 314, 312, 315, 413, 316, 287, 392, 431, 0,
	335, 402, 365, 288, 364, 393, 430, 429, 297, 456,
	462, 463, 552, 0, 468, 634, 635, 636, 477, 0,
	398, 482, 483, 484, 486, 487, 488, 489, 553, 570,
	537, 507, 470, 561, 504, 508, 509, 573, 1770, 1769,
	1771, 461, 354, 355, 0, 333, 281, 282, 629, 844,
	384, 575, 608, 609, 500, 134, 858, 839, 841, 842,
	845, 849, 850, 851, 852, 853, 855, 857, 861, 628,
	0, 554, 569, 632, 568, 625, 390, 0, 410, 566,
	513, 0, 558, 532, 0, 559, 528, 563, 0, 502,
	0, 417, 442, 454, 471, 474, 503, 588, 589, 590,
	286, 473, 592, 593, 594, 595, 596, 597, 598, 591,
	860, 535, 512, 538, 453, 515, 514, 0, 0, 549,
	792, 550, 551, 374, 375, 376, 377, 847, 576, 304,
	472, 400, 0, 536, 0, 0, 0, 0, 0, 0,
	0, 0, 541, 542, 539, 637, 0, 599, 600, 0,
	0, 466, 467, 332, 339, 485, 341, 303, 389, 334,
	451, 348, 0, 478, 543, 479, 602, 605, 603, 604,
	381, 344, 345, 414, 349, 359, 403, 450, 387, 408,
	301, 441, 415, 363, 529, 556, 869, 843, 868, 870,
	871, 867, 872, 873, 854, 748, 0, 799, 865, 864,
	866, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 583, 582, 581, 580, 579, 578, 577,
	0, 0, 526, 428, 313, 275, 309, 310, 317, 626,
	623, 432, 627, 0, 283, 506, 357, 0, 399, 331,
	571, 572, 0, 0, 832, 806, 807, 808, 745, 809,
	803, 804, 746, 805, 833, 797, 829, 830, 773, 800,
	810, 828, 811, 831, 834, 835, 874, 875, 817, 801,
	247, 876, 814, 836, 827, 826, 812, 798, 837, 838,
	780, 775, 815, 816, 802, 820, 821, 822, 747, 794,
	795, 796, 818, 819, 776, 777, 778, 779, 0, 0,
	0, 457, 458, 459, 481, 0, 443, 505, 624, 0,
	0, 0, 0, 0, 0, 0, 555, 567, 601, 0,
	611, 612, 614, 616, 823, 618, 420, 0, 619, 790,
	630, 496, 497, 631, 607, 0, 740, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 326, 1820, 0, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 781, 547, 498, 416,
	370, 565, 564, 0, 0, 848, 856, 0, 0, 0,
	0, 0, 0, 0, 0, 2030, 0, 0, 735, 0,
	0, 771, 825, 824, 758, 768, 0, 0, 299, 219,
	493, 613, 495, 494, 759, 0, 760, 764, 767, 763,
	761, 762, 0, 840, 0, 0, 0, 0, 0, 0,
	727, 739, 0, 744, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 737, 0,
	0, 0, 0, 791, 0, 738, 0, 0, 2031, 765,
	769, 0, 0, 0, 0, 289, 422, 439, 300, 412,
	452, 305, 419, 295, 385, 409, 0, 0, 291, 437,
	418, 367, 346, 347, 290, 0, 404, 324, 338, 321,
	383, 766, 789, 793, 320, 862, 787, 447, 293, 0,
	446, 382, 433, 438, 368, 362, 0, 292, 435, 366,
	361, 350, 328, 863, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 606, 784, 0, 610, 0, 449,
	0, 0, 846, 0, 0, 0, 421, 0, 0, 353,
	0, 0, 0, 788, 0, 407, 388, 859, 0, 0,
	405, 358, 434, 396, 440, 423, 448, 401, 397, 284,
	424, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 411, 425, 426, 427, 322, 306, 406,
	307, 340, 308, 285, 314, 312, 315, 413, 316, 287,
	392, 431, 0, 335, 402, 365, 288, 364, 393, 430,
	429, 297, 456, 462, 463, 552, 0, 468, 634, 635,
	636, 477, 0, 398, 482, 483, 484, 486, 487, 488,
	489, 553, 570, 537, 507, 470, 561, 504, 508, 509,
	573, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 629, 844, 384, 575, 608, 609, 500, 0, 858,
	839, 841, 842, 845, 849, 850, 851, 852, 853, 855,
	857, 861, 628, 0, 554, 569, 632, 568, 625, 390,
	0, 410, 566, 513, 0, 558, 532, 0, 559, 528,
	563, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	588, 589, 590, 286, 473, 592, 593, 594, 595, 596,
	597, 598, 591, 860, 535, 512, 538, 453, 515, 514,
	0, 0, 549, 792, 550, 551, 374, 375, 376, 377,
	847, 576, 304, 472, 400, 0, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 542, 539, 637, 0,
	599, 600, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 543, 479, 602,
	605, 603, 604, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 529, 556, 869,
	843, 868, 870, 871, 867, 872, 873, 854, 748, 0,
	799, 865, 864, 866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 583, 582, 581, 580,
	579, 578, 577, 0, 0, 526, 428, 313, 275, 309,
	310, 317, 626, 623, 432, 627, 0, 283, 506, 357,
	0, 399, 331, 571, 572, 0, 0, 832, 806, 807,
	808, 745, 809, 803, 804, 746, 805, 833, 797, 829,
	830, 773, 800, 810, 828, 811, 831, 834, 835, 874,
	875, 817, 801, 247, 876, 814, 836, 827, 826, 812,
	798, 837, 838, 780, 775, 815, 816, 802, 820, 821,
	822, 747, 794, 795, 796, 818, 819, 776, 777, 778,
	779, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 624, 0, 0, 0, 0, 0, 0, 0, 555,
	567, 601, 0, 611, 612, 614, 616, 823, 618, 420,
	0, 619, 0, 630, 496, 497, 631, 607, 0, 740,
	196, 790, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 1255, 547,
	498, 416, 370, 565, 564, 0, 0, 848, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 771, 825, 824, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 759, 0, 760, 764,
	767, 763, 761, 762, 0, 840, 0, 0, 0, 0,
	0, 0, 727, 739, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	737, 0, 0, 0, 0, 791, 0, 738, 0, 0,
	786, 765, 769, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 789, 793, 320, 862, 787, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 863, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 784, 0, 610,
	0, 449, 0, 0, 846, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 788, 0, 407, 388, 859,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 844, 384, 575, 608, 609, 500,
	0, 858, 839, 841, 842, 845, 849, 850, 851, 852,
	853, 855, 857, 861, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 860, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 792, 550, 551, 374, 375,
	376, 377, 847, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 869, 843, 868, 870, 871, 867, 872, 873, 854,
	748, 0, 799, 865, 864, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 159, 399, 331, 571, 572, 0, 0, 832,
	806, 807, 808, 745, 809, 803, 804, 746, 805, 833,
	797, 829, 830, 773, 800, 810, 828, 811, 831, 834,
	835, 874, 875, 817, 801, 247, 876, 814, 836, 827,
	826, 812, 798, 837, 838, 780, 775, 815, 816, 802,
	820, 821, 822, 747, 794, 795, 796, 818, 819, 776,
	777, 778, 779, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 823,
	618, 420, 0, 619, 790, 630, 496, 497, 631, 607,
	0, 740, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 0, 0, 0, 0, 743, 0, 0, 0,
	326, 3961, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 781, 547, 498, 416, 370, 565, 564, 0, 0,
	848, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 771, 825, 824, 758,
	768, 0, 0, 299, 219, 493, 613, 495, 494, 759,
	0, 760, 764, 767, 763, 761, 762, 0, 840, 0,
	0, 0, 0, 0, 0, 727, 739, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 737, 0, 0, 0, 0, 791, 0,
	738, 0, 0, 786, 765, 769, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 766, 789, 793, 320,
	862, 787, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 863, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	784, 0, 610, 0, 449, 0, 0, 846, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 788, 0,
	407, 388, 859, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 462, 463,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 844, 384, 575,
	608, 609, 500, 0, 858, 839, 841, 842, 845, 849,
	850, 851, 852, 853, 855, 857, 861, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 860, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 792, 550,
	551, 374, 375, 376, 377, 847, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 869, 843, 868, 870, 871, 867,
	872, 873, 854, 748, 0, 799, 865, 864, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 832, 806, 807, 808, 745, 809, 803, 804,
	746, 805, 833, 797, 829, 830, 773, 800, 810, 828,
	811, 831, 834, 835, 874, 875, 817, 801, 247, 876,
	814, 836, 827, 826, 812, 798, 837, 838, 780, 775,
	815, 816, 802, 820, 821, 822, 747, 794, 795, 796,
	818, 819, 776, 777, 778, 779, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 823, 618, 420, 0, 619, 790, 630, 496,
	497, 631, 607, 0, 740, 0, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 781, 547, 498, 416, 370, 565,
	564, 0, 0, 848, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 759, 0, 760, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 727, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	0, 791, 0, 738, 0, 0, 786, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 862, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 863, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	846, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 859, 3857, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 858, 839, 841,
	842, 845, 849, 850, 851, 852, 853, 855, 857, 861,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 860, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 847, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 869, 843, 868,
	870, 871, 867, 872, 873, 854, 748, 0, 799, 865,
	864, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 874, 875, 817,
	801, 247, 876, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	790, 630, 496, 497, 631, 607, 0, 740, 0, 386,
	0, 511, 544, 533, 617, 499, 0, 0, 0, 0,
	0, 0, 743, 0, 0, 0, 326, 1820, 0, 356,
	548, 530, 540, 531, 516, 517, 518, 525, 336, 519,
	520, 521, 491, 522, 492, 523, 524, 781, 547, 498,
	416, 370, 565, 564, 0, 0, 848, 856, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 771, 825, 824, 758, 768, 0, 0, 299,
	219, 493, 613, 495, 494, 759, 0, 760, 764, 767,
	763, 761, 762, 0, 840, 0, 0, 0, 0, 0,
	0, 727, 739, 0, 744, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 737,
	0, 0, 0, 0, 791, 0, 738, 0, 0, 786,
	765, 769, 0, 0, 0, 0, 289, 422, 439, 300,
	412, 452, 305, 419, 295, 385, 409, 0, 0, 291,
	437, 418, 367, 346, 347, 290, 0, 404, 324, 338,
	321, 383, 766, 789, 793, 320, 862, 787, 447, 293,
	0, 446, 382, 433, 438, 368, 362, 0, 292, 435,
	366, 361, 350, 328, 863, 351, 352, 342, 394, 360,
	395, 343, 372, 371, 373, 0, 0, 0, 0, 0,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 784, 0, 610, 0,
	449, 0, 0, 846, 0, 0, 0, 421, 0, 0,
	353, 0, 0, 0, 788, 0, 407, 388, 859, 0,
	0, 405, 358, 434, 396, 440, 423, 448, 401, 397,
	284, 424, 323, 369, 296, 298, 318, 325, 327, 329,
	330, 378, 379, 391, 411, 425, 426, 427, 322, 306,
	406, 307, 340, 308, 285, 314, 312, 315, 413, 316,
	287, 392, 431, 0, 335, 402, 365, 288, 364, 393,
	430, 429, 297, 456, 462, 463, 552, 0, 468, 634,
	635, 636, 477, 0, 398, 482, 483, 484, 486, 487,
	488, 489, 553, 570, 537, 507, 470, 561, 504, 508,
	509, 573, 0, 0, 0, 461, 354, 355, 0, 333,
	281, 282, 629, 844, 384, 575, 608, 609, 500, 0,
	858, 839, 841, 842, 845, 849, 850, 851, 852, 853,
	855, 857, 861, 628, 0, 554, 569, 632, 568, 625,
	390, 0, 410, 566, 513, 0, 558, 532, 0, 559,
	528, 563, 0, 502, 0, 417, 442, 454, 471, 474,
	503, 588, 589, 590, 286, 473, 592, 593, 594, 595,
	596, 597, 598, 591, 860, 535, 512, 538, 453, 515,
	514, 0, 0, 549, 792, 550, 551, 374, 375, 376,
	377, 847, 576, 304, 472, 400, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 541, 542, 539, 637,
	0, 599, 600, 0, 0, 466, 467, 332, 339, 485,
	341, 303, 389, 334, 451, 348, 0, 478, 543, 479,
	602, 605, 603, 604, 381, 344, 345, 414, 349, 359,
	403, 450, 387, 408, 301, 441, 415, 363, 529, 556,
	869, 843, 868, 870, 871, 867, 872, 873, 854, 748,
	0, 799, 865, 864, 866, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 584, 583, 582, 581,
	580, 579, 578, 577, 0, 0, 526, 428, 313, 275,
	309, 310, 317, 626, 623, 432, 627, 0, 283, 506,
	357, 0, 399, 331, 571, 572, 0, 0, 832, 806,
	807, 808, 745, 809, 803, 804, 746, 805, 833, 797,
	829, 830, 773, 800, 810, 828, 811, 831, 834, 835,
	874, 875, 817, 801, 247, 876, 814, 836, 827, 826,
	812, 798, 837, 838, 780, 775, 815, 816, 802, 820,
	821, 822, 747, 794, 795, 796, 818, 819, 776, 777,
	778, 779, 0, 0, 0, 457, 458, 459, 481, 0,
	443, 505, 624, 0, 0, 0, 0, 0, 0, 0,
	555, 567, 601, 0, 611, 612, 614, 616, 823, 618,
	420, 0, 619, 790, 630, 496, 497, 631, 607, 0,
	740, 0, 386, 0, 511, 544, 533, 617, 499, 0,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 326,
	0, 0, 356, 548, 530, 540, 531, 516, 517, 518,
	525, 336, 519, 520, 521, 491, 522, 492, 523, 524,
	781, 547, 498, 416, 370, 565, 564, 0, 0, 848,
	856, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 735, 0, 0, 771, 825, 824, 758, 768,
	0, 0, 299, 219, 493, 613, 495, 494, 759, 0,
	760, 764, 767, 763, 761, 762, 0, 840, 0, 0,
	0, 0, 0, 0, 727, 739, 0, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 737, 1539, 0, 0, 0, 791, 0, 738,
	0, 0, 786, 765, 769, 0, 0, 0, 0, 289,
	422, 439, 300, 412, 452, 305, 419, 295, 385, 409,
	0, 0, 291, 437, 418, 367, 346, 347, 290, 0,
	404, 324, 338, 321, 383, 766, 789, 793, 320, 862,
	787, 447, 293, 0, 446, 382, 433, 438, 368, 362,
	0, 292, 435, 366, 361, 350, 328, 863, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 784,
	0, 610, 0, 449, 0, 0, 846, 0, 0, 0,
	421, 0, 0, 353, 0, 0, 0, 788, 0, 407,
	388, 859, 0, 0, 405, 358, 434, 396, 440, 423,
	448, 401, 397, 284, 424, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 411, 425, 426,
	427, 322, 306, 406, 307, 340, 308, 285, 314, 312,
	315, 413, 316, 287, 392, 431, 0, 335, 402, 365,
	288, 364, 393, 430, 429, 297, 456, 462, 463, 552,
	0, 468, 634, 635, 636, 477, 0, 398, 482, 483,
	484, 486, 487, 488, 489, 553, 570, 537, 507, 470,
	561, 504, 508, 509, 573, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 629, 844, 384, 575, 608,
	609, 500, 0, 858, 839, 841, 842, 845, 849, 850,
	851, 852, 853, 855, 857, 861, 628, 0, 554, 569,
	632, 568, 625, 390, 0, 410, 566, 513, 0, 558,
	532, 0, 559, 528, 563, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 588, 589, 590, 286, 473, 592,
	593, 594, 595, 596, 597, 598, 591, 860, 535, 512,
	538, 453, 515, 514, 0, 0, 549, 792, 550, 551,
	374, 375, 376, 377, 847, 576, 304, 472, 400, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	542, 539, 637, 0, 599, 600, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 543, 479, 602, 605, 603, 604, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 529, 556, 869, 843, 868, 870, 871, 867, 872,
	873, 854, 748, 0, 799, 865, 864, 866, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	583, 582, 581, 580, 579, 578, 577, 0, 0, 526,
	428, 313, 275, 309, 310, 317, 626, 623, 432, 627,
	0, 283, 506, 357, 0, 399, 331, 571, 572, 0,
	0, 832, 806, 807, 808, 745, 809, 803, 804, 746,
	805, 833, 797, 829, 830, 773, 800, 810, 828, 811,
	831, 834, 835, 874, 875, 817, 801, 247, 876, 814,
	836, 827, 826, 812, 798, 837, 838, 780, 775, 815,
	816, 802, 820, 821, 822, 747, 794, 795, 796, 818,
	819, 776, 777, 778, 779, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 624, 0, 0, 0, 0,
	0, 0, 0, 555, 567, 601, 0, 611, 612, 614,
	616, 823, 618, 420, 0, 619, 0, 630, 496, 497,
	631, 607, 790, 740, 0, 2200, 0, 0, 0, 0,
	0, 386, 0, 511, 544, 533, 617, 499, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 0, 326, 0,
	0, 356, 548, 530, 540, 531, 516, 517, 518, 525,
	336, 519, 520, 521, 491, 522, 492, 523, 524, 781,
	547, 498, 416, 370, 565, 564, 0, 0, 848, 856,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 771, 825, 824, 758, 768, 0,
	0, 299, 219, 493, 613, 495, 494, 759, 0, 760,
	764, 767, 763, 761, 762, 0, 840, 0, 0, 0,
	0, 0, 0, 727, 739, 0, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 737, 0, 0, 0, 0, 791, 0, 738, 0,
	0, 786, 765, 769, 0, 0, 0, 0, 289, 422,
	439, 300, 412, 452, 305, 419, 295, 385, 409, 0,
	0, 291, 437, 418, 367, 346, 347, 290, 0, 404,
	324, 338, 321, 383, 766, 789, 793, 320, 862, 787,
	447, 293, 0, 446, 382, 433, 438, 368, 362, 0,
	292, 435, 366, 361, 350, 328, 863, 351, 352, 342,
	394, 360, 395, 343, 372, 371, 373, 0, 0, 0,
	0, 0, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 606, 784, 0,
	610, 0, 449, 0, 0, 846, 0, 0, 0, 421,
	0, 0, 353, 0, 0, 0, 788, 0, 407, 388,
	859, 0, 0, 405, 358, 434, 396, 440, 423, 448,
	401, 397, 284, 424, 323, 369, 296, 298, 318, 325,
	327, 329, 330, 378, 379, 391, 411, 425, 426, 427,
	322, 306, 406, 307, 340, 308, 285, 314, 312, 315,
	413, 316, 287, 392, 431, 0, 335, 402, 365, 288,
	364, 393, 430, 429, 297, 456, 462, 463, 552, 0,
	468, 634, 635, 636, 477, 0, 398, 482, 483, 484,
	486, 487, 488, 489, 553, 570, 537, 507, 470, 561,
	504, 508, 509, 573, 0, 0, 0, 461, 354, 355,
	0, 333, 281, 282, 629, 844, 384, 575, 608, 609,
	500, 0, 858, 839, 841, 842, 845, 849, 850, 851,
	852, 853, 855, 857, 861, 628, 0, 554, 569, 632,
	568, 625, 390, 0, 410, 566, 513, 0, 558, 532,
	0, 559, 528, 563, 0, 502, 0, 417, 442, 454,
	471, 474, 503, 588, 589, 590, 286, 473, 592, 593,
	594, 595, 596, 597, 598, 591, 860, 535, 512, 538,
	453, 515, 514, 0, 0, 549, 792, 550, 551, 374,
	375, 376, 377, 847, 576, 304, 472, 400, 0, 536,
	0, 0, 0, 0, 0, 0, 0, 0, 541, 542,
	539, 637, 0, 599, 600, 0, 0, 466, 467, 332,
	339, 485, 341, 303, 389, 334, 451, 348, 0, 478,
	543, 479, 602, 605, 603, 604, 381, 344, 345, 414,
	349, 359, 403, 450, 387, 408, 301, 441, 415, 363,
	529, 556, 869, 843, 868, 870, 871, 867, 872, 873,
	854, 748, 0, 799, 865, 864, 866, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 584, 583,
	582, 581, 580, 579, 578, 577, 0, 0, 526, 428,
	313, 275, 309, 310, 317, 626, 623, 432, 627, 0,
	283, 506, 357, 0, 399, 331, 571, 572, 0, 0,
	832, 806, 807, 808, 745, 809, 803, 804, 746, 805,
	833, 797, 829, 830, 773, 800, 810, 828, 811, 831,
	834, 835, 874, 875, 817, 801, 247, 876, 814, 836,
	827, 826, 812, 798, 837, 838, 780, 775, 815, 816,
	802, 820, 821, 822, 747, 794, 795, 796, 818, 819,
	776, 777, 778, 779, 0, 0, 0, 457, 458, 459,
	481, 0, 443, 505, 624, 0, 0, 0, 0, 0,
	0, 0, 555, 567, 601, 0, 611, 612, 614, 616,
	823, 618, 420, 0, 619, 790, 630, 496, 497, 631,
	607, 0, 740, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 781, 547, 498, 416, 370, 565, 564, 0,
	0, 848, 856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 771, 825, 824,
	758, 768, 0, 0, 299, 219, 493, 613, 495, 494,
	759, 0, 760, 764, 767, 763, 761, 762, 0, 840,
	0, 0, 0, 0, 0, 0, 727, 739, 0, 744,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 736, 737, 1813, 0, 0, 0, 791,
	0, 738, 0, 0, 786, 765, 769, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 766, 789, 793,
	320, 862, 787, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 863,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 784, 0, 610, 0, 449, 0, 0, 846, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 788,
	0, 407, 388, 859, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 844, 384,
	575, 608, 609, 500, 0, 858, 839, 841, 842, 845,
	849, 850, 851, 852, 853, 855, 857, 861, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 860,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 792,
	550, 551, 374, 375, 376, 377, 847, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 869, 843, 868, 870, 871,
	867, 872, 873, 854, 748, 0, 799, 865, 864, 866,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 832, 806, 807, 808, 745, 809, 803,
	804, 746, 805, 833, 797, 829, 830, 773, 800, 810,
	828, 811, 831, 834, 835, 874, 875, 817, 801, 247,
	876, 814, 836, 827, 826, 812, 798, 837, 838, 780,
	775, 815, 816, 802, 820, 821, 822, 747, 794, 795,
	796, 818, 819, 776, 777, 778, 779, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 823, 618, 420, 0, 619, 790, 630,
	496, 497, 631, 607, 0, 740, 0, 386, 0, 511,
	544, 533, 617, 499, 0, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 326, 0, 0, 356, 548, 530,
	540, 531, 516, 517, 518, 525, 336, 519, 520, 521,
	491, 522, 492, 523, 524, 781, 547, 498, 416, 370,
	565, 564, 0, 0, 848, 856, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 0,
	771, 825, 824, 758, 768, 0, 0, 299, 219, 493,
	613, 495, 494, 759, 0, 760, 764, 767, 763, 761,
	762, 0, 840, 0, 0, 0, 0, 0, 0, 727,
	739, 0, 744, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 736, 737, 0, 0,
	0, 0, 791, 0, 738, 0, 0, 786, 765, 769,
	0, 0, 0, 0, 289, 422, 439, 300, 412, 452,
	305, 419, 295, 385, 409, 0, 0, 291, 437, 418,
	367, 346, 347, 290, 0, 404, 324, 338, 321, 383,
	766, 789, 793, 320, 862, 787, 447, 293, 0, 446,
	382, 433, 438, 368, 362, 0, 292, 435, 366, 361,
	350, 328, 863, 351, 352, 342, 394, 360, 395, 343,
	372, 371, 373, 0, 0, 0, 0, 0, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 606, 784, 0, 610, 0, 449, 0,
	0, 846, 0, 0, 0, 421, 0, 0, 353, 0,
	0, 0, 788, 0, 407, 388, 859, 0, 0, 405,
	358, 434, 396, 440, 423, 448, 401, 397, 284, 424,
	323, 369, 296, 298, 318, 325, 327, 329, 330, 378,
	379, 391, 411, 425, 426, 427, 322, 306, 406, 307,
	340, 308, 285, 314, 312, 315, 413, 316, 287, 392,
	431, 0, 335, 402, 365, 288, 364, 393, 430, 429,
	297, 456, 462, 463, 552, 0, 468, 634, 635, 636,
	477, 0, 398, 482, 483, 484, 486, 487, 488, 489,
	553, 570, 537, 507, 470, 561, 504, 508, 509, 573,
	0, 0, 0, 461, 354, 355, 0, 333, 281, 282,
	629, 844, 384, 575, 608, 609, 500, 0, 858, 839,
	841, 842, 845, 849, 850, 851, 852, 853, 855, 857,
	861, 628, 0, 554, 569, 632, 568, 625, 390, 0,
	410, 566, 513, 0, 558, 532, 0, 559, 528, 563,
	0, 502, 0, 417, 442, 454, 471, 474, 503, 588,
	589, 590, 286, 473, 592, 593, 594, 595, 596, 597,
	598, 591, 860, 535, 512, 538, 453, 515, 514, 0,
	0, 549, 792, 550, 551, 374, 375, 376, 377, 847,
	576, 304, 472, 400, 0, 536, 0, 0, 0, 0,
	0, 0, 0, 0, 541, 542, 539, 637, 0, 599,
	600, 0, 0, 466, 467, 332, 339, 485, 341, 303,
	389, 334, 451, 348, 0, 478, 543, 479, 602, 605,
	603, 604, 381, 344, 345, 414, 349, 359, 403, 450,
	387, 408, 301, 441, 415, 363, 529, 556, 869, 843,
	868, 870, 871, 867, 872, 873, 854, 748, 0, 799,
	865, 864, 866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 584, 583, 582, 581, 580, 579,
	578, 577, 0, 0, 526, 428, 313, 275, 309, 310,
	317, 626, 623, 432, 627, 0, 283, 506, 357, 0,
	399, 331, 571, 572, 0, 0, 832, 806, 807, 808,
	745, 809, 803, 804, 746, 805, 833, 797, 829, 830,
	773, 800, 810, 828, 811, 831, 834, 835, 874, 875,
	817, 801, 247, 876, 814, 836, 827, 826, 812, 798,
	837, 838, 780, 775, 815, 816, 802, 820, 821, 822,
	747, 794, 795, 796, 818, 819, 776, 777, 778, 779,
	0, 0, 0, 457, 458, 459, 481, 0, 443, 505,
	624, 0, 0, 0, 0, 0, 0, 0, 555, 567,
	601, 0, 611, 612, 614, 616, 823, 618, 420, 0,
	619, 790, 630, 496, 497, 631, 607, 0, 740, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 781, 547,
	498, 416, 370, 565, 564, 0, 0, 848, 856, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	735, 0, 0, 771, 825, 824, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 2663, 0, 2664, 764,
	767, 763, 761, 762, 0, 840, 0, 0, 0, 0,
	0, 0, 727, 739, 0, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 736,
	737, 0, 0, 0, 0, 791, 0, 738, 0, 0,
	786, 765, 769, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 789, 793, 320, 862, 787, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 863, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 784, 0, 610,
	0, 449, 0, 0, 846, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 788, 0, 407, 388, 859,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 844, 384, 575, 608, 609, 500,
	0, 858, 839, 841, 842, 845, 849, 850, 851, 852,
	853, 855, 857, 861, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 860, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 792, 550, 551, 374, 375,
	376, 377, 847, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 869, 843, 868, 870, 871, 867, 872, 873, 854,
	748, 0, 799, 865, 864, 866, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 832,
	806, 807, 808, 745, 809, 803, 804, 746, 805, 833,
	797, 829, 830, 773, 800, 810, 828, 811, 831, 834,
	835, 874, 875, 817, 801, 247, 876, 814, 836, 827,
	826, 812, 798, 837, 838, 780, 775, 815, 816, 802,
	820, 821, 822, 747, 794, 795, 796, 818, 819, 776,
	777, 778, 779, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 823,
	618, 420, 0, 619, 790, 630, 496, 497, 631, 607,
	0, 740, 0, 386, 0, 511, 544, 533, 617, 499,
	0, 0, 1683, 0, 0, 0, 743, 0, 0, 0,
	326, 0, 0, 356, 548, 530, 540, 531, 516, 517,
	518, 525, 336, 519, 520, 521, 491, 522, 492, 523,
	524, 781, 547, 498, 416, 370, 565, 564, 0, 0,
	848, 856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 771, 825, 824, 758,
	768, 0, 0, 299, 219, 493, 613, 495, 494, 759,
	0, 760, 764, 767, 763, 761, 762, 0, 840, 0,
	0, 0, 0, 0, 0, 0, 739, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 736, 737, 0, 0, 0, 0, 791, 0,
	738, 0, 0, 786, 765, 769, 0, 0, 0, 0,
	289, 422, 439, 300, 412, 452, 305, 419, 295, 385,
	409, 0, 0, 291, 437, 418, 367, 346, 347, 290,
	0, 404, 324, 338, 321, 383, 766, 789, 793, 320,
	862, 787, 447, 293, 0, 446, 382, 433, 438, 368,
	362, 0, 292, 435, 366, 361, 350, 328, 863, 351,
	352, 342, 394, 360, 395, 343, 372, 371, 373, 0,
	0, 0, 0, 0, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 606,
	784, 0, 610, 0, 449, 0, 0, 846, 0, 0,
	0, 421, 0, 0, 353, 0, 0, 0, 788, 0,
	407, 388, 859, 0, 0, 405, 358, 434, 396, 440,
	423, 448, 401, 397, 284, 424, 323, 369, 296, 298,
	318, 325, 327, 329, 330, 378, 379, 391, 411, 425,
	426, 427, 322, 306, 406, 307, 340, 308, 285, 314,
	312, 315, 413, 316, 287, 392, 431, 0, 335, 402,
	365, 288, 364, 393, 430, 429, 297, 456, 1684, 1685,
	552, 0, 468, 634, 635, 636, 477, 0, 398, 482,
	483, 484, 486, 487, 488, 489, 553, 570, 537, 507,
	470, 561, 504, 508, 509, 573, 0, 0, 0, 461,
	354, 355, 0, 333, 281, 282, 629, 844, 384, 575,
	608, 609, 500, 0, 858, 839, 841, 842, 845, 849,
	850, 851, 852, 853, 855, 857, 861, 628, 0, 554,
	569, 632, 568, 625, 390, 0, 410, 566, 513, 0,
	558, 532, 0, 559, 528, 563, 0, 502, 0, 417,
	442, 454, 471, 474, 503, 588, 589, 590, 286, 473,
	592, 593, 594, 595, 596, 597, 598, 591, 860, 535,
	512, 538, 453, 515, 514, 0, 0, 549, 792, 550,
	551, 374, 375, 376, 377, 847, 576, 304, 472, 400,
	0, 536, 0, 0, 0, 0, 0, 0, 0, 0,
	541, 542, 539, 637, 0, 599, 600, 0, 0, 466,
	467, 332, 339, 485, 341, 303, 389, 334, 451, 348,
	0, 478, 543, 479, 602, 605, 603, 604, 381, 344,
	345, 414, 349, 359, 403, 450, 387, 408, 301, 441,
	415, 363, 529, 556, 869, 843, 868, 870, 871, 867,
	872, 873, 854, 748, 0, 799, 865, 864, 866, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	584, 583, 582, 581, 580, 579, 578, 577, 0, 0,
	526, 428, 313, 275, 309, 310, 317, 626, 623, 432,
	627, 0, 283, 506, 357, 0, 399, 331, 571, 572,
	0, 0, 832, 806, 807, 808, 745, 809, 803, 804,
	746, 805, 833, 797, 829, 830, 773, 800, 810, 828,
	811, 831, 834, 835, 874, 875, 817, 801, 247, 876,
	814, 836, 827, 826, 812, 798, 837, 838, 780, 775,
	815, 816, 802, 820, 821, 822, 747, 794, 795, 796,
	818, 819, 776, 777, 778, 779, 0, 0, 0, 457,
	458, 459, 481, 0, 443, 505, 624, 0, 0, 0,
	0, 0, 0, 0, 555, 567, 601, 0, 611, 612,
	614, 616, 823, 618, 420, 0, 619, 790, 630, 496,
	497, 631, 607, 0, 740, 0, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 781, 547, 498, 416, 370, 565,
	564, 0, 0, 848, 856, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 0, 0, 771,
	825, 824, 758, 768, 0, 0, 299, 219, 493, 613,
	495, 494, 759, 0, 760, 764, 767, 763, 761, 762,
	0, 840, 0, 0, 0, 0, 0, 0, 0, 739,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 736, 737, 0, 0, 0,
	0, 791, 0, 738, 0, 0, 786, 765, 769, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 766,
	789, 793, 320, 862, 787, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 863, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 784, 0, 610, 0, 449, 0, 0,
	846, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 788, 0, 407, 388, 859, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	844, 384, 575, 608, 609, 500, 0, 858, 839, 841,
	842, 845, 849, 850, 851, 852, 853, 855, 857, 861,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 860, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 792, 550, 551, 374, 375, 376, 377, 847, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 869, 843, 868,
	870, 871, 867, 872, 873, 854, 748, 0, 799, 865,
	864, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 832, 806, 807, 808, 745,
	809, 803, 804, 746, 805, 833, 797, 829, 830, 773,
	800, 810, 828, 811, 831, 834, 835, 874, 875, 817,
	801, 247, 876, 814, 836, 827, 826, 812, 798, 837,
	838, 780, 775, 815, 816, 802, 820, 821, 822, 747,
	794, 795, 796, 818, 819, 776, 777, 778, 779, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 823, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 0, 740, 196, 61,
	187, 158, 0, 0, 0, 0, 0, 0, 386, 0,
	511, 544, 533, 617, 499, 0, 188, 0, 0, 0,
	0, 0, 0, 179, 0, 326, 0, 189, 356, 548,
	530, 540, 531, 516, 517, 518, 525, 336, 519, 520,
	521, 491, 522, 492, 523, 524, 132, 547, 498, 416,
	370, 565, 564, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 0, 0, 192, 0,
	0, 218, 0, 0, 0, 0, 0, 0, 299, 219,
	493, 613, 495, 494, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 302, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 289, 422, 439, 300, 412,
	452, 305, 419, 295, 385, 409, 0, 0, 291, 437,
	418, 367, 346, 347, 290, 0, 404, 324, 338, 321,
	383, 0, 436, 464, 320, 455, 0, 447, 293, 0,
	446, 382, 433, 438, 368, 362, 0, 292, 435, 366,
	361, 350, 328, 480, 351, 352, 342, 394, 360, 395,
	343, 372, 371, 373, 0, 0, 0, 0, 0, 475,
	476, 0, 0, 0, 0, 0, 0, 157, 185, 194,
	186, 117, 0, 0, 606, 0, 0, 610, 0, 449,
	0, 0, 211, 0, 0, 0, 421, 0, 0, 353,
	184, 178, 177, 465, 0, 407, 388, 223, 0, 0,
	405, 358, 434, 396, 440, 423, 448, 401, 397, 284,
	424, 323, 369, 296, 298, 318, 325, 327, 329, 330,
	378, 379, 391, 411, 425, 426, 427, 322, 306, 406,
	307, 340, 308, 285, 314, 312, 315, 413, 316, 287,
	392, 431, 0, 335, 402, 365, 288, 364, 393, 430,
	429, 297, 456, 462, 463, 552, 0, 468, 585, 586,
	587, 477, 0, 398, 482, 483, 484, 486, 487, 488,
	489, 553, 570, 537, 507, 470, 561, 504, 508, 509,
	573, 0, 0, 0, 461, 354, 355, 0, 333, 281,
	282, 444, 319, 384, 575, 608, 609, 500, 0, 562,
	501, 510, 311, 534, 546, 545, 380, 460, 214, 557,
	560, 490, 224, 0, 554, 569, 527, 568, 225, 390,
	0, 410, 566, 513, 0, 558, 532, 0, 559, 528,
	563, 0, 502, 0, 417, 442, 454, 471, 474, 503,
	588, 589, 590, 286, 473, 592, 593, 594, 595, 596,
	597, 598, 591, 445, 535, 512, 538, 453, 515, 514,
	0, 0, 549, 469, 550, 551, 374, 375, 376, 377,
	337, 576, 304, 472, 400, 130, 536, 0, 0, 0,
	0, 0, 0, 0, 0, 541, 542, 539, 222, 0,
	599, 600, 0, 0, 466, 467, 332, 339, 485, 341,
	303, 389, 334, 451, 348, 0, 478, 543, 479, 602,
	605, 603, 604, 381, 344, 345, 414, 349, 359, 403,
	450, 387, 408, 301, 441, 415, 363, 529, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	270, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 584, 583, 582, 581, 580,
	579, 578, 577, 0, 0, 526, 428, 313, 275, 309,
	310, 317, 229, 294, 432, 230, 0, 283, 506, 357,
	159, 399, 331, 571, 572, 58, 0, 231, 232, 233,
	234, 235, 236, 237, 238, 276, 239, 240, 241, 242,
	243, 244, 245, 248, 249, 250, 251, 252, 253, 254,
	255, 574, 246, 247, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 269, 0, 0,
	0, 277, 278, 279, 280, 0, 0, 271, 272, 273,
	274, 0, 0, 0, 457, 458, 459, 481, 0, 443,
	505, 226, 45, 212, 215, 217, 216, 0, 59, 555,
	567, 601, 5, 611, 612, 614, 616, 615, 618, 420,
	196, 619, 135, 227, 496, 497, 228, 607, 0, 0,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 132, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	192, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 2349, 2352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	2353, 449, 0, 0, 0, 2348, 0, 2347, 421, 2345,
	2350, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 2351, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 159, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1290, 0, 0, 218, 0, 0, 758, 768, 0, 0,
	299, 219, 493, 613, 495, 494, 759, 0, 760, 764,
	767, 763, 761, 762, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 765, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 766, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	196, 61, 187, 158, 0, 0, 0, 0, 0, 0,
	386, 656, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 663, 0, 0, 0, 0, 0,
	662, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 660, 661, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 657, 659, 304, 472, 400, 671, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 159, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	2506, 2509, 2510, 2511, 2512, 2513, 2514, 0, 2519, 2515,
	2516, 2517, 2518, 0, 2501, 2502, 2503, 2504, 1082, 2485,
	2507, 0, 2486, 382, 2487, 2488, 2489, 2490, 1086, 2491,
	2492, 2493, 2494, 2495, 2498, 2499, 2496, 2497, 2505, 394,
	360, 395, 343, 372, 371, 373, 1110, 1112, 1114, 1116,
	1119, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 2500, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	2508, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 2349, 2352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	2353, 449, 0, 0, 0, 2348, 0, 2347, 421, 2345,
	2350, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 2351, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 2370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	2369, 449, 0, 0, 0, 2375, 2372, 2374, 421, 0,
	2373, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 2367, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 2370, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	2369, 449, 0, 0, 0, 2375, 2372, 2374, 421, 0,
	2373, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 0, 619, 0, 630, 496, 497, 631, 607,
	386, 0, 511, 544, 533, 617, 499, 0, 0, 0,
	0, 0, 2070, 0, 0, 0, 0, 326, 0, 0,
	356, 548, 530, 540, 531, 516, 517, 518, 525, 336,
	519, 520, 521, 491, 522, 492, 523, 524, 0, 547,
	498, 416, 370, 565, 564, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 2071, 0, 0, 0,
	299, 219, 493, 613, 495, 494, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 1220, 1221,
	1222, 1219, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 289, 422, 439,
	300, 412, 452, 305, 419, 295, 385, 409, 0, 0,
	291, 437, 418, 367, 346, 347, 290, 0, 404, 324,
	338, 321, 383, 0, 436, 464, 320, 455, 0, 447,
	293, 0, 446, 382, 433, 438, 368, 362, 0, 292,
	435, 366, 361, 350, 328, 480, 351, 352, 342, 394,
	360, 395, 343, 372, 371, 373, 0, 0, 0, 0,
	0, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 606, 0, 0, 610,
	0, 449, 0, 0, 0, 0, 0, 0, 421, 0,
	0, 353, 0, 0, 0, 465, 0, 407, 388, 633,
	0, 0, 405, 358, 434, 396, 440, 423, 448, 401,
	397, 284, 424, 323, 369, 296, 298, 318, 325, 327,
	329, 330, 378, 379, 391, 411, 425, 426, 427, 322,
	306, 406, 307, 340, 308, 285, 314, 312, 315, 413,
	316, 287, 392, 431, 0, 335, 402, 365, 288, 364,
	393, 430, 429, 297, 456, 462, 463, 552, 0, 468,
	634, 635, 636, 477, 0, 398, 482, 483, 484, 486,
	487, 488, 489, 553, 570, 537, 507, 470, 561, 504,
	508, 509, 573, 0, 0, 0, 461, 354, 355, 0,
	333, 281, 282, 629, 319, 384, 575, 608, 609, 500,
	0, 562, 501, 510, 311, 534, 546, 545, 380, 460,
	0, 557, 560, 490, 628, 0, 554, 569, 632, 568,
	625, 390, 0, 410, 566, 513, 0, 558, 532, 0,
	559, 528, 563, 0, 502, 0, 417, 442, 454, 471,
	474, 503, 588, 589, 590, 286, 473, 592, 593, 594,
	595, 596, 597, 598, 591, 445, 535, 512, 538, 453,
	515, 514, 0, 0, 549, 469, 550, 551, 374, 375,
	376, 377, 337, 576, 304, 472, 400, 0, 536, 0,
	0, 0, 0, 0, 0, 0, 0, 541, 542, 539,
	637, 0, 599, 600, 0, 0, 466, 467, 332, 339,
	485, 341, 303, 389, 334, 451, 348, 0, 478, 543,
	479, 602, 605, 603, 604, 381, 344, 345, 414, 349,
	359, 403, 450, 387, 408, 301, 441, 415, 363, 529,
	556, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 270, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 584, 583, 582,
	581, 580, 579, 578, 577, 0, 0, 526, 428, 313,
	275, 309, 310, 317, 626, 623, 432, 627, 0, 283,
	506, 357, 0, 399, 331, 571, 572, 0, 0, 231,
	232, 233, 234, 235, 236, 237, 238, 276, 239, 240,
	241, 242, 243, 244, 245, 248, 249, 250, 251, 252,
	253, 254, 255, 574, 246, 247, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 269,
	0, 0, 0, 277, 278, 279, 280, 0, 0, 271,
	272, 273, 274, 0, 0, 0, 457, 458, 459, 481,
	0, 443, 505, 624, 0, 0, 0, 0, 0, 0,
	0, 555, 567, 601, 0, 611, 612, 614, 616, 615,
	618, 420, 196, 619, 0, 630, 496, 497, 631, 607,
	0, 0, 386, 0, 511, 544, 533, 617, 499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 356, 548, 530, 540, 531, 516, 517, 518,
	525, 336, 519, 520, 521, 491, 522, 492, 523, 524,
	132, 547, 498, 416, 370, 565, 564, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 192, 2120, 0, 218, 0, 0, 0, 0,
	0, 0, 299, 219, 493, 613, 495, 494, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 302, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 289,
	422, 439, 300, 412, 452, 305, 419, 295, 385, 409,
	0, 0, 291, 437, 418, 367, 346, 347, 290, 0,
	404, 324, 338, 321, 383, 0, 436, 464, 320, 455,
	0, 447, 293, 0, 446, 382, 433, 438, 368, 362,
	0, 292, 435, 366, 361, 350, 328, 480, 351, 352,
	342, 394, 360, 395, 343, 372, 371, 373, 0, 0,
	0, 0, 0, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 606, 0,
	0, 610, 0, 449, 0, 0, 0, 0, 0, 0,
	421, 0, 0, 353, 0, 0, 0, 465, 0, 407,
	388, 633, 0, 0, 405, 358, 434, 396, 440, 423,
	448, 401, 397, 284, 424, 323, 369, 296, 298, 318,
	325, 327, 329, 330, 378, 379, 391, 411, 425, 426,
	427, 322, 306, 406, 307, 340, 308, 285, 314, 312,
	315, 413, 316, 287, 392, 431, 0, 335, 402, 365,
	288, 364, 393, 430, 429, 297, 456, 462, 463, 552,
	0, 468, 634, 635, 636, 477, 0, 398, 482, 483,
	484, 486, 487, 488, 489, 553, 570, 537, 507, 470,
	561, 504, 508, 509, 573, 0, 0, 0, 461, 354,
	355, 0, 333, 281, 282, 629, 319, 384, 575, 608,
	609, 500, 0, 562, 501, 510, 311, 534, 546, 545,
	380, 460, 0, 557, 560, 490, 628, 0, 554, 569,
	632, 568, 625, 390, 0, 410, 566, 513, 0, 558,
	532, 0, 559, 528, 563, 0, 502, 0, 417, 442,
	454, 471, 474, 503, 588, 589, 590, 286, 473, 592,
	593, 594, 595, 596, 597, 598, 591, 445, 535, 512,
	538, 453, 515, 514, 0, 0, 549, 469, 550, 551,
	374, 375, 376, 377, 337, 576, 304, 472, 400, 0,
	536, 0, 0, 0, 0, 0, 0, 0, 0, 541,
	542, 539, 637, 0, 599, 600, 0, 0, 466, 467,
	332, 339, 485, 341, 303, 389, 334, 451, 348, 0,
	478, 543, 479, 602, 605, 603, 604, 381, 344, 345,
	414, 349, 359, 403, 450, 387, 408, 301, 441, 415,
	363, 529, 556, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	583, 582, 581, 580, 579, 578, 577, 0, 0, 526,
	428, 313, 275, 309, 310, 317, 626, 623, 432, 627,
	0, 283, 506, 357, 159, 399, 331, 571, 572, 0,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 276,
	239, 240, 241, 242, 243, 244, 245, 248, 249, 250,
	251, 252, 253, 254, 255, 574, 246, 247, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 269, 0, 0, 0, 277, 278, 279, 280, 0,
	0, 271, 272, 273, 274, 0, 0, 0, 457, 458,
	459, 481, 0, 443, 505, 624, 0, 0, 0, 0,
	0, 0, 0, 555, 567, 601, 0, 611, 612, 614,
	616, 615, 618, 420, 196, 619, 0, 630, 496, 497,
	631, 607, 0, 0, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 0, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 132, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 192, 2106, 0, 218, 0, 0,
	0, 0, 0, 0, 299, 219, 493, 613, 495, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 302,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 422, 439, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 0, 436, 464,
	320, 455, 0, 447, 293, 0, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 480,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 401, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 598, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 469,
	550, 551, 374, 375, 376, 377, 337, 576, 304, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 381,
	344, 345, 414, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 363, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 159, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 0, 619, 0, 630,
	496, 497, 631, 607, 386, 0, 511, 544, 533, 617,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 326, 1014, 0, 356, 548, 530, 540, 531, 516,
	517, 518, 525, 336, 519, 520, 521, 491, 522, 492,
	523, 524, 0, 547, 498, 416, 370, 565, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 218, 1021, 1022,
	0, 0, 0, 0, 299, 219, 493, 613, 495, 494,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 289, 422, 1008, 300, 412, 452, 305, 419, 295,
	385, 409, 0, 0, 291, 437, 418, 367, 346, 347,
	290, 0, 404, 324, 338, 321, 383, 0, 436, 464,
	320, 455, 996, 447, 293, 995, 446, 382, 433, 438,
	368, 362, 0, 292, 435, 366, 361, 350, 328, 480,
	351, 352, 342, 394, 360, 395, 343, 372, 371, 373,
	0, 0, 0, 0, 0, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 610, 0, 449, 0, 0, 0, 0,
	0, 0, 421, 0, 0, 353, 0, 0, 0, 465,
	0, 407, 388, 633, 0, 0, 405, 358, 434, 396,
	440, 423, 448, 1012, 397, 284, 424, 323, 369, 296,
	298, 318, 325, 327, 329, 330, 378, 379, 391, 411,
	425, 426, 427, 322, 306, 406, 307, 340, 308, 285,
	314, 312, 315, 413, 316, 287, 392, 431, 0, 335,
	402, 365, 288, 364, 393, 430, 429, 297, 456, 462,
	463, 552, 0, 468, 634, 635, 636, 477, 0, 398,
	482, 483, 484, 486, 487, 488, 489, 553, 570, 537,
	507, 470, 561, 504, 508, 509, 573, 0, 0, 0,
	461, 354, 355, 0, 333, 281, 282, 629, 319, 384,
	575, 608, 609, 500, 0, 562, 501, 510, 311, 534,
	546, 545, 380, 460, 0, 557, 560, 490, 628, 0,
	554, 569, 632, 568, 625, 390, 0, 410, 566, 513,
	0, 558, 532, 0, 559, 528, 563, 0, 502, 0,
	417, 442, 454, 471, 474, 503, 588, 589, 590, 286,
	473, 592, 593, 594, 595, 596, 597, 1013, 591, 445,
	535, 512, 538, 453, 515, 514, 0, 0, 549, 1016,
	550, 551, 374, 375, 376, 377, 337, 576, 1011, 472,
	400, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 541, 542, 539, 637, 0, 599, 600, 0, 0,
	466, 467, 332, 339, 485, 341, 303, 389, 334, 451,
	348, 0, 478, 543, 479, 602, 605, 603, 604, 1023,
	1009, 1019, 1010, 349, 359, 403, 450, 387, 408, 301,
	441, 415, 1020, 529, 556, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 584, 583, 582, 581, 580, 579, 578, 577, 0,
	0, 526, 428, 313, 275, 309, 310, 317, 626, 623,
	432, 627, 0, 283, 506, 357, 0, 399, 331, 571,
	572, 0, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 276, 239, 240, 241, 242, 243, 244, 245, 248,
	249, 250, 251, 252, 253, 254, 255, 574, 246, 247,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 269, 0, 0, 0, 277, 278, 279,
	280, 0, 0, 271, 272, 273, 274, 0, 0, 0,
	457, 458, 459, 481, 0, 443, 505, 624, 0, 0,
	0, 0, 0, 0, 0, 555, 567, 601, 0, 611,
	612, 614, 616, 615, 618, 420, 196, 619, 0, 630,
	496, 497, 631, 607, 0, 0, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 132, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2003, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 159, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	1021, 1022, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1025, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 996, 447, 293, 995, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 1023, 2023, 1019, 2024, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 1020, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 2883, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 2886, 0, 0,
	0, 2885, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 1505, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 1499, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3916, 0, 218,
	825, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	2414, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 946, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1713, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 2448, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2450, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 2070, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2071, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 3088, 3090, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 2470, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 643,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	825, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3895, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 3674, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 3804, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3516, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3689, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 3605, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 3122, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3140, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2003, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 3327, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2984, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2450, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 2805, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2567, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2528, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 2526, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	2305, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 1859, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 1987, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 1503, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 1892, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	1532, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 644, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 654, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 946, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 1482, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 1480, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 401, 397, 284, 424, 323,
	369, 296, 298, 722, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 598,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 0, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 386, 0, 511, 544,
	533, 617, 499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 356, 548, 530, 540,
	531, 516, 517, 518, 525, 336, 519, 520, 521, 491,
	522, 492, 523, 524, 0, 547, 498, 416, 370, 565,
	564, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 218,
	0, 0, 0, 0, 0, 0, 299, 219, 493, 613,
	495, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 302, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 289, 422, 439, 300, 412, 452, 305,
	419, 295, 385, 409, 0, 0, 291, 437, 418, 367,
	346, 347, 290, 0, 404, 324, 338, 321, 383, 0,
	436, 464, 320, 455, 0, 447, 293, 0, 446, 382,
	433, 438, 368, 362, 0, 292, 435, 366, 361, 350,
	328, 480, 351, 352, 342, 394, 360, 395, 343, 372,
	371, 373, 0, 0, 0, 0, 0, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 606, 0, 0, 610, 0, 449, 0, 0,
	0, 0, 0, 0, 421, 0, 0, 353, 0, 0,
	0, 465, 0, 407, 388, 633, 0, 0, 405, 358,
	434, 396, 440, 423, 448, 679, 397, 284, 424, 323,
	369, 296, 298, 318, 325, 327, 329, 330, 378, 379,
	391, 411, 425, 426, 427, 322, 306, 406, 307, 340,
	308, 285, 314, 312, 315, 413, 316, 287, 392, 431,
	0, 335, 402, 365, 288, 364, 393, 430, 429, 297,
	456, 462, 463, 552, 0, 468, 634, 635, 636, 477,
	0, 398, 482, 483, 484, 486, 487, 488, 489, 553,
	570, 537, 507, 470, 561, 504, 508, 509, 573, 0,
	0, 0, 461, 354, 355, 0, 333, 281, 282, 629,
	319, 384, 575, 608, 609, 500, 0, 562, 501, 510,
	311, 534, 546, 545, 380, 460, 0, 557, 560, 490,
	628, 0, 554, 569, 632, 568, 625, 390, 0, 410,
	566, 513, 0, 558, 532, 0, 559, 528, 563, 0,
	502, 0, 417, 442, 454, 471, 474, 503, 588, 589,
	590, 286, 473, 592, 593, 594, 595, 596, 597, 680,
	591, 445, 535, 512, 538, 453, 515, 514, 0, 0,
	549, 469, 550, 551, 374, 375, 376, 377, 337, 576,
	304, 472, 400, 0, 536, 0, 0, 0, 0, 0,
	0, 0, 0, 541, 542, 539, 637, 0, 599, 600,
	0, 0, 466, 467, 332, 339, 485, 341, 303, 389,
	334, 451, 348, 0, 478, 543, 479, 602, 605, 603,
	604, 381, 344, 345, 414, 349, 359, 403, 450, 387,
	408, 301, 441, 415, 363, 529, 556, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 270, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 583, 582, 581, 580, 579, 578,
	577, 0, 0, 526, 428, 313, 275, 309, 310, 317,
	626, 623, 432, 627, 0, 283, 506, 357, 0, 399,
	331, 571, 572, 0, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 276, 239, 240, 241, 242, 243, 244,
	245, 248, 249, 250, 251, 252, 253, 254, 255, 574,
	246, 247, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 269, 0, 0, 0, 277,
	278, 279, 280, 0, 0, 271, 272, 273, 274, 0,
	0, 0, 457, 458, 459, 481, 0, 443, 505, 624,
	0, 0, 0, 0, 0, 0, 1084, 555, 567, 601,
	0, 611, 612, 614, 616, 615, 618, 420, 0, 619,
	0, 630, 496, 497, 631, 607, 1107, 1111, 1113, 1115,
	1117, 1118, 1120, 0, 1125, 1121, 1122, 1123, 1124, 0,
	1102, 1103, 1104, 1105, 1082, 1083, 1108, 0, 1085, 0,
	1087, 1088, 1089, 1090, 1086, 1091, 1092, 1093, 1094, 1095,
	1098, 1100, 1096, 1097, 1106, 701, 700, 707, 697, 0,
	0, 0, 1110, 1112, 1114, 1116, 1119, 704, 705, 1974,
	706, 710, 0, 0, 691, 0, 196, 0, 0, 0,
	701, 700, 707, 697, 715, 0, 0, 0, 0, 0,
	0, 0, 704, 705, 0, 706, 710, 0, 3525, 691,
	0, 1101, 0, 0, 1977, 0, 0, 0, 0, 715,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 0,
	0, 721, 0, 0, 0, 0, 720, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 192, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1951, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1977, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 692, 694, 693, 0, 0, 0,
	3695, 0, 0, 0, 0, 699, 0, 0, 0, 0,
	1951, 0, 1977, 0, 0, 0, 0, 703, 0, 692,
	694, 693, 0, 0, 718, 0, 1955, 0, 0, 0,
	699, 696, 0, 0, 0, 686, 0, 1961, 0, 0,
	0, 0, 703, 0, 0, 0, 0, 0, 0, 718,
	0, 0, 0, 0, 0, 0, 696, 1949, 1983, 0,
	0, 1950, 1952, 1954, 1951, 1956, 1957, 1958, 1962, 1963,
	1964, 1966, 1969, 1970, 1971, 0, 0, 0, 1967, 0,
	0, 0, 1959, 1968, 1960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 698, 702, 708, 0, 709, 711, 0,
	0, 712, 713, 714, 0, 0, 716, 717, 0, 0,
	1955, 0, 0, 1972, 0, 0, 0, 0, 698, 702,
	708, 1961, 709, 711, 0, 0, 712, 713, 714, 0,
	1948, 716, 717, 0, 0, 0, 0, 1947, 0, 0,
	0, 1949, 1983, 0, 0, 1950, 1952, 1954, 0, 1956,
	1957, 1958, 1962, 1963, 1964, 1966, 1969, 1970, 1971, 0,
	0, 1965, 0, 0, 1955, 0, 1959, 1968, 1960, 0,
	1953, 0, 0, 0, 0, 1961, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1949, 1983, 0, 0, 1950,
	1952, 1954, 1975, 1956, 1957, 1958, 1962, 1963, 1964, 1966,
	1969, 1970, 1971, 0, 0, 0, 0, 0, 0, 0,
	1959, 1968, 1960, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1972, 0, 0,
	0, 0, 0, 0, 0, 0, 1975, 0, 0, 0,
	0, 0, 695, 0, 1948, 0, 0, 0, 0, 0,
	0, 1947, 0, 0, 0, 0, 0, 0, 3529, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 0, 0,
	0, 0, 0, 0, 0, 1965, 0, 0, 0, 0,
	0, 1972, 0, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1948, 0,
	0, 0, 0, 0, 0, 1947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1965,
	0, 0, 0, 0, 0, 0, 0, 0, 1953, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3533,
}

var yyPact = [...]int{
	5110, -1000, -1000, -1000, -325, 14145, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47643, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 475, 47643,
	-318, 29663, 45783, -1000, -1000, 2841, -1000, 46403, 16017, 47643,
	549, 528, 47643, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 940, -1000, 50123,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 884, 50792,
	49503, 11644, -223, -1000, 1779, -37, 2532, 486, -201, -203,
	1094, 1101, 1275, 1275, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 327, 978, 47023,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 236, 939, 978, 20981, 124,
	118, 1779, 444, -75, 184, -1000, 1592, 5119, 194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11644, 11644, 14145, -355, 14145, 11644, 47643, 47643, -1000, -1000,
	-1000, -1000, -318, 46403, 884, 50792, 11644, 2532, 486, -201,
	-203, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -75, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 118, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	5680, -1000, 1612, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2307, 2984,
	1606, 2531, 841, 45783, 47643, -1000, 142, 841, -1000, -1000,
	-1000, 1779, 3503, -1000, 47643, 47643, 213, 1872, -1000, 540,
	456, 405, 429, 347, 1604, -1000, -1000, -1000, -1000, -1000,
	-1000, 756, 3388, -1000, 47643, 47643, 3004, 47643, -1000, 2311,
	791, -1000, 5299, 3209, 1405, 999, 3037, -1000, -1000, 2982,
	-1000, 357, 277, 353, 586, 471, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 338, -1000, 3284, -1000, -1000, 343, -1000,
	-1000, 325, -1000, -1000, -1000, 117, -1000, -1000, -1000, -1000,
	-1000, -1000, 5, -1000, -1000, 1121, 2142, 11644, 2445, -1000,
	4205, 1647, -1000, -1000, -1000, 7277, 13513, 13513, 13513, 13513,
	47643, -1000, -1000, 2849, 11644, 2981, 2978, 2977, 2976, -1000,
	-1000, -1000, -1000, -1000, -1000, 1603, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1987, -1000, -1000, -1000, 4478,
	-1000, 2975, 2973, 2972, 2971, 2968, 2967, 2964, 2954, 2952,
	2944, 2941, 2940, 2939, 2925, 2727, 15387, 2924, 2530, 2526,
	2923, 2916, 2914, 2525, 2912, 2911, 2908, 2727, 2727, 2906,
	2905, 2902, 2901, 2900, 2899, 2897, 2895, 2893, 2892, 2885,
	2884, 2883, 2881, 2880, 2879, 2877, 2876, 2874, 2873, 2869,
	2868, 2867, 2866, 2865, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1470, -1000, 2864,
	3406, 2779, -1000, 3262, 3257, 3253, 3251, -268, 2862, 2209,
	-1000, -1000, 108, 3386, 47643, -293, 47643, 426, -88, -89,
	-99, -1000, -77, -1000, -1000, 1077, -1000, 1058, -1000, 883,
	883, 883, 47643, 47643, 215, 1085, 883, 883, 883, 883,
	883, 922, 883, 3301, 936, 935, 932, 928, 883, -39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1871, 1868, 3096,
	1040, -1000, -1000, -1000, -1000, 1494, 47643, -1000, 2796, 426,
	1706, 1706, 3364, 3364, 3299, 803, 801, 777, 1706, 644,
	-1000, 1842, 1842, 1842, 1842, 1706, 508, 816, 3305, 3305,
	100, 1842, 78, 1706, 1706, 78, 1706, 1706, -1000, 1831,
	340, -274, -1000, -1000, -1000, -1000, 1842, 1842, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3278, 3274, 884, 884, 47643,
	884, 248, 47643, 884, 884, 884, 47643, 891, 33, 48883,
	48263, 2241, 2311, 786, 785, 1510, 1825, -1000, 1773, 47643,
	47643, 1773, 1773, 24083, 23463, -1000, 47643, -1000, 3406, 2779,
	2723, 1770, 2709, 2779, -100, 426, 884, 884, 884, 884,
	884, 318, 884, 884, 884, 884, 884, 47643, 47643, 45163,
	884, 884, 884, 884, 9769, 9769, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14145, 2116, 2067, 193, -15,
	-309, 283, -1000, -1000, 47643, 3169, 309, -1000, -1000, -1000,
	2739, -1000, 2785, 2785, 2785, 2785, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2785, 2785, 2790, 2861,
	-1000, -1000, 2775, 2775, 2775, 2739, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2786, 2786, 2788, 2788, 2786, 47643, -131, -1000, -1000,
	11644, 47643, 3199, 404, 2860, 841, -1000, -1000, 47643, 175,
	418, 3406, 3198, 3305, 3355, -1000, -1000, 1602, 2206, 2524,
	-1000, 347, -1000, 469, 347, -1000, 559, 559, 1718, -1000,
	1134, -1000, -1000, -1000, -1000, -1000, -1000, 47643, 5, 430,
	-1000, -1000, 2476, 2855, -1000, 651, 1352, 1506, -1000, 344,
	50817, 38343, 2311, 38343, 47643, -1000, -1000, -1000, -1000, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 379, -1000, 11644, 11644,
	11644, 11644, 11644, -1000, 775, 12890, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13513, 13513, 13513, 13513, 13513, 13513, 13513,
	13513, 13513, 13513, 13513, 13513, 2848, 1841, 13513, 13513, 13513,
	13513, 26563, 1770, 3346, 1505, 299, 1647, 1647, 1647, 1647,
	11644, -1000, 1898, 2142, 11644, 11644, 11644, 11644, 47643, -1000,
	-1000, 3908, 11644, 11644, 4091, 11644, 3247, 11644, 11644, 11644,
	2704, 6022, 47643, 11644, -1000, 2702, 2700, -1000, -1000, 2038,
	11644, -1000, -1000, 11644, -1000, -1000, 11644, 13513, 11644, -1000,
	11644, 11644, 11644, -1000, -1000, 2601, 3247, 3247, 3247, 1812,
	11644, 11644, 3247, 3247, 3247, 1775, 3247, 3247, 3247, 3247,
	3247, 3247, 3247, 3247, 3247, 3247, 2697, 2696, 2695, 11021,
	3305, -223, -1000, 9146, 3198, 3305, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -270, 2853, 47643, 2518,
	2517, -333, 172, 447, 47643, 1162, -1000, -1000, 47643, 2201,
	47643, 2200, 49, 1089, 1048, 1066, -1000, 47643, 1905, 47643,
	47643, 3235, -1000, 2852, 47643, 883, 883, 883, -1000, 43303,
	38343, 47643, 47643, 2311, 47643, 47643, 47643, 883, 883, 883,
	883, 47643, -1000, 3208, 38343, 3159, 891, -1000, 47643, 1494,
	3233, 47643, -1000, 3364, 13513, 13513, -1000, -1000, 11644, -1000,
	44543, 1842, 1706, 1706, -1000, -1000, 47643, -1000, -1000, -1000,
	1842, 47643, 1842, 1842, 3364, 1842, -1000, -1000, -1000, 1706,
	1706, -1000, -1000, 11644, -1000, -1000, 1842, 1842, -1000, -1000,
	3364, 47643, 99, 3364, 3364, 72, -1000, -1000, -1000, 1706,
	47643, 47643, 883, 47643, -1000, 47643, 47643, -1000, -1000, 47643,
	47643, 3933, 47643, 43303, 43923, 3272, -1000, 38343, 47643, 47643,
	1491, -1000, 915, 35863, -1000, 1390, -1000, 37, -1000, 14,
	33, 1773, 33, 1773, 913, -1000, 642, 768, 22223, 584,
	38343, 6645, -1000, -1000, 1773, 1773, 6645, 6645, 1648, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1489, -1000, 328, 3305,
	-1000, -1000, -1000, -1000, -1000, 2198, -1000, 47643, 43303, 38343,
	2311, 47643, 884, 47643, 47643, 47643, 47643, 47643, -1000, 2851,
	1581, -1000, 3207, 47643, 47643, 47643, 47643, 1496, -1000, -1000,
	19117, 1569, 1496, -1000, 1914, -1000, 11644, 14145, -253, 11644,
	14145, 14145, 11644, 14145, -1000, 11644, 287, -1000, -1000, -1000,
	-1000, 2197, -1000, 2196, -1000, -1000, -1000, -1000, -1000, 2510,
	2510, -1000, 2194, -1000, -1000, -1000, -1000, 2191, -1000, -1000,
	2188, -1000, -1000, -1000, -1000, -158, 2688, 1121, -1000, 2496,
	3035, -226, -1000, 20361, 47643, 47643, 404, -340, 1862, 1860,
	1858, -1000, -226, -1000, 19739, 47643, 3305, -1000, -233, 3198,
	11644, 47643, -1000, 3298, -1000, -1000, 347, -1000, -1000, -1000,
	559, 431, -1000, -1000, -1000, -1000, -1000, -1000, 1561, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 453,
	-76, -81, 1471, -1000, 47643, -1000, -1000, 344, 38343, 40203,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 247, -1000, -1000,
	186, -1000, 910, 268, 1717, -1000, -1000, 228, 208, 216,
	963, 2142, -1000, 1927, 1927, 1929, -1000, 780, -1000, -1000,
	-1000, -1000, 2849, -1000, -1000, -1000, 2871, 3628, -1000, 1740,
	1740, 1657, 1657, 1657, 1657, 1657, 2295, 2295, -1000, -1000,
	-1000, 7277, 2848, 13513, 13513, 13513, 13513, 968, 968, 3708,
	4159, -1000, -1000, -1000, -1000, 11644, 170, 1902, -1000, 11644,
	2593, 1610, 2477, 1392, 1559, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2685, 2684, 2713, 3384, 2683,
	11644, -1000, -1000, 1712, 1711, 1710, -1000, 2297, 10398, -1000,
	-1000, -1000, 2681, 1554, 2678, -1000, -1000, -1000, 2676, 1709,
	1272, 2671, 2957, 2669, 2665, 2663, 2651, 1452, 11644, 11644,
	11644, 11644, 2649, 1708, 1691, 11644, 11644, 11644, 11644, 2648,
	11644, 11644, 11644, 11644, 11644, 11644, 11644, 11644, 11644, 11644,
	138, 138, 138, 1430, 1412, -1000, -1000, 1690, -1000, 2142,
	-1000, -1000, 3198, -1000, 2847, 2187, 1407, -1000, -1000, -315,
	2433, 47643, 47643, 171, 47643, 2494, -294, 47643, -1000, -1000,
	2492, -1000, -1000, -1000, 1084, 1053, 1051, 2491, 3206, 3296,
	924, 47643, 1291, 2846, 47643, 47643, 47643, 298, -1000, -1000,
	1302, -1000, 268, -9, 555, 1207, 3003, 3383, -132, 47643,
	47643, 47643, 47643, 3230, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42683, -1000, 2844, 1689, -1000, -1000, 1647, 1647,
	2142, 2998, 47643, 47643, 3364, 3364, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1842, 3364, 3364, 1325, 1706, 1842, -1000,
	-1000, 1842, -340, -1000, 1842, -1000, -340, 1538, -340, 47643,
	-1000, -1000, -1000, 3224, 2796, 1402, -1000, -1000, -1000, 3345,
	2293, 872, 872, 1083, 626, 3344, 17877, -1000, 1736, 1160,
	909, 3127, 349, -1000, 1736, -151, 851, 1736, 1736, 1736,
	1736, 1736, 1736, 1736, 745, 742, 1736, 1736, 1736, 1736,
	1736, 1736, 1736, 1736, 1736, 1736, 1736, 1100, 1736, 1736,
	1736, 1736, 1736, -1000, 1736, 2843, 541, -1000, -1000, -1000,
	-1000, -1000, -1000, 769, 685, 292, 3271, 407, -1000, 422,
	1302, 3267, 450, 47643, 47643, 2970, 1321, -1000, -1000, -1000,
	-1000, 27183, 27183, 21603, 27183, -1000, 206, 33, 42, -1000,
	-1000, 1390, 6645, 1390, 6645, 2184, -1000, -1000, 902, -1000,
	-1000, 1207, -1000, 47643, 47643, -1000, -1000, 2835, 1857, -1000,
	-1000, 15387, -1000, 6645, 6645, -1000, -1000, 29043, 47643, -1000,
	0, -1000, 19, 3198, -1000, 1173, -1000, -1000, 1389, 1207,
	3033, 47643, 1173, 1173, 1173, -1000, -1000, 16637, 47643, 47643,
	-1000, -1000, -1000, -1000, 3364, 9769, -1000, 35863, -1000, -1000,
	42063, -1000, 41443, 3364, 1886, -1000, 14145, 2053, 191, -1000,
	275, -314, 188, 1933, 185, 2142, -1000, -1000, 2647, 2641,
	1685, -1000, 1677, 2639, 1673, 1671, 2182, -1000, 58, -1000,
	3173, 1215, -1000, 2834, -1000, 1667, 3091, -1000, 1381, -1000,
	1854, 1664, -1000, -1000, -1000, 11644, 40823, 11644, 1215, 1646,
	3087, 1381, 3198, 2490, -1000, 1376, -1000, 2159, 1536, 202,
	-1000, -1000, -1000, 47643, 884, 2476, 1634, 40203, 1309, -1000,
	900, 1524, 1523, -1000, 38343, 341, 38343, -1000, 38343, -1000,
	-1000, 389, -1000, 47643, 3190, -1000, -1000, -1000, 2433, 1848,
	-339, 47643, -1000, -1000, -1000, -1000, -1000, 1625, -1000, 968,
	968, 3708, 3525, -1000, 13513, -1000, 13513, 3276, -1000, 1885,
	-1000, 11644, 2013, 5588, 11644, 5588, 1009, 25323, 47643, -1000,
	-1000, 11644, 11644, -1000, 3261, -1000, -1000, -1000, -1000, 11644,
	11644, 2271, -1000, 47643, -1000, -1000, -1000, -1000, 25323, -1000,
	13513, -1000, -1000, -1000, -1000, 11644, 1396, 1396, 3217, 1613,
	138, 138, 138, 3204, 3119, 3110, 1607, 138, 3093, 3085,
	3067, 3054, 3032, 3028, 2969, 2920, 2828, 2809, -1000, 2818,
	-1000, -1000, 1979, 12267, 9146, -1000, -1000, 308, 1372, 2180,
	2470, 131, -1000, 1846, -1000, 2469, 47643, 47643, 1157, -1000,
	47643, 3382, -1000, -1000, -1000, -1000, 1046, 2466, -1000, 493,
	2021, 176, 320, 2638, 1358, -1000, -1000, 47643, -1000, -1000,
	-1000, 16637, 2796, 2813, 2796, 163, 1736, 616, 38343, 771,
	-1000, 47643, 2105, 1845, 3027, 740, 3150, 47643, 2811, 398,
	2806, 2802, 3223, 524, 50593, 47643, 1360, -1000, 1518, 5119,
	-1000, 47643, -1000, 2311, -1000, 1706, -1000, -1000, 3364, -1000,
	-1000, 11644, 11644, 3364, 1706, 1706, -1000, 1842, -1000, 47643,
	-1000, -340, 524, 50593, 3220, 5172, 755, 2602, -1000, 47643,
	-1000, -1000, -1000, 850, -1000, 1068, 883, 47643, 1952, 1068,
	1947, 2799, -1000, -1000, 47643, 47643, 47643, 47643, -1000, -1000,
	47643, -1000, 47643, 47643, 47643, 47643, 47643, 39583, -1000, 47643,
	47643, -1000, 47643, 1946, 47643, 1943, 3226, -1000, 1736, 1736,
	1010, -1000, -1000, 611, -1000, 39583, 2178, 2169, 2167, 2164,
	2464, 2463, 2462, 1736, 1736, 2139, 2455, 38963, 2451, 1169,
	2138, 2135, 2133, 2111, 2450, 981, -1000, 2442, 2099, 2094,
	2077, 47643, 2798, 2383, 535, -1000, -1000, 2021, 163, 1736,
	402, 47643, 1840, 1836, 616, 551, -20, 22843, -1000, -1000,
	-1000, 47643, 35863, 35863, 35863, 35863, -1000, 3063, 3062, 3052,
	-1000, 3081, 3061, 3103, 47643, 35863, 2796, -1000, 38963, -1000,
	-1000, -1000, 1770, 1587, 3405, 1074, 11644, -1000, -1000, 22,
	9, -1000, -1000, -1000, -1000, 38343, 2438, 584, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3290, 47643, 47643, 861, 2637,
	1345, -1000, -1000, -1000, 50593, 2785, 2785, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2785, 2785, 2790, -1000,
	-1000, 2775, 2775, 2775, 2739, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2786, 2786, 2788, 2788, 2786,
	-1000, -1000, 3362, -1000, 1344, -1000, -1000, 1484, -1000, 3362,
	1908, -326, 14145, 1890, 1883, -1000, 11644, 14145, 11644, -257,
	365, -259, -1000, -1000, -1000, 2437, -1000, -1000, -1000, 2117,
	-1000, 2112, -1000, 192, 203, 1941, -226, 9146, 441, 47643,
	-226, 47643, 9146, -1000, 47643, 158, -349, -350, 154, 428,
	-226, 3290, 58, 11644, 3114, -1000, -1000, 47643, 2109, -1000,
	-1000, -1000, 3381, 38343, 2311, 1678, 37723, -1000, 342, -1000,
	246, 613, 2435, -1000, 926, 128, 2434, 2433, -1000, -1000,
	-1000, -1000, 13513, 1647, -1000, -1000, -1000, 2142, 11644, 2636,
	-1000, 1033, 1033, 2281, 2632, 2629, -1000, 2785, 2785, -1000,
	2739, 2775, 2739, 1033, 1033, 2624, -1000, 2238, 2664, -1000,
	2615, 2556, 11644, -1000, 2617, 3939, 1490, -42, -186, 138,
	138, -1000, -1000, -1000, -1000, 138, 138, 138, 138, -1000,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	842, -103, -281, -106, -284, -1000, 2616, 1340, -1000, -1000,
	-1000, -1000, -1000, 4091, 1338, 572, 572, 2433, 2430, -1000,
	897, 2429, 1082, 47643, 2427, -297, -1000, 2426, -1000, -1000,
	47643, 2420, -1000, 684, 47643, 47643, 2418, 2417, 1291, 50593,
	2610, 3218, 17257, 3213, 2220, -1000, -1000, -1000, 28423, 601,
	-1000, -1000, -1000, 719, 473, 2107, 590, -1000, 47643, 603,
	3104, 1835, 2416, 47643, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3150, -1000, 1067, 452, 34623, 14767, -1000, 410, 47643,
	-1000, 17257, 17257, 410, 511, 1819, -1000, 841, 1298, 137,
	35863, 47643, -1000, 35243, 2605, -1000, 1207, 3364, -1000, 2142,
	2142, -340, 3364, 3364, 1706, -1000, -1000, 511, -1000, 410,
	-1000, 1483, 18497, 602, 523, 488, -1000, 713, -1000, -1000,
	836, 3139, 50593, -1000, 47643, -1000, 47643, -1000, 47643, 47643,
	883, 11644, 3139, 47643, 893, -1000, 1170, 522, 442, 845,
	845, 1320, -1000, 3197, -1000, -1000, 1318, -1000, -1000, -1000,
	-1000, 47643, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25323,
	25323, 3266, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2414, 2412, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47643, 1586, -1000, 1834,
	2106, 2411, 2220, 28423, 1824, 1773, 2410, 2408, 601, 2105,
	1811, 925, 47643, -1000, 1189, 47643, 47643, -1000, 1270, -1000,
	1810, 2988, 3012, 2988, -1000, -1000, -1000, -1000, -1000, 3050,
	-1000, 2886, -1000, -1000, 1270, -1000, -1000, -1000, -1000, -1000,
	1074, -1000, 3269, 1068, 1068, 1068, 2603, -1000, -1000, -1000,
	1309, 2596, -1000, -1000, -1000, 3399, -1000, -1000, -1000, -1000,
	-1000, -1000, 16637, 3134, 3360, 3343, 37103, 3360, -1000, -326,
	1879, -1000, 1917, 181, 1878, 47643, -1000, -1000, -1000, 2590,
	2588, -236, 143, 3340, 3338, 1111, -1000, 2587, 1305, -226,
	-1000, -1000, 1215, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-226, -1000, 1215, -1000, 192, -1000, -1000, 3180, -1000, -1000,
	2311, -1000, 245, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	-1000, 47643, -1000, 1301, 123, -1000, 2142, -1000, -1000, -1000,
	-1000, -1000, 5588, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 11644, -1000, -1000, -1000, 2551, -1000,
	-1000, 11644, 2575, 2407, 2574, 2406, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3406, -1000, 3337, 1584, 2573, 2564, 1582, 2563,
	2562, -1000, 11644, 2559, 4091, 1017, 2403, 1017, -1000, -1000,
	440, 27803, 47643, 3374, -1000, 47643, 2402, -1000, -1000, 2021,
	667, 728, -1000, -1000, -1000, -1000, 944, 410, 2557, 1257,
	-1000, -1000, -1000, -1000, 410, -1000, 2400, 267, -1000, -1000,
	-1000, -1000, 2387, 2386, 2104, -1000, -1000, 2069, 1583, 285,
	-1000, -1000, -1000, -1000, -1000, -1000, 2216, 47643, 36483, 2218,
	1802, -342, -1000, 2770, -1000, 1736, 1736, 1736, 47643, 1577,
	-1000, 1736, 1736, 2554, -1000, -1000, 2550, 2549, -137, 853,
	1778, 1761, -1000, 2093, 27183, 35863, 35243, 1266, -1000, 1171,
	-1000, -1000, -1000, -1000, -1000, -1000, 3364, 853, -1000, 594,
	2085, 13513, 2769, 13513, 2767, 633, 2766, 1571, -1000, 47643,
	-1000, -1000, 47643, 3707, 2762, -1000, 2760, 2995, 571, 2758,
	2757, 47643, 2539, -1000, 3139, 47643, 797, 3121, -1000, -1000,
	-1000, 414, -1000, -1000, 694, -1000, 47643, -1000, 47643, -1000,
	1637, -1000, 25323, -1000, -1000, 1550, -1000, 2383, 2381, 4091,
	-1000, -1000, 267, 2379, 6645, -1000, -1000, -1000, 3104, 2374,
	2216, 47643, -1000, 47643, 1189, 1189, 3406, 47643, 9146, -1000,
	-1000, 11644, 2756, -1000, 11644, -1000, -1000, -1000, -1000, -1000,
	2755, 3171, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1827,
	-1000, 11644, 11644, -1000, -1000, 876, 14145, -260, 364, -1000,
	-1000, -1000, -238, 2373, -1000, -1000, 3336, 2372, 2239, 47643,
	-1000, -1000, 1215, 1215, -236, -1000, -1000, 1207, -1000, -1000,
	1145, 748, -1000, 2546, 2483, -1000, 2436, 138, -1000, 138,
	-1000, 233, 11644, -1000, 2370, -1000, -1000, -1000, 2368, -1000,
	-1000, 2341, -1000, 2545, -1000, 2367, -1000, -1000, 47643, -1000,
	-1000, 1080, 2359, -345, 2358, 2021, 2021, 47643, 50593, -139,
	-137, 17257, -139, -1000, -1000, 384, -1000, -1000, 412, -1000,
	-1000, 2049, 650, -1000, -1000, 2338, 631, -1000, 1189, -1000,
	1799, 1964, 2290, 32763, 25323, 26563, 2334, -1000, -1000, 34623,
	1827, 1827, 50813, 379, 51001, -1000, 2751, 1103, 1752, -1000,
	2083, -1000, 2076, -1000, 3364, 1266, 136, -1000, -1000, 1670,
	-1000, 1103, 2602, 3335, -1000, 3462, 47643, 2657, 47643, 2750,
	1790, 13513, -1000, 836, 3072, -1000, -1000, 3707, -1000, -1000,
	1959, 13513, -1000, -1000, 2331, 26563, 1029, 1787, 1776, 1047,
	2749, -1000, 699, 3394, -1000, -1000, -1000, 1003, 2747, -1000,
	1940, 1939, -1000, 47643, -1000, 32763, 32763, 752, 752, 32763,
	32763, 2745, 845, -1000, -1000, 13513, -1000, -1000, 1736, -1000,
	-1000, -1000, 1736, 1632, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2218, -1000, -1000, 1173, -1000, 3305, -1000, -1000, 2142,
	47643, 2142, 34003, -1000, 3330, 3327, -1000, 2142, 244, -1000,
	-326, 47643, 47643, -242, 2072, -1000, 2329, 179, -1000, -1000,
	1133, -238, -244, 72, 25323, 1771, -1000, -1000, -1000, -1000,
	-1000, 2540, -1000, 973, -1000, -1000, -1000, 1121, 2538, 2482,
	-1000, -1000, -1000, -1000, 47643, -1000, 2280, -1000, 2327, 2317,
	657, -115, -1000, -1000, 448, -1000, -1000, -1000, 610, 2230,
	-1000, -1000, 382, -1000, -1000, -1000, 2216, 2315, -1000, -1000,
	121, -1000, 1766, 1545, -1000, 2739, 11644, -1000, -1000, -1000,
	-1000, -1000, -1000, 835, -1000, 410, 3857, -1000, 1160, 25943,
	-1000, 1145, 835, 541, 31523, 724, 310, -1000, 2071, -1000,
	-1000, 3406, -1000, 687, -1000, 623, -1000, 1539, -1000, 1532,
	33383, 2054, 2102, -1000, 50947, 977, -1000, -1000, 3708, -1000,
	-1000, -1000, -1000, -1000, -1000, 2312, 2301, -1000, -1000, -1000,
	-1000, -1000, 2045, 2736, 47, 3250, 2300, -1000, -1000, 2735,
	1531, 1515, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1473, 1460, 32763, -1000, -1000, 3708, 2029, 25323, 1736,
	-1000, -1000, 1428, 1426, -1000, -1000, -1000, -1000, -1000, -310,
	-1000, -1000, -1000, 2734, -1000, -1000, 3323, -242, -247, 2298,
	157, 190, -1000, 2291, -1000, -1000, 624, -230, 141, 134,
	132, -1000, -1000, -1000, 11644, -1000, -1000, -1000, 120, -1000,
	1751, -1000, -1000, 2021, 47643, 688, -1000, -1000, -1000, -1000,
	249, -1000, -1000, -1000, -1000, -1000, -1000, 2290, 2288, -1000,
	32763, 3197, 2233, 578, 3322, -1000, 51001, -1000, 1736, -1000,
	578, 1408, -1000, 1736, 1736, -1000, 519, -1000, 1737, -1000,
	2020, -1000, 3305, -1000, 516, -1000, 587, -1000, -1000, -1000,
	1399, -1000, -1000, -1000, 50947, 597, -1000, 822, 2730, -1000,
	-1000, 2346, 11644, 2727, 1736, 2276, -111, 32763, 2994, 2992,
	2990, 2922, 1383, -1000, -1000, 25323, -1000, -1000, 32143, -1000,
	47643, 2239, -1000, -1000, 2287, -1000, 890, 183, 190, -1000,
	3320, 173, 3318, 3317, 1115, 1920, -1000, 166, 152, 145,
	-1000, -1000, -1000, -1000, -1000, 2280, 2273, 2270, 563, -1000,
	332, -1000, -1000, -1000, 355, -1000, -1000, 3197, -1000, 3316,
	755, -1000, 25323, -1000, -1000, 31523, 1827, 1827, -1000, -1000,
	2017, -1000, -1000, -1000, -1000, 2016, -1000, -1000, -1000, 1364,
	-1000, 47643, 1034, 8523, -1000, 2190, -1000, 47643, -1000, 3011,
	-1000, 255, 1359, 355, 752, 355, 752, 355, 752, 355,
	752, 329, -1000, -1000, -1000, 1290, -1000, -1000, -1000, 2725,
	2003, 143, 164, 3312, -1000, 2239, 3311, 2239, 2239, -1000,
	139, 624, -1000, -1000, -1000, -1000, -1000, -1000, 2248, -1000,
	-1000, -1000, -1000, 1736, 1736, 2246, 2245, 465, -1000, -1000,
	-1000, 30903, 602, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	597, 51001, -1000, 8523, 1278, -1000, 2142, -1000, 845, -1000,
	-1000, 3009, 3007, 3368, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 47643, 3246, 24703, 165, -1000, -1000,
	-1000, 2240, -1000, 2239, -1000, -1000, 1704, -1000, -277, 1982,
	1973, -1000, -1000, 47643, -1000, 47643, 594, -1000, 51001, 1274,
	-1000, 8523, -1000, -1000, 3393, -1000, 3369, 1091, 1091, 355,
	355, 355, 355, -1000, -1000, 47643, -1000, 1253, -1000, -1000,
	-1000, 1161, -1000, -1000, -1000, -1000, 2232, -1000, -1000, 2226,
	-1000, -1000, -1000, 1208, 2602, -1000, -1000, -1000, -1000, -1000,
	2026, 704, -1000, 1108, -1000, 1702, -1000, 30283, 47643, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 47643, 7900, -1000, 1158,
	-1000, -1000, 2142, 47643, -1000,
}

var yyPgo = [...]int{
	0, 180, 3425, 252, 178, 4089, 106, 250, 276, 258,
	249, 4076, 4075, 4074, 4073, 3188, 3183, 4072, 4057, 4056,
	4050, 4049, 4048, 4047, 4046, 4043, 4042, 4041, 4040, 4039,
	4038, 4037, 4036, 4035, 4034, 4032, 4031, 4030, 4028, 4027,
	4025, 4024, 4015, 4012, 4011, 4009, 4008, 248, 4003, 4002,
	4001, 3999, 3998, 3997, 3996, 3995, 3994, 3992, 3991, 3990,
	3989, 3988, 3987, 3986, 3983, 3981, 3980, 3978, 3977, 3976,
	3973, 3972, 3971, 3970, 3967, 3966, 3965, 3963, 3962, 235,
	3961, 3960, 243, 3956, 3161, 3954, 3953, 3947, 3946, 3945,
	3943, 3942, 3941, 336, 3938, 3937, 3936, 3935, 3934, 3932,
	3931, 3930, 3929, 3928, 3927, 3926, 330, 3924, 3923, 3922,
	3921, 214, 3920, 322, 3919, 176, 151, 3918, 3915, 3914,
	3913, 3912, 3911, 3907, 3905, 3904, 3903, 3902, 3901, 3900,
	238, 195, 79, 3899, 51, 3897, 3892, 221, 3891, 164,
	3890, 155, 3888, 3887, 3886, 3879, 3874, 3873, 3872, 3868,
	3867, 3866, 3865, 3864, 3860, 3858, 3844, 3841, 3838, 3835,
	3834, 3833, 3832, 3831, 3826, 55, 3824, 256, 3820, 82,
	3818, 184, 3815, 75, 3814, 72, 135, 257, 2859, 264,
	242, 193, 181, 104, 3813, 301, 3812, 169, 231, 165,
	31, 3810, 140, 3807, 259, 47, 45, 246, 158, 58,
	198, 130, 3805, 211, 100, 115, 3804, 3802, 145, 3801,
	236, 185, 3799, 113, 3795, 3786, 3785, 3784, 3783, 202,
	200, 3781, 3780, 132, 3779, 3765, 67, 133, 3761, 81,
	144, 173, 143, 3760, 286, 128, 94, 3758, 125, 108,
	3757, 83, 3756, 3755, 3754, 3753, 191, 3752, 3751, 146,
	78, 3750, 3749, 3747, 74, 3745, 85, 3744, 43, 3742,
	76, 3740, 3739, 3737, 3736, 3735, 3732, 3729, 3727, 3726,
	3720, 3718, 3717, 56, 3715, 3714, 7, 15, 14, 3713,
	26, 3712, 174, 3711, 3709, 172, 3707, 197, 3706, 3705,
	97, 95, 3703, 96, 170, 3702, 9, 28, 80, 3701,
	3700, 222, 437, 105, 156, 3697, 275, 3696, 3695, 3694,
	166, 3692, 2745, 3691, 3689, 3687, 3686, 3685, 3683, 137,
	3682, 1, 212, 42, 3681, 136, 148, 3680, 41, 32,
	3679, 48, 122, 219, 138, 101, 3678, 3677, 3675, 134,
	228, 109, 27, 0, 102, 226, 163, 3662, 3659, 3657,
	247, 3656, 237, 206, 234, 367, 262, 290, 3655, 3654,
	64, 3653, 168, 29, 54, 147, 65, 21, 294, 3652,
	416, 8, 183, 3651, 208, 3650, 287, 16, 220, 153,
	3649, 3647, 34, 261, 3646, 3644, 3643, 129, 3640, 3637,
	190, 77, 3636, 3634, 3631, 3630, 38, 3629, 37, 13,
	3628, 112, 3627, 241, 3625, 196, 150, 186, 182, 161,
	229, 227, 86, 90, 3624, 1823, 157, 111, 22, 3623,
	230, 3622, 260, 126, 3620, 116, 3618, 240, 263, 210,
	3617, 188, 10, 49, 39, 30, 50, 12, 251, 203,
	3616, 3615, 18, 53, 3614, 61, 3613, 19, 3612, 3597,
	40, 3593, 66, 5, 3592, 3591, 17, 20, 3590, 35,
	207, 175, 127, 98, 59, 3588, 3587, 52, 139, 3586,
	152, 159, 162, 3585, 84, 3581, 3579, 3578, 3576, 901,
	3574, 254, 3573, 3572, 3571, 3570, 3569, 3567, 3566, 3565,
	3563, 216, 3560, 117, 44, 3559, 3558, 3556, 3555, 91,
	154, 3554, 3552, 3550, 3549, 33, 142, 3545, 11, 3542,
	25, 23, 36, 3541, 103, 3540, 3, 187, 3539, 3538,
	4, 3537, 3534, 2, 3533, 3532, 124, 3526, 99, 24,
	171, 114, 3524, 3523, 89, 209, 149, 3517, 3516, 92,
	239, 205, 3515, 107, 232, 255, 3513, 204, 3507, 3505,
	3502, 3501, 3500, 3497, 1218, 3496, 3494, 245, 71, 93,
	3493, 223, 119, 3491, 3490, 88, 167, 123, 121, 57,
	87, 3488, 118, 201, 3487, 199, 3486, 253, 3484, 3478,
	110, 3472, 3470, 3468, 3467, 194, 3466, 3464, 192, 225,
	3461, 3454, 274, 3451, 3446, 3439, 3436, 3434, 3432, 3429,
	3427, 3422, 3418, 244, 610, 3416,
}

//line mysql_sql.y:12510
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 598, 601, 601, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 121,
	121, 334, 334, 335, 335, 123, 330, 330, 329, 329,
	124, 125, 126, 577, 577, 127, 128, 157, 576, 576,
	159, 159, 159, 159, 159, 450, 122, 122, 122, 122,
	122, 163, 163, 163, 163, 163, 120, 583, 583, 583,
	584, 584, 117, 146, 145, 148, 148, 147, 147, 144,
	144, 140, 143, 143, 142, 142, 141, 136, 138, 138,
	137, 139, 139, 118, 106, 119, 525, 525, 524, 524,
	523, 523, 475, 475, 476, 476, 321, 321, 321, 522,
	522, 522, 521, 521, 520, 520, 519, 519, 517, 517,
	518, 516, 515, 515, 515, 513, 513, 513, 509, 509,
	511, 510, 510, 512, 504, 504, 507, 507, 505, 505,
	505, 505, 508, 503, 503, 503, 502, 502, 105, 105,
	105, 417, 417, 104, 104, 431, 431, 431, 431, 431,
	429, 429, 429, 429, 429, 429, 428, 428, 427, 427,
	432, 432, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 94, 94, 94, 94, 94, 94, 99,
	99, 99, 100, 589, 589, 588, 588, 590, 590, 590,
	590, 591, 591, 97, 97, 97, 98, 426, 426, 426,
	95, 96, 96, 416, 416, 421, 421, 420, 420, 420,
	420, 420, 420, 420, 420, 420, 420, 420, 420, 420,
	425, 425, 425, 423, 423, 422, 422, 424, 424, 88,
	88, 88, 91, 90, 415, 415, 415, 415, 415, 415,
	415, 415, 415, 89, 89, 89, 89, 89, 89, 83,
	83, 83, 83, 83, 82, 82, 84, 84, 413, 413,
	412, 101, 101, 102, 586, 586, 585, 587, 587, 587,
	587, 103, 109, 109, 109, 109, 109, 109, 109, 109,
	108, 108, 111, 111, 110, 112, 93, 93, 93, 93,
	93, 93, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 550, 550,
	550, 550, 552, 552, 348, 349, 602, 351, 347, 347,
	347, 546, 546, 547, 548, 549, 549, 549, 107, 14,
	209, 209, 449, 449, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 13, 81, 86, 86, 87, 286,
	286, 287, 281, 281, 288, 288, 162, 289, 289, 289,
	294, 294, 295, 295, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 268, 268, 268, 263,
	263, 263, 263, 264, 264, 265, 265, 266, 266, 266,
	266, 267, 267, 340, 340, 290, 290, 290, 292, 292,
	291, 285, 283, 283, 283, 283, 283, 283, 283, 284,
	284, 284, 284, 293, 293, 79, 85, 85, 85, 85,
	564, 564, 80, 575, 575, 479, 479, 362, 362, 361,
	361, 361, 361, 361, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 361, 361, 485, 486, 358, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 54, 57, 58, 161, 53, 53, 53, 402,
	402, 52, 603, 603, 333, 333, 67, 66, 56, 68,
	69, 70, 71, 72, 73, 51, 65, 65, 65, 65,
	65, 65, 65, 65, 76, 498, 498, 605, 605, 605,
	74, 75, 478, 478, 478, 64, 63, 62, 61, 60,
	60, 50, 50, 49, 49, 55, 152, 59, 153, 153,
	355, 355, 355, 357, 357, 353, 604, 604, 445, 445,
	356, 356, 48, 48, 48, 48, 77, 354, 354, 332,
	352, 352, 352, 12, 12, 10, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 26, 27, 29, 410, 410, 407, 28,
	20, 19, 19, 23, 22, 18, 18, 21, 24, 25,
	25, 9, 9, 9, 9, 15, 15, 16, 182, 182,
	235, 235, 558, 558, 554, 554, 555, 555, 555, 556,
	556, 557, 557, 113, 492, 492, 492, 492, 492, 492,
	8, 8, 204, 204, 491, 491, 491, 491, 491, 491,
	414, 414, 414, 535, 535, 535, 536, 203, 203, 198,
	198, 493, 493, 379, 537, 537, 501, 501, 500, 500,
	499, 499, 201, 201, 202, 202, 185, 185, 131, 131,
	506, 506, 506, 506, 514, 514, 474, 474, 273, 273,
	323, 323, 324, 324, 175, 175, 176, 176, 176, 176,
	176, 176, 592, 592, 593, 594, 595, 595, 596, 596,
	596, 597, 597, 597, 597, 597, 543, 543, 545, 545,
	544, 200, 200, 196, 196, 197, 197, 197, 195, 195,
	194, 193, 193, 192, 190, 190, 190, 191, 191, 191,
	208, 208, 178, 178, 178, 177, 177, 177, 177, 177,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 179, 179, 551, 551, 551, 480, 480, 480,
	488, 488, 303, 303, 304, 304, 484, 484, 302, 302,
	180, 180, 181, 181, 181, 181, 301, 301, 300, 183,
	183, 189, 188, 188, 184, 184, 184, 184, 311, 311,
	310, 310, 310, 310, 116, 129, 129, 130, 207, 207,
	309, 308, 308, 308, 308, 206, 206, 205, 205, 199,
	199, 187, 187, 187, 187, 307, 186, 305, 582, 582,
	581, 581, 580, 578, 578, 578, 579, 579, 579, 579,
	527, 527, 527, 527, 527, 341, 341, 341, 346, 346,
	344, 344, 344, 344, 344, 350, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 39, 218,
	219, 40, 220, 220, 221, 221, 222, 222, 223, 224,
	225, 225, 225, 225, 38, 210, 210, 211, 211, 212,
	212, 213, 214, 214, 214, 217, 215, 216, 216, 600,
	600, 599, 37, 37, 30, 166, 166, 167, 167, 167,
	169, 169, 269, 269, 269, 168, 168, 170, 170, 170,
	559, 561, 561, 563, 562, 562, 562, 565, 565, 565,
	565, 565, 566, 566, 566, 566, 567, 567, 31, 149,
	149, 173, 173, 154, 570, 570, 570, 569, 569, 571,
	571, 572, 572, 327, 327, 328, 328, 164, 165, 165,
	156, 151, 172, 172, 172, 172, 172, 174, 174, 237,
	237, 150, 155, 158, 160, 560, 568, 568, 568, 411,
	411, 408, 409, 409, 406, 405, 405, 405, 574, 574,
	573, 573, 573, 342, 342, 32, 401, 401, 403, 404,
	404, 404, 395, 395, 395, 395, 36, 399, 399, 400,
	400, 400, 400, 400, 400, 400, 396, 396, 398, 398,
	394, 394, 394, 394, 394, 394, 394, 35, 171, 171,
	393, 393, 390, 390, 388, 388, 389, 389, 387, 387,
	387, 391, 391, 43, 78, 44, 45, 46, 42, 392,
	392, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 133, 132, 132, 132, 132, 132, 135, 135, 326,
	326, 325, 325, 134, 270, 270, 41, 248, 248, 466,
	466, 461, 461, 461, 461, 461, 482, 482, 482, 462,
	462, 462, 463, 463, 463, 465, 465, 465, 464, 464,
	464, 464, 464, 481, 481, 483, 483, 483, 433, 433,
	434, 434, 434, 437, 437, 453, 453, 454, 454, 452,
	452, 459, 459, 458, 458, 457, 457, 456, 456, 455,
	455, 455, 455, 448, 448, 447, 447, 435, 435, 435,
	435, 435, 436, 436, 436, 446, 446, 451, 451, 299,
	299, 298, 298, 256, 256, 257, 257, 297, 297, 254,
	254, 255, 255, 255, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	533, 533, 534, 259, 259, 271, 271, 271, 271, 271,
	271, 258, 258, 260, 260, 236, 236, 234, 234, 226,
	226, 226, 226, 226, 227, 227, 228, 228, 229, 229,
	229, 233, 233, 232, 232, 232, 232, 230, 230, 231,
	231, 231, 231, 231, 231, 419, 419, 530, 530, 531,
	531, 526, 526, 526, 529, 529, 529, 529, 529, 529,
	529, 532, 532, 532, 528, 528, 238, 320, 320, 320,
	343, 343, 343, 343, 345, 319, 319, 319, 253, 253,
	252, 252, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 418, 418, 359, 359, 360, 360,
	280, 279, 279, 279, 279, 279, 277, 278, 276, 276,
	276, 276, 276, 275, 275, 274, 274, 274, 397, 397,
	272, 272, 262, 262, 262, 261, 261, 261, 460, 366,
	366, 366, 366, 366, 366, 366, 366, 366, 366, 366,
	366, 366, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 317, 317,
	317, 318, 318, 318, 318, 318, 318, 318, 318, 369,
	369, 375, 375, 542, 542, 541, 239, 239, 239, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 249, 249,
	249, 442, 442, 442, 442, 443, 443, 443, 443, 444,
	444, 444, 440, 440, 441, 441, 380, 381, 381, 489,
	489, 490, 490, 438, 438, 439, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 497, 497,
	497, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 553, 553, 553,
	538, 538, 538, 539, 539, 539, 539, 539, 539, 539,
	539, 539, 539, 539, 539, 540, 540, 540, 540, 540,
	540, 540, 540, 540, 540, 540, 540, 540, 540, 540,
	540, 540, 315, 315, 315, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 382, 382, 383, 383, 494, 494, 494,
	494, 494, 494, 495, 495, 496, 496, 496, 496, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 367, 312,
	312, 312, 384, 376, 376, 377, 377, 378, 378, 370,
	370, 370, 370, 370, 370, 371, 371, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 372,
	372, 374, 374, 386, 386, 386, 385, 385, 385, 385,
	385, 385, 385, 251, 251, 251, 251, 364, 364, 364,
	363, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 241, 241, 241, 241, 245, 245, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 246, 246, 246, 246, 246, 244, 244, 244,
	244, 244, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 114, 115, 115, 243, 322, 322, 467, 467, 470,
	470, 468, 468, 469, 471, 471, 471, 472, 472, 472,
	473, 473, 473, 477, 477, 331, 331, 331, 339, 339,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 337, 337,
	337, 337, 337, 337, 337, 337, 337, 337, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336, 336, 336,
	336, 336, 336, 336, 336, 336, 336, 336,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 5, 1, 3, 3, 1, 2, 2, 2,
	1, 2, 2, 3, 4, 4, 6, 1, 1, 1,
	2, 4, 6, 1, 4, 1, 3, 3, 4, 4,
	4, 4, 3, 3, 2, 4, 4, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 2, 2, 0, 1, 4, 2, 4, 1,
	5, 3, 2, 1, 2, 2, 4, 4, 5, 2,
	1, 3, 4, 4, 1, 2, 9, 7, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 2, 4, 3, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 4, 7, 2, 3, 3, 4,
	3, 4, 4, 5, 3, 4, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 1, 1, 1, 1, 6, 4,
	1, 1, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 10, 7, 4, 4, 3, 1,
	3, 3, 1, 3, 1, 6, 7, 3, 3, 3,
	1, 1, 1, 3, 2, 4, 5, 5, 6, 5,
	5, 3, 2, 2, 1, 3, 4, 3, 7, 5,
	8, 2, 2, 1, 3, 2, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 0, 1, 2, 1, 3,
	2, 1, 2, 2, 1, 2, 3, 2, 2, 3,
	6, 3, 3, 1, 1, 7, 7, 7, 8, 8,
	0, 4, 7, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 3, 3, 2, 5, 5, 0,
	2, 7, 0, 1, 0, 1, 5, 5, 3, 3,
	2, 4, 4, 4, 4, 4, 1, 1, 1, 3,
	3, 1, 1, 1, 6, 0, 1, 1, 1, 1,
	5, 5, 0, 1, 1, 3, 3, 3, 4, 7,
	7, 5, 4, 7, 8, 3, 3, 2, 3, 4,
	0, 2, 2, 0, 2, 2, 1, 1, 1, 1,
	0, 1, 5, 5, 6, 4, 3, 1, 3, 1,
	1, 3, 5, 2, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 4, 1, 3, 1, 4,
	6, 6, 4, 4, 4, 4, 4, 3, 6, 3,
	5, 1, 1, 2, 2, 11, 8, 9, 1, 3,
	2, 4, 0, 2, 0, 1, 1, 1, 1, 0,
	1, 0, 1, 4, 2, 1, 5, 4, 4, 2,
	5, 5, 1, 3, 2, 1, 5, 4, 4, 2,
	0, 5, 4, 0, 1, 3, 3, 1, 3, 1,
	3, 1, 3, 4, 0, 1, 0, 1, 1, 3,
	1, 1, 0, 4, 1, 3, 2, 1, 0, 8,
	0, 4, 7, 4, 0, 2, 0, 2, 0, 2,
	0, 4, 1, 3, 1, 1, 6, 4, 5, 7,
	4, 5, 0, 1, 3, 8, 0, 6, 0, 4,
	6, 1, 1, 1, 1, 1, 2, 3, 1, 3,
	6, 0, 3, 0, 1, 2, 4, 4, 0, 1,
	3, 1, 3, 3, 0, 1, 1, 0, 2, 2,
	0, 2, 3, 3, 3, 1, 3, 3, 3, 3,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 1,
	2, 2, 7, 7, 1, 1, 1, 0, 1, 1,
	1, 1, 0, 2, 0, 4, 0, 2, 0, 2,
	1, 3, 1, 2, 3, 5, 0, 1, 2, 1,
	3, 1, 1, 1, 4, 4, 4, 3, 2, 2,
	2, 3, 2, 3, 4, 1, 3, 4, 0, 2,
	1, 1, 2, 2, 2, 0, 1, 2, 4, 1,
	3, 1, 3, 2, 3, 1, 4, 3, 0, 1,
	1, 2, 5, 2, 2, 2, 0, 2, 3, 3,
	0, 1, 3, 1, 3, 0, 1, 2, 1, 1,
	0, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	1, 7, 1, 3, 0, 1, 1, 3, 1, 3,
	0, 1, 1, 1, 14, 1, 3, 0, 1, 1,
	3, 1, 1, 2, 4, 1, 1, 1, 1, 0,
	1, 2, 9, 9, 7, 1, 2, 3, 3, 3,
	0, 4, 1, 1, 1, 1, 1, 0, 1, 1,
	1, 1, 1, 4, 1, 1, 1, 3, 3, 4,
	3, 3, 0, 1, 1, 1, 0, 2, 7, 8,
	10, 2, 2, 8, 0, 3, 3, 0, 3, 0,
	3, 0, 5, 1, 3, 0, 3, 3, 0, 2,
	9, 8, 0, 2, 2, 3, 3, 0, 2, 0,
	2, 4, 4, 4, 4, 1, 0, 2, 2, 1,
	3, 2, 1, 3, 2, 1, 3, 2, 0, 1,
	3, 4, 3, 1, 1, 4, 1, 3, 1, 1,
	1, 1, 0, 1, 1, 1, 11, 0, 2, 3,
	3, 2, 2, 3, 1, 1, 1, 3, 3, 4,
	0, 2, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 6, 9, 7, 10, 7,
	6, 2, 2, 9, 4, 5, 3, 0, 4, 1,
	3, 0, 3, 6, 0, 2, 10, 0, 2, 0,
	2, 0, 3, 2, 4, 3, 0, 2, 1, 0,
	2, 3, 0, 2, 3, 0, 2, 1, 0, 3,
	2, 4, 3, 0, 1, 0, 1, 1, 0, 6,
	0, 3, 5, 0, 4, 0, 3, 1, 3, 4,
	5, 0, 3, 1, 3, 2, 3, 1, 2, 0,
	4, 6, 5, 0, 2, 0, 2, 4, 5, 4,
	5, 1, 5, 6, 5, 0, 3, 0, 1, 1,
	3, 3, 3, 0, 4, 1, 3, 3, 3, 0,
	1, 1, 3, 2, 3, 3, 3, 4, 4, 3,
	3, 3, 3, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 5, 4, 5,
	1, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 4, 0,
	5, 5, 5, 5, 0, 1, 1, 3, 1, 1,
	1, 1, 1, 7, 9, 7, 9, 2, 1, 7,
	9, 7, 9, 8, 5, 0, 1, 0, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 3, 1, 3, 5,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 2, 1, 2, 2, 1, 1, 2, 2, 2,
	3, 3, 2, 2, 1, 5, 6, 4, 1, 1,
	1, 5, 4, 1, 1, 2, 0, 1, 1, 2,
	5, 0, 1, 1, 2, 2, 3, 3, 1, 1,
	2, 2, 2, 0, 1, 2, 2, 2, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 4, 4,
	4, 7, 9, 7, 7, 7, 9, 7, 7, 0,
	2, 0, 1, 1, 2, 4, 1, 2, 2, 1,
	2, 2, 1, 2, 2, 2, 2, 2, 0, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	1, 1, 2, 5, 0, 1, 3, 0, 1, 0,
	2, 0, 2, 0, 1, 6, 8, 8, 6, 6,
	5, 5, 5, 6, 6, 6, 6, 5, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 1, 1,
	1, 4, 4, 6, 8, 6, 4, 5, 4, 4,
	4, 3, 4, 6, 6, 7, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 8, 4, 2, 3, 2, 4,
	2, 2, 4, 6, 2, 2, 4, 6, 4, 2,
	4, 4, 4, 0, 1, 2, 3, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 3, 0, 1, 1, 3, 1, 3, 3,
	3, 3, 3, 2, 1, 1, 1, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 4,
	4, 5, 4, 5, 3, 4, 5, 6, 1, 0,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 4, 4,
	1, 2, 3, 5, 1, 1, 3, 0, 1, 0,
	3, 0, 3, 3, 0, 3, 5, 0, 3, 5,
	0, 1, 1, 0, 1, 1, 2, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -598, -601, -2, -5, 627, -1, -4, -115, -88,
	-7, -14, -117, -118, -8, -113, -9, -10, -12, -92,
	-108, -110, -112, -111, -47, -11, -107, -82, -83, -94,
	-101, -104, -105, -106, -119, -114, -116, -175, -120, -121,
	-122, -163, -125, -127, -128, 617, -89, -90, -91, -33,
	-32, -31, -30, -149, -154, -157, -159, -123, 550, 623,
	453, 14, 502, -15, -16, -543, -17, 262, -347, -348,
	-349, -351, -602, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -152,
	-153, -77, -57, -78, -58, -161, -124, -80, -79, -85,
	-81, -86, -151, -156, -13, -162, -87, 236, -84, 76,
	-95, -96, -97, -98, -99, -100, -102, -103, 377, 383,
	440, 616, 61, -176, -178, 637, 638, 641, 537, 540,
	160, 161, 163, 164, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 232, 16, 545,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-150, -25, -155, -23, -158, -160, -126, 257, 256, 38,
	323, 324, 325, 381, 255, 233, 235, 15, 31, 42,
	356, -177, 83, 538, 234, -179, 13, 643, -6, -3,
	-2, -136, -140, -144, -147, -148, -145, -146, -4, -115,
	118, 247, 618, -343, 373, 619, 621, 620, 86, 94,
	-336, -338, 453, 262, 377, 383, 616, 638, 641, 537,
	540, 552, 553, 554, 555, 556, 557, 558, 559, 561,
	562, 563, 564, 565, 566, 567, 577, 578, 568, 569,
	570, 571, 572, 573, 574, 575, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	505, 602, 603, 604, 605, 533, 560, 596, 597, 598,
	599, 354, 355, 542, 274, 298, 408, 304, 311, 160,
	179, 173, 202, 193, 538, 168, 278, 316, 279, 93,
	163, 488, 108, 465, 437, 166, 293, 295, 297, 534,
	535, 367, 300, 532, 299, 301, 303, 536, 280, 357,
	189, 184, 292, 276, 182, 281, 40, 282, 207, 283,
	284, 547, 461, 353, 467, 308, 52, 435, 183, 462,
	296, 464, 211, 215, 479, 480, 177, 178, 469, 482,
	206, 209, 210, 254, 350, 351, 43, 544, 266, 483,
	213, 205, 200, 491, 312, 310, 204, 176, 199, 277,
	65, 217, 216, 218, 431, 432, 433, 434, 285, 286,
	371, 478, 196, 185, 358, 169, 23, 486, 261, 466,
	384, 287, 305, 313, 212, 214, 268, 273, 328, 546,
	439, 272, 309, 484, 181, 265, 294, 260, 487, 170,
	386, 288, 164, 302, 481, 490, 64, 399, 175, 167,
	634, 251, 161, 270, 275, 289, 290, 291, 531, 315,
	314, 306, 539, 197, 267, 203, 187, 174, 198, 162,
	269, 489, 400, 614, 356, 418, 195, 192, 271, 244,
	485, 468, 165, 422, 401, 190, 317, 609, 610, 611,
	372, 349, 318, 319, 188, 258, 459, 460, 322, 428,
	340, 402, 438, 409, 403, 224, 225, 326, 471, 473,
	208, 612, 329, 330, 331, 463, 332, 333, 334, 335,
	376, 56, 58, 95, 98, 97, 639, 640, 63, 29,
	362, 365, 397, 404, 342, 615, 543, 339, 343, 344,
	366, 25, 420, 388, 424, 423, 48, 49, 50, 53,
	54, 55, 57, 59, 60, 51, 530, 381, 394, 492,
	45, 47, 391, 27, 368, 419, 441, 338, 421, 452,
	46, 450, 451, 472, 26, 370, 369, 62, 44, 427,
	429, 430, 320, 336, 379, 624, 493, 374, 390, 393,
	375, 341, 364, 395, 67, 66, 387, 625, 382, 380,
	337, 548, 549, 345, 576, 359, 436, 527, 526, 525,
	524, 523, 522, 521, 520, 323, 324, 325, 405, 406,
	407, 417, 410, 411, 412, 413, 414, 415, 416, 455,
	456, 626, 474, 476, 477, 475, 239, 642, 360, 361,
	242, 628, 629, 96, 630, 632, 631, 28, 633, 636,
	-424, -422, -343, 538, 616, 383, 537, 540, 377, 356,
	638, 641, 381, 262, 323, 324, 325, 453, 354, -220,
	-343, 642, -185, 246, 39, -234, -343, -185, -84, -16,
	-15, -177, -178, -234, 241, -352, 24, 435, -93, 436,
	236, 237, 83, 77, -343, -9, -106, -8, -113, -82,
	-175, 440, -350, -343, 323, 323, -350, 241, -345, 272,
	416, -343, -479, 247, -428, -401, 273, -427, -403, -430,
	-404, 32, 232, 234, 233, 550, 269, 16, 381, 243,
	14, 13, 382, 255, 25, 26, 28, 15, 383, 385,
	29, 386, 389, 390, 391, 42, 394, 395, 262, 86,
	94, 89, 280, -219, -343, -378, -370, 115, -373, -365,
	-366, -368, -321, -517, -363, 83, 142, 143, 150, 116,
	644, -367, -460, 36, 118, 556, 560, 596, 503, -313,
	-314, -315, -316, -317, -318, -343, -518, -516, 89, 99,
	101, 105, 106, 104, 102, 154, 186, 103, 90, 155,
	-178, 86, -538, 566, -337, 589, 602, 603, 604, 605,
	588, 61, -487, -496, 240, -494, 153, 191, 258, 187,
	14, 148, 428, 188, 597, 598, 599, 563, 585, 505,
	567, 577, 592, 558, 559, 561, 553, 554, 555, 557,
	568, 570, 584, -497, 580, 590, 591, 576, 600, 601,
	593, 594, 595, 632, 88, 87, 583, 582, 569, 564,
	565, 571, 552, 562, 572, 573, 581, 586, 587, 365,
	108, 366, 367, 495, 357, 368, 247, 435, 70, 369,
	370, 371, 372, 373, 502, 374, 71, 375, 364, 262,
	418, 376, 190, 208, 507, 506, 508, 499, 496, 494,
	497, 498, 500, 501, 574, 575, 579, -129, -130, 607,
	-592, -306, -593, 6, 7, 8, 9, -594, 155, -583,
	437, 546, 89, 316, 354, 17, 495, 635, 536, 635,
	536, 165, 162, -415, 165, 114, 170, 169, -415, 635,
	167, 634, 326, 268, -392, -166, 354, 418, 332, 95,
	272, -395, -393, 534, -481, 320, 316, 292, 242, 111,
	-167, 252, 251, 109, 495, 240, 392, 311, 56, 58,
	-554, -555, 229, 230, 231, -545, 528, -544, -343, 635,
	367, 97, 98, 634, 27, 241, 378, 268, 473, 471,
	472, 474, 475, 476, 477, -65, -498, -478, 468, 467,
	-356, 460, 466, 458, 470, 461, 355, 334, 550, 333,
	232, 628, 535, 529, -331, 402, 438, 492, 493, 379,
	439, 479, 481, 462, 108, 194, 191, 242, 244, 241,
	634, 354, 495, 418, 95, 332, 241, -554, 162, 479,
	481, 437, 272, 416, 41, -421, 428, -420, -422, 480,
	491, 87, 88, 478, -331, 108, 459, 459, -592, -306,
	-176, -178, -116, -543, 536, 635, 242, 354, 418, 272,
	243, 241, 531, 534, 244, 495, 240, 323, 378, 268,
	332, 95, 167, 634, -480, -551, 32, -488, 226, 227,
	228, 33, 34, -1, 122, 643, -370, -370, -6, 646,
	-6, -370, -343, -343, 157, -241, -245, -242, -244, -243,
	-247, -246, 191, 192, 153, 195, 201, 197, 198, 199,
	200, 202, 203, 204, 205, 206, 209, 210, 207, 31,
	208, 258, 187, 188, 189, 190, 211, 173, 193, 543,
	219, 174, 220, 175, 221, 176, 222, 177, 178, 223,
	179, 182, 183, 184, 185, 181, 156, -209, 89, 32,
	83, 156, 89, -201, 264, -185, -234, -226, 156, 644,
	-201, -592, -194, -195, 11, -234, -319, -343, 437, 125,
	-93, 77, -93, 436, 77, -93, 436, 236, -546, -547,
	-548, -550, 236, 436, 435, 237, -111, 156, 280, 17,
	-350, -350, 81, -234, -403, 272, -428, -401, 36, 80,
	157, 245, 157, 80, 83, 379, 354, 418, 380, 495,
	241, 392, 244, 272, 393, 354, 418, 241, 244, 495,
	272, 354, 241, 244, 418, 272, 393, 354, 458, 459,
	244, 27, 384, 387, 388, 459, -502, 491, 157, 114,
	111, 112, 113, -370, 132, -385, 125, 126, 127, 128,
	129, 130, 131, 139, 138, 149, 142, 143, 144, 145,
	146, 147, 148, 140, 141, 135, 115, 133, 137, 134,
	117, 152, -178, -370, -378, 61, -368, -368, -368, -368,
	-343, -460, -375, -370, 83, 83, 83, 83, 156, 102,
	89, -370, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, -495, 83, 83, -382, -383, 83,
	83, -363, -319, 83, 89, 89, 83, 83, 83, 89,
	83, 83, 83, -383, -383, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	-195, 157, -194, 83, -194, -195, -179, -178, 32, 33,
	32, 33, 32, 33, 32, 33, -595, 625, 83, 99,
	639, 224, 17, -343, 634, -343, -577, 32, 539, 539,
	539, 539, 484, 545, 168, 169, 170, -390, 247, -390,
	-390, -218, -343, -220, 378, 244, 531, 244, -167, -390,
	-390, -390, -390, -390, 243, -390, 24, 241, 241, 241,
	241, -390, 502, 125, 125, 59, -556, 172, 157, -545,
	-200, 83, -577, -355, 133, 137, -355, -302, 18, -302,
	24, 270, 270, 270, -355, 310, -603, -604, 17, 135,
	-353, -604, -353, -353, -355, -605, 243, 469, 43, 271,
	270, -196, -197, 22, -196, 463, 459, -445, 464, 465,
	-357, -604, -356, -355, -355, -356, -355, -355, -355, 32,
	241, 244, 495, 332, 629, -603, -603, 31, 31, -479,
	-479, -234, -479, -479, 529, -332, -343, -479, -479, -479,
	-286, -287, -234, -557, 246, -589, -588, 482, -591, 484,
	162, -422, 162, -422, 86, -403, 272, 272, 157, 125,
	24, -423, 125, 136, -422, -422, -423, -423, -258, 41,
	-342, 153, -343, 89, -258, 41, -586, -585, -234, -195,
	-179, -178, 84, 84, 84, 539, -577, -479, -479, -479,
	-479, -479, -481, -479, -479, -479, -479, -479, -350, -210,
	-343, -220, 247, -479, -479, -479, -479, -180, -181, 144,
	-370, -343, -180, -3, -138, -137, 119, 120, 122, 619,
	373, 618, 622, 616, -422, 41, -473, 400, 399, -467,
	-469, 83, -468, 83, -468, -468, -468, -468, -468, 83,
	83, -470, 83, -470, -470, -467, -471, 83, -471, -472,
	83, -472, -471, -343, -449, 545, -376, -378, -343, 39,
	-491, 61, -175, 83, 31, 83, -201, -343, 188, 167,
	633, -492, 61, -175, 83, 31, -195, -131, 39, -197,
	21, 156, 99, 89, -111, -93, 77, -111, -93, -93,
	84, 157, -549, 105, 106, -552, 206, 197, -343, -109,
	89, -7, -8, -9, -10, -47, -82, -79, -175, 233,
	537, 540, -519, -517, 83, 32, 427, 80, 17, -429,
	241, 495, 378, 268, 244, 354, -427, -410, -407, -405,
	-342, -403, -406, -405, -432, -319, 459, -132, 442, 441,
	322, -370, -370, -370, -370, -370, 104, 115, 349, 105,
	106, -365, -386, 32, 318, 319, -366, -366, -366, -366,
	-366, -366, -366, -366, -366, -366, -366, -366, -374, -384,
	-460, 83, 135, 133, 137, 134, 117, -368, -368, -366,
	-366, -260, -342, 153, 84, 157, -370, -542, -541, 119,
	-370, -370, -370, -370, -343, -539, -540, 509, 510, 511,
	512, 513, 514, 515, 516, 517, 518, 519, 369, 364,
	370, 368, 357, 376, 371, 372, 190, 526, 527, 520,
	521, 522, 523, 524, 525, -376, -376, -370, -539, -376,
	-312, 33, 32, -378, -378, -378, 84, -370, -553, 347,
	346, 348, -198, -343, -376, 84, 84, 84, 99, -378,
	-378, -376, -366, -376, -376, -376, -376, -540, -312, -312,
	-312, -312, 144, -378, -378, -312, -312, -312, -312, 144,
	-312, -312, -312, -312, -312, -312, -312, -312, -312, -312,
	84, 84, 84, 144, -378, -196, -130, -500, -499, -370,
	41, -131, -197, -596, 626, 83, -319, -584, 89, 89,
	644, 167, 634, 17, 495, -343, 17, 241, -343, 99,
	-343, 99, 485, 486, 166, 169, 168, -343, 115, -343,
	-343, 35, 83, -210, -390, -390, -390, -561, -343, 90,
	-411, -408, -405, -343, -343, -401, -343, -332, -234, -390,
	-390, -390, -390, -234, -269, 53, 54, 55, -405, -168,
	56, 57, -557, -544, 35, -199, -343, -302, -368, -368,
	-370, -405, 272, -603, -355, -355, -333, -332, -357, -352,
	-357, -357, -302, -353, -355, -355, -370, -357, -353, -302,
	-343, 459, -302, -302, -445, -355, -354, -343, -354, -390,
	-332, -333, -333, -234, -234, -281, -288, -282, -289, 264,
	238, 362, 363, 235, 233, 11, 234, -296, 311, -391,
	503, -264, -265, 77, 42, -267, 262, 404, 397, 274,
	278, 93, 279, 437, 280, 243, 282, 283, 284, 299,
	301, 254, 285, 286, 287, 428, 288, 161, 300, 289,
	290, 291, 380, -259, 6, 335, 545, 41, 51, 52,
	451, 450, 548, 275, -343, -561, -559, 31, -343, 31,
	-411, -343, -343, 157, 245, -188, -183, -187, -184, -189,
	-305, -307, -186, 83, -234, -178, -343, 157, 483, 485,
	486, -589, -423, -589, -423, 245, 32, 427, -426, 427,
	32, -401, -420, 479, 481, -416, 89, 428, -406, -425,
	80, 153, -499, -423, -423, -425, -425, 152, 157, -587,
	484, 485, 229, -196, 99, -236, -234, -561, -410, -401,
	-343, -479, -236, -236, -236, -345, -345, 83, 156, 36,
	-343, -343, -343, -343, -301, 157, -300, 17, -344, -343,
	35, 89, 156, -301, -139, -137, 121, -370, -6, 618,
	-370, -6, -6, -370, -6, -370, -477, 401, 99, 99,
	-322, 89, -322, 99, 99, 99, 551, 84, 89, -414,
	80, -493, -379, -537, 607, -203, 84, -198, -535, -536,
	-198, -202, -343, -491, -226, 125, 125, 125, -493, -203,
	84, -535, -196, 608, -131, -193, -192, -370, -343, 24,
	-111, -93, -547, 156, 354, 157, -199, -429, -409, -406,
	-431, 144, -343, -417, 157, 545, 647, 87, 245, -574,
	-573, 419, 84, 157, -503, 246, 502, 89, 644, 435,
	224, 225, 104, 349, 105, 106, -460, -378, -374, -368,
	-368, -366, -366, -372, 259, -372, 114, -370, 645, -369,
	-541, 121, -370, 35, 157, 35, 157, 81, 156, 84,
	84, 17, 17, 84, -370, 84, 84, 84, 84, 17,
	17, -370, 84, 156, 84, 84, 84, 84, 81, 84,
	157, 84, 84, 84, 84, 157, -378, -378, -370, -378,
	84, 84, 84, -370, -370, -370, -378, 84, -370, -370,
	-370, -370, -370, -370, -370, -370, -370, -370, -439, 454,
	-439, -439, 157, 157, 157, 84, -131, 83, 99, 157,
	640, -326, -325, 89, -343, -343, 167, 634, -343, 89,
	634, -343, 89, 167, 170, 170, 169, 89, 36, 24,
	309, 24, -219, -221, -222, -223, -224, -225, 135, 158,
	159, 83, -234, -234, -234, -563, 405, -575, 157, 41,
	-573, 495, -164, 322, -394, 81, -171, 17, 545, -234,
	-234, -234, -234, -248, 35, 17, -182, -235, -343, 83,
	84, 157, -402, 81, -343, -333, -302, -302, -357, -302,
	-302, 157, 23, -355, -357, -357, -226, -353, -226, 156,
	-226, -332, -466, 35, -200, 157, 21, 264, -233, -340,
	-230, -232, 249, -360, -231, 252, -531, 250, 248, 109,
	253, 307, 110, 243, -340, -340, 249, -268, 245, 35,
	-340, -284, 243, 352, 307, 250, 21, 264, -283, 243,
	110, -343, 249, 253, 250, 248, -339, 125, -331, 152,
	245, 43, 380, -339, 549, 264, -339, -339, -339, -339,
	-339, -339, -339, 281, 281, -339, -339, -339, -339, -339,
	-339, -339, -339, -339, -339, -339, 162, -339, -339, -339,
	-339, -339, -339, 83, 327, 276, 277, 309, -564, 405,
	31, 360, 360, 361, -575, 31, -172, 354, -287, -285,
	-354, 31, -308, -309, -310, -311, 68, 72, 74, 78,
	69, 70, 71, 75, 31, 157, -341, -346, 35, -343,
	89, -341, -178, -183, -188, -341, 83, -588, -590, 487,
	484, 490, -425, -425, 99, 245, 83, 125, -425, -425,
	41, -342, -585, 491, 485, -131, 157, 80, -236, -211,
	-212, -213, -214, -241, -319, 192, 195, 197, 198, 199,
	200, 202, 203, 204, 205, 206, 209, 210, 207, 208,
	258, 187, 188, 189, 190, 211, 173, 193, 543, 174,
	175, 176, 177, 178, 179, 182, 183, 184, 185, 181,
	-343, -220, -302, -181, -183, -343, 89, -343, 144, -302,
	122, -6, 120, -143, -142, -141, 123, 616, 622, 122,
	122, 122, 84, 84, 84, 157, 84, 84, 84, 157,
	84, 157, 99, -506, 464, 40, 157, 83, 84, 157,
	61, 157, 125, 84, 157, -370, -343, 89, -370, 84,
	61, -131, 89, 157, -190, 37, 38, 156, 437, -343,
	-517, 84, -431, 157, 245, 156, 156, -407, 383, -342,
	-409, 21, 545, -319, 39, -326, 125, 644, -343, 84,
	-372, -372, 114, -368, -365, 84, 122, -370, 120, -239,
	-241, 399, 400, -370, -239, -240, -246, 153, 191, 258,
	190, 189, 187, 399, 400, -258, -343, -370, -370, 84,
	-370, -370, 17, -343, -258, -366, -370, -195, -195, 84,
	84, -438, -439, -438, -438, 84, 84, 84, 84, -438,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	83, 99, 101, 99, 101, -499, -597, 63, 624, 62,
	427, 104, 312, 157, 99, 89, 645, 157, 125, 89,
	-343, -343, 17, 241, -343, 17, 170, 89, -576, 316,
	354, -450, 99, 316, 354, 495, 391, 84, 157, -319,
	-211, -200, 83, -200, -566, 466, 407, 417, -339, -362,
	-361, 356, 42, -485, 428, 413, 414, -408, 272, -332,
	-572, 96, 125, 80, 339, 343, 344, 340, 341, 342,
	-388, -389, -387, -391, -559, 83, 83, -175, 35, 133,
	-171, 83, 83, 35, -461, 329, -241, -234, -182, -343,
	17, 157, -558, 156, -1, -343, -401, -355, -302, -370,
	-370, -302, -355, -355, -357, -343, -226, -461, -241, 35,
	-282, 238, 234, -435, 309, 310, -436, -451, 312, -453,
	83, -238, -319, -231, -530, -531, -390, -343, 110, -530,
	110, 83, -238, -319, -319, -285, -319, -343, -343, -343,
	-343, -292, -291, -319, -294, 32, -295, -343, -343, -343,
	-343, 110, -343, 110, -263, 41, 48, 49, 50, -339,
	-339, 194, -266, 41, 427, 429, 430, -294, 99, 99,
	99, 99, 89, 89, 89, -339, -339, 99, 89, -346,
	89, -532, 169, 45, 46, 99, 99, 99, 99, 41,
	89, -271, 41, 292, 296, 293, 294, 295, 89, 99,
	41, 99, 41, 99, 41, -343, 83, -533, -534, 89,
	328, -450, -566, -339, 360, -422, 125, 125, -362, -571,
	322, -174, 495, 32, -204, 238, 234, -559, -413, -412,
	-319, -187, -187, -187, -187, 68, 68, 68, 68, 73,
	68, 73, 68, -310, -413, -189, -200, -346, 84, -582,
	-581, -580, -578, 76, 246, 77, -376, 484, 488, 489,
	-409, -358, 89, -416, -208, 24, -234, -234, -483, 302,
	303, 84, 157, -241, -304, 19, 156, -304, 118, -6,
	-139, -141, -370, -6, -370, 618, 373, 619, 89, 99,
	99, -514, 448, 443, 445, 110, -379, -501, -500, 61,
	-175, -198, -493, -536, -499, -343, 645, 645, 645, 645,
	61, -175, -493, -208, -506, -192, -191, 44, -343, 99,
	17, -406, -401, 144, 144, -343, 384, -417, 89, 406,
	89, 241, 645, 89, -326, -365, -370, 84, -249, 178,
	177, -249, 35, 84, 84, -468, -468, -467, -470, -467,
	-249, -249, 84, 84, 24, 84, 84, 84, -370, 84,
	84, 157, -489, 504, -490, 578, -438, -438, -438, -438,
	-438, -438, -438, -438, -438, -438, -438, -438, -438, -438,
	-438, -438, -381, -380, 264, 449, 631, 631, 449, 631,
	631, 84, 157, -539, 157, -334, 317, -334, -325, 89,
	245, 89, 167, -343, 89, 634, 89, -343, 89, 309,
	-343, -343, 89, 89, -223, -241, 84, 35, -227, -228,
	-229, -238, -230, -232, 35, -567, 93, -562, 89, -343,
	90, -568, 93, 408, 155, 358, 41, 409, 410, 425,
	353, 99, 99, 415, -560, -343, -173, 241, 354, -570,
	52, 125, 89, -234, -387, -331, 152, 283, 332, -299,
	-298, -343, 89, -227, -175, -234, -227, -227, -175, -462,
	331, 21, 99, 143, -201, 81, 156, -183, -235, -343,
	144, 84, -302, -226, -302, -302, -355, -462, -175, -447,
	313, 83, -445, 83, -445, 110, 340, -454, -452, 264,
	-290, 45, 47, -241, -528, -343, -526, -528, -343, -526,
	-526, -390, -370, -290, -238, 245, 31, 234, -293, 337,
	338, 343, -418, 308, 115, -418, 157, -190, 157, -343,
	-258, -258, 31, 89, 89, -236, 84, 157, 125, 99,
	89, -567, -562, 125, -423, 89, 89, -568, -572, 125,
	-237, 241, -332, 157, -204, -204, -302, 157, 125, -206,
	-205, 80, 81, -207, 80, -205, 68, 68, -302, -580,
	-579, 24, -531, -531, -531, 84, 84, 15, -213, 41,
	-303, 20, 21, 144, -303, 122, 120, 122, 122, -343,
	84, 84, -474, 609, -510, -512, 443, 21, 21, 15,
	246, 84, -493, -493, -514, 45, 46, -401, -417, 428,
	-234, 157, 645, -239, -370, 84, -370, 84, 89, 84,
	89, -195, 21, 84, 157, 84, 84, 84, 157, 84,
	84, -370, 84, -539, -335, 188, 89, -335, 354, -344,
	-343, 17, -343, 89, -450, 309, 309, 241, 239, -175,
	84, 157, -175, 89, -565, 419, 89, 89, 99, 41,
	99, 155, 411, -486, -165, 93, -236, 32, -204, -569,
	93, 125, 644, 83, -339, -339, -339, -343, 84, 157,
	-339, -339, 84, 84, 84, -256, 545, -463, 263, 99,
	143, 99, 143, 99, -341, -183, -343, -302, -558, 156,
	-302, -463, -437, 314, 99, -366, 83, -366, 83, -446,
	311, 83, 84, 157, -343, -319, -253, -252, -250, 104,
	115, 41, 397, -251, 93, 152, 297, 300, 299, 275,
	298, -280, -359, 80, 403, 337, 338, -391, 609, 533,
	248, 109, 110, 385, -360, 83, 83, 81, 317, 83,
	83, -528, 84, -290, -319, 41, -293, 41, 350, 308,
	-291, -343, 152, -258, 84, -534, 89, -539, -565, 89,
	-425, -570, 89, -165, -236, -559, -195, -412, -499, -370,
	83, -370, 83, 68, 11, 19, -363, -370, -378, 247,
	-6, 619, 373, -273, 610, 89, 21, 89, -508, 89,
	-413, -474, -134, -270, -331, 280, 84, 84, 84, -438,
	-438, -441, -440, -444, 449, 309, 457, -378, 89, 89,
	84, 84, 89, -343, 167, 89, 644, 89, -450, -450,
	-343, -215, -241, -169, 545, -256, -229, -169, 21, 545,
	357, 41, 99, 41, 412, 89, -173, 125, 105, 106,
	-327, -328, 89, -396, -398, -319, 83, -258, -260, 89,
	-298, -363, -363, -254, -175, 35, -255, -296, -391, 545,
	-133, -132, -254, 545, 83, -464, 161, 99, 143, 99,
	99, -302, -302, -464, -453, 21, 84, -432, 84, -432,
	83, 125, -366, -452, -455, 61, -250, 104, -366, 89,
	-260, -261, 41, 296, 292, 125, 125, -262, 41, 276,
	277, -272, 83, 307, 15, 194, 83, 110, 110, -234,
	-396, -396, -529, 339, 340, 341, 345, 343, 344, 342,
	-529, -396, -396, 83, -419, -418, -366, -339, -339, 152,
	-569, -196, -199, -527, -343, 248, 21, 21, -484, 545,
	-343, -343, -323, 611, 99, 89, 445, -273, -475, 612,
	-504, -445, -258, 125, 84, -443, 117, 411, 415, -364,
	-367, 99, 101, 186, 155, 84, 84, -343, -330, -329,
	89, 89, 89, 309, 544, -170, 60, 491, 89, 90,
	406, 89, 90, 357, -165, 89, 645, 157, 125, 84,
	157, -467, -370, -433, 264, -175, 157, -296, -331, -134,
	-433, -257, -297, -343, 89, -482, 169, 330, 545, 99,
	143, 99, -195, -465, 169, 330, -436, 84, 84, 84,
	-432, 99, 84, -459, -456, 83, -296, 266, 135, 89,
	89, 99, 83, -494, 31, 89, -397, 83, 84, 84,
	84, 84, -396, 99, -258, -339, 84, 84, 157, 636,
	83, 21, -323, -476, 613, 89, -513, 448, -507, -505,
	443, 444, 445, 446, 89, -442, -443, 415, -364, -367,
	607, 455, 455, 455, 645, 157, 125, -450, -217, -343,
	307, 428, -328, 89, -399, -398, -190, 84, -434, 316,
	21, -296, -339, -434, 84, 157, -339, -339, 330, 99,
	143, 99, -196, 330, -448, 315, 84, -459, -296, -458,
	-457, 314, 267, 83, 84, -370, -382, -339, 84, -275,
	-274, 541, -396, -399, 81, -399, 81, -399, 81, -399,
	81, 84, -258, -343, 248, -324, -343, -508, 89, -515,
	246, -511, -512, 447, -505, 21, 445, 21, 21, -135,
	157, 114, 456, 456, 456, -329, 89, 89, -216, 35,
	450, 384, -400, 254, 350, 351, 93, 545, 337, 338,
	-190, 21, -435, -258, -297, -363, -363, 99, 99, 84,
	157, -343, 263, 83, -377, -371, -370, 263, 84, -343,
	-279, -277, -278, 80, 462, 305, 306, 84, -529, -529,
	-529, -529, -280, 84, 157, -522, 83, 99, -510, -509,
	-511, 21, -508, 21, -508, -508, 452, -442, 89, -339,
	-339, 89, 89, 336, -319, 83, -447, -457, -456, -377,
	84, 157, -418, -278, 80, -277, 80, 16, 15, -399,
	-399, -399, -399, -343, -525, 31, 84, -521, -520, -320,
	-516, -343, 448, 449, 89, -508, 125, -600, -599, 630,
	99, 99, -343, -432, -437, 84, -371, -276, 302, 303,
	31, 169, -276, -524, -523, -321, 84, 157, 156, 89,
	89, 84, -453, 104, 41, 304, 157, 125, -520, -343,
	-523, 41, -370, 156, -343,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 309, 310, 311, 936,
	937, 938, 939, 940, 941, 942, 943, 944, 0, 0,
	0, 0, 0, 691, 692, 0, 655, 0, 0, 0,
	0, 0, 0, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 414, 415, 416,
	417, 418, 419, 420, 421, 422, 423, 0, 334, 330,
	253, 254, 255, 256, 257, 258, 341, 342, 515, 0,
	0, 0, 0, 774, -2, 97, 0, 0, 0, 0,
	323, 0, 314, 314, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, -2, 704, 0,
	656, 657, 658, 659, 660, 661, 662, 663, 664, 665,
	666, 667, 668, 669, 670, 671, 672, 398, 399, 400,
	394, 395, 397, 396, -2, 0, 0, 704, 0, 0,
	0, 782, 0, 0, 0, 825, 847, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1360, 1361,
	1362, 1363, 2146, 2116, -2, 1886, 1863, 2040, 2041, 1941,
	1952, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
	2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196,
	2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206,
	2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
	2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
	2227, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828,
	1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838,
	1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848,
	1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858,
	1859, 1860, 1861, 1862, 1864, 1865, 1866, 1867, 1868, 1869,
	1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
	1880, 1881, 1882, 1883, 1884, 1885, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
	1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983,
	1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,
	1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
	2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
	2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023,
	2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033,
	2034, 2035, 2036, 2037, 2038, 2039, 2042, 2043, 2044, 2045,
	2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055,
	2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065,
	2066, 2067, 2068, 2069, 2070, 2071, 2072, -2, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095,
	2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
	2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,
	2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
	2127, 2128, 2129, 2130, 2131, -2, -2, -2, 2135, 2136,
	2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2147,
	2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157,
	2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166, 2167,
	0, 307, 305, 1833, 1863, 1886, 1941, 1952, 1953, 1988,
	2040, 2041, 2073, 2116, 2132, 2133, 2134, 2146, 0, 0,
	962, 0, 752, 0, 0, 757, 1309, 752, 335, 693,
	694, 782, 808, 653, 0, 372, 0, 1877, 376, 2123,
	0, 0, 0, 0, 650, 366, 367, 368, 369, 370,
	371, 0, 0, 935, 0, 0, 362, 0, 329, 1943,
	2145, 1364, 0, 0, 0, 0, 0, 196, 1086, 198,
	1088, 202, 210, 0, 0, 0, 215, 216, 219, 220,
	221, 222, 223, 0, 227, 0, 229, 232, 0, 234,
	235, 0, 238, 239, 240, 0, 250, 251, 252, 1089,
	1090, 1091, -2, 125, 960, 1791, 1677, 0, 1684, 1697,
	1708, 1441, 1442, 1443, 1444, 0, 0, 0, 0, 0,
	0, 1452, 1453, 0, 1481, 2182, 2223, 2224, 0, 1461,
	1462, 1463, 1464, 1465, 1466, 136, 148, 149, 1730, 1731,
	1732, 1733, 1734, 1735, 1736, 0, 1738, 1739, 1740, 1648,
	1428, 1360, 0, 2191, 0, 2213, 2218, 2219, 2220, 2221,
	2212, 0, 0, 1633, 0, 1623, 0, 0, -2, -2,
	0, 0, 2013, -2, 2225, 2226, 2227, 2188, 2209, 2217,
	2192, 2193, 2216, 2184, 2185, 2186, 2179, 2180, 2181, 2183,
	2195, 2197, 2208, 0, 2204, 2214, 2215, 2121, 0, 0,
	0, 0, 0, 2163, 150, 151, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1644, -2, -2, 1647, -2, 1650, -2,
	-2, -2, -2, 1655, 1656, -2, 1658, -2, -2, -2,
	-2, -2, -2, -2, 1635, 1636, 1637, 1638, 1627, 1628,
	1629, 1630, 1631, 1632, -2, -2, -2, 808, 885, 0,
	808, 0, 783, 830, 833, 836, 839, 786, 0, 0,
	98, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 324, 325, 313, 315, 0, 319, 0, 312, 1122,
	1122, 1122, 0, 0, 0, 0, 1122, 1122, 1122, 1122,
	1122, 0, 1122, 0, 0, 0, 0, 0, 1122, 0,
	995, 1093, 1094, 1095, 1120, 1121, 1194, 0, 0, 0,
	709, 705, 706, 707, 708, 796, 0, 798, 801, 0,
	630, 630, 858, 858, 576, 0, 0, 0, 630, 0,
	590, 582, 0, 0, 0, 630, 0, 0, 803, 803,
	0, 633, 640, 630, 630, -2, 630, 630, 627, 630,
	0, 0, 1134, 596, 597, 598, 582, 582, 601, 602,
	603, 613, 614, 641, 1815, 0, 0, 515, 515, 0,
	515, 515, 0, 515, 515, 515, 0, 711, 1983, 1884,
	1958, 1843, 1943, 2145, 0, 280, 2013, 285, 0, 1885,
	1904, 0, 0, 1922, 0, -2, 0, 351, 808, 0,
	0, 782, 0, 0, 0, 0, 515, 515, 515, 515,
	515, 1193, 515, 515, 515, 515, 515, 0, 0, 0,
	515, 515, 515, 515, 0, 0, 848, 849, 844, 845,
	846, 850, 851, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 104, 103, 0, 1792, 1810, 1743, 1744, 1745,
	1797, 1747, 1801, 1801, 1801, 1801, 1776, 1777, 1778, 1779,
	1780, 1781, 1782, 1783, 1784, 1785, 1801, 1801, 0, 0,
	1790, 1767, 1799, 1799, 1799, 1797, 1794, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1804, 1804, 1807, 1807, 1804, 0, 412, 410, 411,
	1673, 0, 0, 0, 0, 752, 756, 1307, 0, 0,
	0, 808, -2, 0, 0, 654, 373, 1365, 0, 0,
	377, 0, 378, 0, 0, 380, 0, 0, 0, 401,
	0, 404, 388, 389, 390, 391, 384, 0, 176, 0,
	364, 365, 0, 0, 331, 0, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 207, 203, 211, 214, 224,
	231, 0, 243, 245, 248, 204, 212, 217, 218, 225,
	246, 205, 208, 209, 213, 247, 249, 206, 226, 230,
	244, 228, 233, 236, 237, 242, 0, 177, 0, 0,
	0, 0, 0, 1683, 0, 0, 1716, 1717, 1718, 1719,
	1720, 1721, 1722, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1677, 0, 0, 1447, 1448, 1449, 1450,
	0, 1454, 0, 1482, 0, 0, 0, 0, 0, 1737,
	1741, 0, 1673, 1673, 0, 1673, 1669, 0, 0, 0,
	0, 0, 0, 1673, 1606, 0, 0, 1608, 1624, 0,
	0, 1610, 1611, 0, 1614, 1615, 1673, 0, 1673, 1619,
	1673, 1673, 1673, 1602, 1603, 0, 1669, 1669, 1669, 1669,
	0, 0, 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
	1669, 1669, 1669, 1669, 1669, 1669, 0, 0, 0, 0,
	803, 0, 809, 0, -2, 0, 827, 829, 831, 832,
	834, 835, 837, 838, 840, 841, 788, 0, 0, 100,
	0, 0, 0, 0, 0, 0, 71, 73, 0, 0,
	0, 0, 0, 0, 317, 0, 322, 0, 0, 0,
	0, 0, 959, 0, 0, 1122, 1122, 1122, 996, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 1122, 1122,
	1122, 0, 1140, 0, 0, 0, 711, 710, 0, 797,
	0, 0, 70, 858, 0, 0, 573, 574, 0, 575,
	0, 582, 630, 630, 588, 589, 584, 583, 636, 637,
	633, 0, 633, 633, 858, 0, 607, 608, 609, 630,
	630, 615, 804, 0, 616, 617, 633, 0, 638, 639,
	858, 0, 0, 858, 858, 0, 625, 626, 628, 630,
	0, 0, 1122, 0, 646, 584, 584, 1816, 1817, 0,
	0, 1131, 0, 0, 0, 0, 649, 0, 0, 0,
	428, 429, 0, 0, 712, 259, 263, 0, 266, 0,
	1983, 0, 1983, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 303, 304, 0, 0, 0, 0, 294, 297,
	1301, 1302, 1083, 1084, 298, 299, 343, 344, 0, 803,
	826, 828, 822, 823, 824, 0, 72, 0, 0, 0,
	0, 0, 515, 0, 0, 0, 0, 0, 687, 0,
	975, 689, 0, 0, 0, 0, 0, 866, 860, 862,
	930, 136, 866, 8, 121, 118, 0, 19, 0, 0,
	19, 19, 0, 19, 308, 0, 1813, 1811, 1812, 1746,
	1798, 0, 1772, 0, 1773, 1774, 1775, 1786, 1787, 0,
	0, 1768, 0, 1769, 1770, 1771, 1762, 0, 1763, 1764,
	0, 1765, 1766, 306, 409, 0, 0, 1674, 963, 0,
	730, 744, 725, 0, 733, 0, 0, 1309, 0, 0,
	0, 713, 744, 715, 0, 733, 803, 780, 0, 758,
	0, 0, 374, 0, 385, 379, 0, 386, 381, 382,
	0, 0, 403, 405, 406, 407, 392, 393, 651, 360,
	361, 352, 353, 354, 355, 356, 357, 358, 359, 0,
	0, 0, 363, 146, 0, 332, 333, 0, 0, 0,
	190, 191, 192, 193, 194, 195, 197, 181, 676, 678,
	1075, 1087, 0, 1078, 0, 200, 241, 173, 0, 0,
	0, 1678, 1679, 1680, 1681, 1682, 1687, 0, 1689, 1691,
	1693, 1695, 0, 1713, -2, -2, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1698, 1711,
	1712, 0, 0, 0, 0, 0, 0, 1709, 1709, 1704,
	0, 1467, 1303, 1304, 1445, 0, 0, 1479, 1483, 0,
	0, 0, 0, 0, 137, 1668, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 0, 0, 1677, 0, 0,
	0, 1670, 1671, 0, 0, 0, 1561, 0, 0, 1567,
	1568, 1569, 0, 739, 0, 1634, 1607, 1625, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 886, 0, 748, 750,
	751, 777, 758, 784, 0, 0, 0, 96, 101, 0,
	1161, 0, 0, 0, 0, 0, 0, 0, 74, 1135,
	75, 1137, 326, 327, 0, 0, 321, 0, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 1011, 1012,
	513, 1069, 0, 0, 0, 1085, 1110, 1118, 0, 0,
	0, 0, 0, 1167, 997, 1002, 1003, 1004, 998, 999,
	1005, 1006, 0, 799, 0, 0, 899, 572, 631, 632,
	859, 579, 1943, 584, 858, 858, 591, 585, 592, 635,
	593, 594, 595, 633, 858, 858, 805, 630, 633, 618,
	634, 633, 1309, 622, 0, 629, 1309, 647, 1309, 0,
	645, 599, 600, 1169, 801, 426, 427, 432, 434, 0,
	483, 483, 483, 466, 483, 0, 0, 454, 1818, 0,
	0, 0, 0, 463, 1818, 0, 0, 1818, 1818, 1818,
	1818, 1818, 1818, 1818, 0, 0, 1818, 1818, 1818, 1818,
	1818, 1818, 1818, 1818, 1818, 1818, 1818, 0, 1818, 1818,
	1818, 1818, 1818, 1286, 1818, 0, 482, 1132, 473, 474,
	475, 476, 481, 0, 0, 510, 0, 0, 1010, 0,
	513, 0, 1052, 0, 0, 871, 0, 872, 873, 869,
	901, 925, 925, 0, 925, 905, 1309, 0, 0, 271,
	272, 260, 0, 261, 0, 0, 274, 275, 0, 277,
	278, 279, 286, 1884, 1958, 281, 283, 0, 0, 287,
	300, 301, 302, 0, 0, 292, 293, 0, 0, 346,
	347, 349, 0, 758, 1136, 673, 1305, 674, 675, 679,
	0, 0, 682, 683, 684, 685, 686, 977, 0, 0,
	1061, 1062, 1063, 1064, 858, 0, 867, 0, 863, 931,
	0, 933, 0, 858, 0, 119, 19, 0, 112, 109,
	0, 0, 0, 0, 0, 1793, 1742, 1814, 0, 0,
	0, 1795, 0, 0, 0, 0, 0, 102, 760, 720,
	0, 724, 741, 0, 745, 0, 0, 737, 729, 734,
	0, 0, 754, 721, 1308, 0, 0, 0, 714, 0,
	0, 719, 758, 0, 781, 810, 811, 814, 1366, 0,
	387, 383, 402, 0, 515, 0, 0, 0, 184, 1072,
	0, 185, 189, 179, 0, 0, 0, 1077, 0, 1074,
	1079, 0, 199, 0, 0, 174, 175, 1152, 1161, 0,
	0, 0, 1688, 1690, 1692, 1694, 1696, 0, 1699, 1709,
	1709, 1705, 0, 1700, 0, 1702, 0, 1678, 1451, 0,
	1484, 0, 0, 0, 0, 0, 0, 0, 0, 1551,
	1552, 0, 0, 1556, 0, 1558, 1559, 1560, 1562, 0,
	0, 0, 1566, 0, 1605, 1626, 1609, 1612, 0, 1616,
	0, 1618, 1620, 1621, 1622, 0, 808, 808, 0, 0,
	1523, 1523, 1523, 0, 0, 0, 0, 1523, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1468, 0,
	1469, 1470, 0, 0, 0, 887, 778, 0, 0, 0,
	0, 0, 1159, 0, 86, 0, 0, 0, 0, 91,
	0, 0, 76, 328, 316, 318, 0, 0, 1123, 0,
	0, 0, 0, 0, 965, 966, 968, 0, 971, 972,
	973, 977, 801, 0, 801, 1022, 1818, 517, 0, 0,
	1071, 0, 1041, 0, 0, 0, -2, 0, 0, 1118,
	0, 0, 0, 1171, 0, 0, 0, 698, 702, 23,
	802, 0, 577, 0, 578, 630, 586, 587, 858, 610,
	611, 0, 0, 858, 630, 630, 621, 633, 642, 0,
	643, 1309, 1171, 0, 0, 1131, 1237, 1205, 444, 0,
	1321, 1322, 484, 0, 1328, 1337, 1122, 1398, 0, 1337,
	0, 0, 1339, 1340, 0, 0, 0, 0, 467, 468,
	0, 453, 0, 0, 0, 0, 0, 0, 452, 0,
	0, 494, 0, 0, 0, 0, 0, 1819, 1818, 1818,
	0, 461, 462, 0, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 1818, 1818, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1277, 0, 0, 0,
	0, 0, 0, 0, 0, 1293, 1294, 0, 1022, 1818,
	0, 0, 0, 0, 517, 1039, 1057, 0, 430, 431,
	491, 0, 0, 0, 0, 0, 891, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 801, 926, 0, 928,
	929, 903, -2, 0, 871, 908, 1673, 264, 265, 0,
	0, 270, 288, 290, 262, 0, 0, 0, 289, 291,
	295, 296, 345, 348, 350, 820, 0, 0, 1195, 0,
	978, 979, 981, 982, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1868, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	976, 690, 854, 861, 868, 932, 934, 137, 864, 854,
	0, 122, 19, 121, 113, 114, 0, 19, 0, 0,
	0, 0, 1803, 1802, 1788, 0, 1789, 1800, 1805, 0,
	1808, 0, 413, 764, 0, 0, 744, 746, 0, 0,
	744, 0, 0, 753, 0, 0, 0, 0, 0, 0,
	744, 820, 760, 0, 817, 815, 816, 0, 0, 652,
	147, 408, 0, 0, 0, 0, 0, 677, 0, 1076,
	181, 0, 0, 201, 0, 0, 0, 1161, 1156, 1672,
	1701, 1703, 0, 1710, 1706, 1446, 1455, 1480, 0, 0,
	1486, 1498, 1498, 0, 0, 0, 1489, 1801, 1801, 1492,
	1797, 1799, 1797, 1498, 1498, 0, 138, 0, 0, 1557,
	0, 0, 0, 740, 0, 0, 0, 1519, 1521, 1523,
	1523, 1530, 1524, 1531, 1532, 1523, 1523, 1523, 1523, 1537,
	1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
	1517, 0, 0, 1731, 1732, 749, 0, 0, 791, 792,
	793, 794, 795, 0, 0, 61, 61, 1161, 0, 95,
	87, 0, 0, 0, 0, 0, 320, 0, 77, 78,
	0, 0, 85, 0, 0, 0, 0, 0, 970, 0,
	0, 0, 1314, 0, 1026, 1023, 1024, 1025, 0, 1066,
	518, 519, 520, 521, 0, 0, 0, 1070, 0, 0,
	1034, 0, 0, 0, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, -2, 1126, 0, 0, 0, 1314, 1145, 0, 0,
	1150, 1314, 1314, 0, 1179, 0, 1168, 752, 0, -2,
	0, 0, 700, 0, 0, 900, 580, 858, 604, 806,
	807, 1309, 858, 858, 630, 648, 644, 1179, 1170, 0,
	433, 483, 0, 1225, 0, 0, 1231, 0, 1238, 437,
	0, 485, 0, 1327, 1354, 1338, 1354, 1399, 1354, 1354,
	1122, 0, 485, 0, 0, 455, 0, 0, 0, 0,
	0, 451, 488, 814, 438, 440, 441, 442, 492, 493,
	495, 0, 497, 498, 457, 469, 470, 471, 472, 0,
	0, 0, 464, 477, 478, 479, 480, 439, 1254, 1255,
	1256, 1259, 1260, 1261, 1262, 0, 0, 1265, 1266, 1267,
	1268, 1269, 1351, 1352, 1353, 1270, 1271, 1272, 1273, 1274,
	1275, 1276, 1295, 1296, 1297, 1298, 1299, 1300, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 0, 0, 1290, 0,
	0, 0, 1026, 0, 0, 0, 0, 0, 1066, 1041,
	0, 1059, 0, 1053, 1054, 0, 0, 722, 858, 338,
	0, 895, 888, 0, 877, 892, 893, 894, 880, 0,
	882, 0, 878, 879, 858, 870, 902, 927, 904, 907,
	909, 910, 916, 0, 0, 0, 0, 267, 268, 269,
	276, 0, 537, 282, 776, 0, 1306, 680, 681, 1196,
	1197, 688, 0, 983, 852, 0, 0, 852, 117, 120,
	0, 115, 0, 0, 0, 0, 107, 105, 1796, 0,
	0, 766, 161, 0, 0, 0, 742, 0, 747, 744,
	728, 738, 727, 735, 736, 755, 1310, 1311, 1312, 1313,
	744, 718, 717, 779, 764, 812, 813, 0, 1367, 375,
	0, 1073, 181, 186, 187, 188, 182, 180, 1080, 0,
	1082, 0, 1154, 0, 0, 1707, 1485, 1456, 1487, 1499,
	1500, 1488, 0, 1458, 1459, 1490, 1491, 1493, 1494, 1495,
	1496, 1497, 1460, 1553, 0, 1555, 1563, 1564, 0, 1613,
	1617, 0, 0, 0, 0, 0, 1528, 1529, 1533, 1534,
	1535, 1536, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 808, 1518, 0, 0, 0, 0, 0, 0,
	0, 789, 0, 0, 0, 63, 0, 63, 1160, 1162,
	0, 930, 0, 0, 92, 0, 0, 79, 80, 0,
	0, 0, 958, 961, 967, 969, 0, 0, 0, 1315,
	1316, 1318, 1319, 1320, 0, 994, 0, 0, 1014, 1015,
	1016, 1028, 0, 0, 0, 523, 524, 0, 0, 0,
	536, 532, 533, 534, 514, 1065, 1048, 0, 0, 1037,
	0, 0, 1047, 0, 1127, 1818, 1818, 1818, 0, 0,
	1239, 1818, 1818, 0, 1147, 1149, 0, 0, 1243, 1182,
	0, 0, 1173, 0, 925, 0, 0, 858, 699, 702,
	703, 800, 581, 619, 623, 620, 858, 1182, 425, 1203,
	0, 0, 0, 0, 0, 1235, 0, 0, 1207, 0,
	456, 486, 0, -2, 0, 1355, 0, 1341, 1355, 0,
	0, 1354, 0, 445, 485, 0, 0, 0, 499, 503,
	504, 0, 501, 1394, 0, 502, 0, 490, 0, 496,
	1257, 1258, 0, 1263, 1264, 0, 1288, 0, 0, 0,
	436, 505, 0, 0, 0, 506, 507, 512, 1034, 0,
	1048, 0, 1058, 0, 1055, 1056, 808, 0, 0, 874,
	896, 0, 0, 875, 0, 876, 881, 883, 337, 911,
	0, 0, 913, 914, 915, 906, 284, 821, 980, 0,
	842, 0, 0, 865, 843, 0, 19, 0, 0, 110,
	1806, 1809, 768, 0, 765, 162, 0, 0, 0, 0,
	732, 743, 726, 716, 766, 818, 819, 183, 178, 1081,
	1164, 0, 1155, 0, 0, 1565, 0, 1523, 1520, 1523,
	1522, 1514, 0, 1471, 0, 1473, 1474, 1475, 0, 1477,
	1478, 0, 787, 0, 59, 0, 62, 60, 0, 94,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	1243, 0, 1000, 1027, 1013, 0, 1067, 1068, 0, 525,
	526, 0, 529, 535, 1029, 0, 0, 1031, 1032, 1033,
	0, 0, 1045, 0, 0, 0, 0, 1119, 1133, 0,
	0, 0, -2, 0, -2, 1144, 0, 1188, 0, 1180,
	0, 1172, 0, 1175, 858, 858, -2, 696, 701, 0,
	624, 1188, 1205, 0, 1226, 0, 0, 0, 0, 0,
	0, 0, 1206, 0, 1219, 487, 1356, -2, 1370, 1372,
	0, 1132, 1375, 1376, 0, 0, 0, 0, 0, 0,
	1420, 1384, 0, 0, 1388, 1389, 1390, 0, 0, 1393,
	0, 1725, 1726, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 1335, 446, 447, 0, 449, 450, 1818, 1395,
	489, 443, 1818, 459, 1287, 1291, 1292, 1289, 511, 508,
	509, 1037, 1040, 1051, 1060, 723, 803, 339, 340, 897,
	0, 889, 920, 917, 0, 0, 984, 853, 856, 111,
	116, 0, 0, 770, 0, 767, 0, 761, 763, 172,
	731, 768, 132, 164, 0, 0, 1457, 1554, 1604, 1526,
	1527, 0, 1515, 0, 1509, 1510, 1511, 1516, 0, 0,
	790, 785, 64, 90, 0, 93, 68, 81, 0, 0,
	0, 0, 986, 993, 1007, 1138, 1317, 992, 0, 0,
	522, 527, 0, 530, 531, 1049, 1048, 0, 1035, 1036,
	0, 1043, 0, 0, 1106, 1797, 0, 1128, 1129, 1130,
	1240, 1241, 1242, 1198, 1146, 0, -2, 1251, 0, 0,
	1142, 1164, 1198, 0, 0, 1176, 0, 1183, 0, 1181,
	1174, 808, 697, 1185, 435, 1237, 1227, 0, 1229, 0,
	0, 0, 0, 1208, -2, 0, 1371, 1373, 1374, 1377,
	1378, 1379, 1425, 1426, 1427, 0, 0, 1382, 1422, 1423,
	1424, 1383, 0, 0, 0, 0, 0, 1723, 1724, 1418,
	0, 0, 1342, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1343, 0, 0, 0, 1334, 1336, 448, 0, 0, 1818,
	1050, 336, 0, 0, 921, 923, 918, 919, 855, 0,
	106, 108, 123, 0, 769, 163, 0, 770, 134, 0,
	155, 0, 1165, 0, 1525, 1512, 0, 0, 0, 0,
	0, 1727, 1728, 1729, 0, 1472, 1476, 89, 0, 66,
	0, 82, 83, 0, 0, 0, 1008, 1009, 1017, 1018,
	0, 1020, 1021, 528, 1030, 1038, 1042, 1045, 0, 1097,
	0, 814, 0, 1200, 0, 1148, 1131, 1253, 1818, 1151,
	1200, 0, 1245, 1818, 1818, 1166, 0, 1178, 0, 1190,
	0, 1184, 803, 424, 0, 1187, 1223, 1228, 1230, 1232,
	0, 1236, 1234, 1209, -2, 0, 1217, 0, 0, 1380,
	1381, 0, 0, 1623, 1818, 0, 1413, 0, 1097, 1097,
	1097, 1097, 0, 500, 458, 0, 898, 912, 0, 857,
	0, 0, 759, 124, 0, 133, 152, 0, 165, 166,
	0, 0, 0, 0, 1157, 0, 1501, 0, 0, 0,
	1505, 1506, 1507, 1508, 65, 68, 0, 0, 0, 985,
	0, 1019, 1044, 1046, 1096, 1107, 1108, 814, 1141, 0,
	1237, 1252, 0, 1143, 1244, 0, 0, 0, 1177, 1189,
	0, 1192, 695, 1186, 1204, 0, 1233, 1210, 1218, 0,
	1213, 0, 0, 0, 1421, 0, 1387, 0, 1392, 1401,
	1414, 0, 0, 1323, 0, 1325, 0, 1329, 0, 1331,
	0, 0, 460, 922, 924, 0, 772, 762, 135, 139,
	0, 161, 158, 0, 167, 0, 0, 0, 0, 1153,
	0, 0, 1502, 1503, 1504, 67, 69, 84, 0, 987,
	988, 1001, 1098, 1818, 1818, 0, 0, 0, 1104, 1105,
	1109, 0, 1225, 1257, 1246, 1247, 1248, 1191, 1224, 1212,
	0, -2, 1220, 0, 0, 1675, 1685, 1686, 1385, 1391,
	1400, 1402, 1403, 0, 1415, 1416, 1417, 1419, 1097, 1097,
	1097, 1097, 1333, 771, 0, 126, 0, 0, 156, 157,
	159, 0, 168, 0, 170, 171, 0, 1513, 989, 0,
	0, 1101, 1102, 0, 1201, 0, 1203, 1214, -2, 0,
	1222, 0, 1386, 1404, 0, 1405, 0, 0, 0, 1324,
	1326, 1330, 1332, 773, 1163, 0, 140, 0, 142, 144,
	145, 1357, 153, 154, 160, 169, 0, 974, 990, 0,
	1099, 1100, 1103, 0, 1205, 1221, 1676, 1406, 1408, 1409,
	0, 0, 1407, 127, 128, 0, 141, 0, 0, 1158,
	991, 1202, 1199, 1410, 1412, 1411, 0, 0, 143, 1358,
	129, 130, 131, 0, 1359,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 646, 643,
	126, 125, 127, 3, 647, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 644, 138, 645, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:832
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:839
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:845
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:853
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:859
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:863
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:882
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:888
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:930
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:944
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:955
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:967
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:971
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:976
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:980
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:986
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1000
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1004
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1008
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1012
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1035
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1048
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1057
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1065
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1073
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1083
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1093
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1105
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1115
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1147
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1161
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1169
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1177
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1185
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1194
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1224
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1233
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1243
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1263
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1283
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1289
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1296
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1304
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1310
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1319
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1329
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1337
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1345
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1353
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1363
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1371
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1381
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1388
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1407
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1411
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1417
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1421
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1427
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1436
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1446
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1450
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1465
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1469
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1475
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1496
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1510
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1517
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1521
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1527
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1531
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1537
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1544
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1552
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1556
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1568
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1572
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1586
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1590
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1595
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1602
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1610
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1616
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1625
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1636
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1640
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1646
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1650
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1656
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1660
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1666
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1690
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1709
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1713
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1717
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1726
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1735
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1745
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1752
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1757
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1764
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1769
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1773
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1801
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1805
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1811
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1819
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1839
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1858
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1883
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1887
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1891
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1896
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1900
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1906
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1919
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1930
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1943
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1947
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1957
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1970
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1983
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1989
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1995
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2003
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2013
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2023
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2027
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2031
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2035
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2039
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2043
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2050
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2054
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2060
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2076
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2080
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2086
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2090
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2094
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2098
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2102
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2106
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2110
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2114
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2118
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2122
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2126
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2130
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2134
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2138
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2142
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2146
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2300
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2307
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2314
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2341
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2345
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2351
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2358
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2366
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2370
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2374
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2378
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2384
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2388
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2394
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2401
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2408
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2417
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2447
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2451
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2455
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2461
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2467
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2471
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2478
		{
			yyVAL.str = yyDollar[3].str
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2484
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2488
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2494
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2502
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2511
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2520
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2536
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2559
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2582
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2589
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2596
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2604
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2611
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2618
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2627
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2635
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2641
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2645
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2651
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2655
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2661
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2665
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2676
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2682
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2687
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2691
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2695
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2699
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2703
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2707
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2711
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2715
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2719
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2729
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2733
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2737
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2742
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2747
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2753
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2779
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2821
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2850
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2854
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2860
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2876
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2880
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2886
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2892
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2900
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2904
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2910
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2923
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2929
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2933
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2939
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2943
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2955
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2966
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2972
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2980
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2984
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3000
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3008
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3018
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3026
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3036
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3046
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3062
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3066
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3074
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3082
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3122
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3126
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3132
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3138
		{
			yyVAL.str = yyDollar[1].str
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3143
		{
			yyVAL.str = "true"
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3144
		{
			yyVAL.str = "false"
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3145
		{
			yyVAL.str = yyDollar[1].str
		}
	case 408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3150
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3156
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3165
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3172
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3180
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3184
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3209
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3232
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3242
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3249
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3258
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3266
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3270
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3276
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3287
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3291
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3297
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3301
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3325
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3335
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3345
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3361
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3383
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3389
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3393
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3405
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3413
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3423
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3431
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3441
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3451
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3461
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3468
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3476
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3484
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3491
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3497
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3501
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3505
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3509
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3513
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3517
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3521
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3525
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3530
		{
			yyVAL.str = ""
		}
	case 483:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3561
		{
			yyVAL.str = ""
		}
	case 484:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3565
		{
			yyVAL.str = string("COLUMN")
		}
	case 485:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3570
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3576
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3582
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3590
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3594
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3600
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3608
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3615
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3621
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3633
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3639
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3646
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3653
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3661
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3667
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3679
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3685
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3693
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3697
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3704
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3722
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3737
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3752
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3767
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3780
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3786
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3797
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3810
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3814
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3822
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3826
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3831
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3835
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3851
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3855
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3859
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3863
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3874
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3878
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3882
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3889
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3893
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3900
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3904
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3908
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3912
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3919
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3926
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3932
		{
			yyVAL.item = nil
		}
	case 536:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3937
		{
			yyVAL.item = nil
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3982
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3991
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3999
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4007
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4015
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4019
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4023
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4038
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4044
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4049
		{
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4053
		{
		}
	case 586:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4068
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4078
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4086
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4092
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4098
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4104
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4110
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4116
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4131
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4135
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4139
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4147
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4151
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4155
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4159
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4174
		{
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4176
		{
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4185
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4195
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4204
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4208
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4212
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4218
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4224
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4230
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4245
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4268
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4276
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4282
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4294
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4308
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4314
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4320
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4331
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4336
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4340
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4344
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4349
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4353
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 635:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4359
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4374
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4378
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4384
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4392
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4399
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4407
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4419
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4424
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4432
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4438
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4443
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4449
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4455
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4459
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4487
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4503
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4511
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4515
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4521
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4534
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4542
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4551
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4557
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4565
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4573
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4581
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4609
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4615
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4625
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4630
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4637
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4653
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4666
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4677
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4681
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4687
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4693
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4702
		{
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4704
		{
		}
	case 704:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4707
		{
		}
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4716
		{
		}
	case 711:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4720
		{
		}
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4725
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4734
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4741
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4747
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4755
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4762
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4769
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4789
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4797
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4807
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4811
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4817
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4824
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4830
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4838
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4845
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4852
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4871
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4875
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4879
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4884
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4888
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4892
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4898
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4907
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4911
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4917
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 740:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4921
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4927
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4931
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4937
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4942
		{
		}
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4946
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4953
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4957
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4964
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4969
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4973
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4979
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4983
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4989
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4993
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4998
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5002
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5015
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5026
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5037
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5059
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5082
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5090
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5099
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5103
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5116
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5120
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5125
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5129
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5136
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5141
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5148
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5154
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5158
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5162
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5166
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5170
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5174
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5183
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5189
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5199
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5218
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5232
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5236
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5242
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5251
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5255
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5259
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5263
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5267
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5273
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5280
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5289
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5293
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5299
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5307
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5311
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5320
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5326
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5330
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5334
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5339
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5343
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5349
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5355
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5359
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5365
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5370
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5374
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5378
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5383
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5387
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5391
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5396
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5400
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5408
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5412
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5416
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5430
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5434
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5444
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5454
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5464
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5476
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5484
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5492
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5501
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5509
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5517
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5525
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5533
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5541
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5549
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5557
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5565
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5575
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5586
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5600
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 845:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5604
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5608
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 847:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5613
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5617
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5621
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5630
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5634
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5643
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprs: yyDollar[3].exprsUnion(),
				RollUp:       yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5651
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5655
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5660
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5664
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5670
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5674
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5680
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5684
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5688
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5692
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5697
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5705
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5711
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5719
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5727
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5737
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5743
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5752
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5761
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5770
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5780
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 879:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5784
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 880:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5794
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 881:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5798
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 882:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5802
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5806
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 884:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5812
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5822
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5826
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5832
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5838
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5842
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5848
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5854
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5858
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 893:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5862
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 894:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5866
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5872
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5876
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5882
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5886
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5892
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5896
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5902
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5906
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5916
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5929
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5935
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5941
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5955
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5973
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5977
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5983
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5993
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5997
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6001
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6006
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6010
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6014
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6018
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6023
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6027
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6031
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6035
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6039
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6044
		{
			yyVAL.str = ""
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6048
		{
			yyVAL.str = yyDollar[1].str
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6052
		{
			yyVAL.str = yyDollar[2].str
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6058
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 929:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6062
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6067
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6071
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6075
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6079
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6089
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 958:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6131
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6144
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6150
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 961:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6156
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6169
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6174
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6181
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6188
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6192
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6198
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6204
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6209
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6213
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6217
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6221
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6228
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6261
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6266
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6273
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6280
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6284
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6290
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6296
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6300
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6304
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6310
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 986:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6316
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6322
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6326
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6332
		{
			yyVAL.str = ""
		}
	case 991:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6339
		{
			yyVAL.str = yyDollar[2].str
		}
	case 992:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6345
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6360
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6377
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6394
		{
			yyVAL.str = yyDollar[1].str
		}
	case 996:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6398
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 997:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6404
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6408
		{
			yyVAL.str = "DEFINER = "
		}
	case 999:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6412
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1000:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6417
		{
			yyVAL.str = ""
		}
	case 1001:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6421
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1007:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6435
		{
			yyVAL.str = ""
		}
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6443
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6449
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6454
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6460
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6473
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6478
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6483
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6489
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6496
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6503
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6510
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6517
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6525
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6531
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6538
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6545
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6553
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6559
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6568
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6585
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6601
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6620
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6626
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6635
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6653
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6659
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6666
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6680
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6688
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6694
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6702
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6708
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6717
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6721
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6726
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6730
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6737
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1048:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6742
		{
			yyVAL.str = ""
		}
	case 1049:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6746
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1050:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6752
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6765
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6780
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6786
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6792
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6798
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6805
		{
			yyVAL.str = ""
		}
	case 1058:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6809
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6814
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6818
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6824
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6832
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6840
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6848
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6856
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1066:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6861
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6873
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6884
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6993
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6997
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7003
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7016
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7020
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7026
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7039
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7043
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7047
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7052
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7056
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7062
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7069
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7075
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7084
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1085:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7091
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7102
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7106
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7112
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7121
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7125
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7129
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7134
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7138
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7142
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7146
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7152
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7183
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7187
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7213
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7219
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7231
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7237
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7243
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7249
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7255
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7263
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7267
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7273
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7287
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7301
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7305
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7309
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7313
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7317
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7321
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7325
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7331
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7346
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7350
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7361
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7365
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7370
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7374
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7380
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7384
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7390
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7399
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7408
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7414
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7418
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7424
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7435
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7441
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7459
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7477
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7495
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7511
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7515
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7524
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7536
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7545
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7557
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7567
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7577
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7588
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7598
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7609
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7617
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7628
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7635
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7645
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7658
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7666
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7675
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7684
		{
			yyVAL.str = ""
		}
	case 1158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7688
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7694
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7698
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7703
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7707
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7714
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7726
		{
			yyVAL.str = ""
		}
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7730
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1166:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7736
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7757
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7771
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7779
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7785
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7789
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7796
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7803
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7810
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7817
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7821
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7825
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7829
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7833
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7840
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7847
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7851
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7858
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7865
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7869
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7875
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7881
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7885
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7892
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7899
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7906
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7913
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7917
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7922
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7926
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7930
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7935
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7939
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7952
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7956
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7964
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7972
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7976
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7988
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7992
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7998
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8002
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8008
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8021
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8035
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8039
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8045
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8049
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8055
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8064
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8075
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8079
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8084
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8088
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8094
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8099
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8107
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8111
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8121
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8125
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8136
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8144
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8152
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8160
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8171
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8180
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8190
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8200
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8204
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8209
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8213
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8219
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8223
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8229
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8238
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8248
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8252
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8258
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8262
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8268
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8277
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8287
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8291
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8297
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8301
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8305
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8311
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8315
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8319
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8323
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8327
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8331
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8335
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8340
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8344
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8348
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8352
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8356
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8360
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8364
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8368
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8372
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8376
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8380
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8384
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8388
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8394
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8400
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8404
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8408
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8412
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8416
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8422
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8428
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8434
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8440
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8446
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8452
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8456
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8460
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8464
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8469
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8480
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8484
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8490
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8501
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8505
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1295:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8511
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8515
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8519
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8523
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8527
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8531
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8545
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8549
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8558
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8564
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8572
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8576
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8583
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8592
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8600
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8608
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8615
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8619
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8625
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8629
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8633
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8639
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8643
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8649
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8662
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8675
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8714
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8754
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8768
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8774
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8787
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8800
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8813
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8826
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8841
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8851
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8857
		{
			yyVAL.str = ""
		}
	case 1338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8861
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8871
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8877
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8883
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8904
		{
			yyVAL.str = ""
		}
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8908
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8920
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8924
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8929
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8937
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8941
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8945
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8949
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8955
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8961
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8965
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8970
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8977
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8981
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8987
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8991
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8997
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9001
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9005
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9009
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9013
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9017
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9022
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9026
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9034
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9038
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9042
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9046
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9050
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9054
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9058
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9072
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9076
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9080
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9084
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9088
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9092
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9098
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9102
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9107
		{
			yyVAL.str = ""
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9111
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9117
		{
			yyVAL.str = ""
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9121
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1400:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9127
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9144
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9151
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9158
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9165
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9172
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9181
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9187
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9193
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9197
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9201
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9205
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9209
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9214
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9221
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9225
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9234
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9238
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9243
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9247
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9263
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9277
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9281
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9285
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9289
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9293
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9297
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9305
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9309
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9313
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9317
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9323
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9327
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9331
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9335
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9339
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9343
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9347
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9351
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9355
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9359
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9401
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9405
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9409
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9422
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9426
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9430
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9434
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9438
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9448
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9452
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9456
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9460
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9464
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9468
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9472
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9478
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9487
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9496
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9507
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9536
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9546
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9556
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9566
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9575
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9585
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9589
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9598
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9604
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9608
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9614
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9623
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9635
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9652
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9669
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9695
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9707
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9721
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9736
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9751
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9768
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9783
		{
		}
	case 1502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9790
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9794
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9798
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9804
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9808
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9812
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9816
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9822
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9826
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9830
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9836
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9844
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9854
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9858
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9865
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9870
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9874
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9879
		{
			yyVAL.str = ","
		}
	case 1520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9883
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9888
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9892
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9897
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9904
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9930
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9954
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9965
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9976
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9987
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9997
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10007
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10018
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10029
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10040
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10051
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10062
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10073
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10084
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10095
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10106
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10117
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10128
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10139
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10150
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10161
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10179
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10188
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10197
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10206
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10215
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10235
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10245
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10254
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10263
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10272
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10281
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10293
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10304
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10317
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10329
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10352
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10388
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10401
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10414
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10426
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10435
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10451
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10464
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10473
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10484
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10495
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10504
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10516
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10526
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10536
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10545
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10556
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10565
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10575
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10584
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10593
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10603
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10607
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10617
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10636
		{
		}
	case 1634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10638
		{
		}
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10679
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10695
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10699
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10705
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10710
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10714
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10720
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10724
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10730
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10734
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10741
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10745
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10749
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10758
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10762
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10766
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10781
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10785
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10789
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10793
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10797
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10801
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10805
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10809
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10825
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10829
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10833
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10837
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10841
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10845
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10857
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10861
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10867
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10871
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10877
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10881
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10888
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10892
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10896
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10902
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10906
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10910
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10914
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10918
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10922
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10926
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10932
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10936
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10940
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10944
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10950
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10963
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10968
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10974
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10978
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10991
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10996
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11000
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11004
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11008
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11012
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11019
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11023
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11027
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11031
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11038
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11049
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11054
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11060
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11072
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11084
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11096
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11109
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11122
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11135
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11148
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11161
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11187
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11200
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11213
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11226
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11241
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11268
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11310
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11346
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11382
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11399
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11411
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11431
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11451
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11471
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11487
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11500
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11513
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11526
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11539
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11551
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11563
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11575
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11587
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11599
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11611
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11635
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11672
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11711
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11726
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11734
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11743
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11753
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11776
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11781
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11787
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11794
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11798
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11803
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11807
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11813
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11819
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11826
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11833
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11842
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11849
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11856
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11865
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11869
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11873
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11879
		{
		}
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11881
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11891
		{
			yyVAL.str = ""
		}
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11895
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
