// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const APPLY = 57421
const DEDUP = 57422
const LOWER_THAN_ON = 57423
const ON = 57424
const USING = 57425
const SUBQUERY_AS_EXPR = 57426
const LOWER_THAN_STRING = 57427
const ID = 57428
const AT_ID = 57429
const AT_AT_ID = 57430
const STRING = 57431
const VALUE_ARG = 57432
const LIST_ARG = 57433
const COMMENT = 57434
const COMMENT_KEYWORD = 57435
const QUOTE_ID = 57436
const STAGE = 57437
const CREDENTIALS = 57438
const STAGES = 57439
const SNAPSHOTS = 57440
const INTEGRAL = 57441
const HEX = 57442
const FLOAT = 57443
const HEXNUM = 57444
const BIT_LITERAL = 57445
const NULL = 57446
const TRUE = 57447
const FALSE = 57448
const LOWER_THAN_CHARSET = 57449
const CHARSET = 57450
const UNIQUE = 57451
const KEY = 57452
const OR = 57453
const PIPE_CONCAT = 57454
const XOR = 57455
const AND = 57456
const NOT = 57457
const BETWEEN = 57458
const CASE = 57459
const WHEN = 57460
const THEN = 57461
const ELSE = 57462
const END = 57463
const ELSEIF = 57464
const LOWER_THAN_EQ = 57465
const LE = 57466
const GE = 57467
const NE = 57468
const NULL_SAFE_EQUAL = 57469
const IS = 57470
const LIKE = 57471
const REGEXP = 57472
const IN = 57473
const ASSIGNMENT = 57474
const ILIKE = 57475
const SHIFT_LEFT = 57476
const SHIFT_RIGHT = 57477
const DIV = 57478
const MOD = 57479
const UNARY = 57480
const COLLATE = 57481
const BINARY = 57482
const UNDERSCORE_BINARY = 57483
const INTERVAL = 57484
const OUT = 57485
const INOUT = 57486
const BEGIN = 57487
const START = 57488
const TRANSACTION = 57489
const COMMIT = 57490
const ROLLBACK = 57491
const WORK = 57492
const CONSISTENT = 57493
const SNAPSHOT = 57494
const SAVEPOINT = 57495
const CHAIN = 57496
const NO = 57497
const RELEASE = 57498
const PRIORITY = 57499
const QUICK = 57500
const BIT = 57501
const TINYINT = 57502
const SMALLINT = 57503
const MEDIUMINT = 57504
const INT = 57505
const INTEGER = 57506
const BIGINT = 57507
const INTNUM = 57508
const REAL = 57509
const DOUBLE = 57510
const FLOAT_TYPE = 57511
const DECIMAL = 57512
const NUMERIC = 57513
const DECIMAL_VALUE = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const DATALINK = 57529
const BLOB = 57530
const TINYBLOB = 57531
const MEDIUMBLOB = 57532
const LONGBLOB = 57533
const JSON = 57534
const ENUM = 57535
const UUID = 57536
const VECF32 = 57537
const VECF64 = 57538
const GEOMETRY = 57539
const POINT = 57540
const LINESTRING = 57541
const POLYGON = 57542
const GEOMETRYCOLLECTION = 57543
const MULTIPOINT = 57544
const MULTILINESTRING = 57545
const MULTIPOLYGON = 57546
const INT1 = 57547
const INT2 = 57548
const INT3 = 57549
const INT4 = 57550
const INT8 = 57551
const S3OPTION = 57552
const STAGEOPTION = 57553
const SQL_SMALL_RESULT = 57554
const SQL_BIG_RESULT = 57555
const SQL_BUFFER_RESULT = 57556
const SQL_CALC_FOUND_ROWS = 57557
const LOW_PRIORITY = 57558
const HIGH_PRIORITY = 57559
const DELAYED = 57560
const CREATE = 57561
const ALTER = 57562
const DROP = 57563
const RENAME = 57564
const ANALYZE = 57565
const PHYPLAN = 57566
const ADD = 57567
const RETURNS = 57568
const SCHEMA = 57569
const TABLE = 57570
const SEQUENCE = 57571
const INDEX = 57572
const VIEW = 57573
const TO = 57574
const IGNORE = 57575
const IF = 57576
const PRIMARY = 57577
const COLUMN = 57578
const CONSTRAINT = 57579
const SPATIAL = 57580
const FULLTEXT = 57581
const FOREIGN = 57582
const KEY_BLOCK_SIZE = 57583
const SHOW = 57584
const DESCRIBE = 57585
const EXPLAIN = 57586
const DATE = 57587
const ESCAPE = 57588
const REPAIR = 57589
const OPTIMIZE = 57590
const TRUNCATE = 57591
const MAXVALUE = 57592
const PARTITION = 57593
const REORGANIZE = 57594
const LESS = 57595
const THAN = 57596
const PROCEDURE = 57597
const TRIGGER = 57598
const STATUS = 57599
const VARIABLES = 57600
const ROLE = 57601
const PROXY = 57602
const AVG_ROW_LENGTH = 57603
const STORAGE = 57604
const DISK = 57605
const MEMORY = 57606
const CHECKSUM = 57607
const COMPRESSION = 57608
const DATA = 57609
const DIRECTORY = 57610
const DELAY_KEY_WRITE = 57611
const ENCRYPTION = 57612
const ENGINE = 57613
const MAX_ROWS = 57614
const MIN_ROWS = 57615
const PACK_KEYS = 57616
const ROW_FORMAT = 57617
const STATS_AUTO_RECALC = 57618
const STATS_PERSISTENT = 57619
const STATS_SAMPLE_PAGES = 57620
const DYNAMIC = 57621
const COMPRESSED = 57622
const REDUNDANT = 57623
const COMPACT = 57624
const FIXED = 57625
const COLUMN_FORMAT = 57626
const AUTO_RANDOM = 57627
const ENGINE_ATTRIBUTE = 57628
const SECONDARY_ENGINE_ATTRIBUTE = 57629
const INSERT_METHOD = 57630
const RESTRICT = 57631
const CASCADE = 57632
const ACTION = 57633
const PARTIAL = 57634
const SIMPLE = 57635
const CHECK = 57636
const ENFORCED = 57637
const RANGE = 57638
const LIST = 57639
const ALGORITHM = 57640
const LINEAR = 57641
const PARTITIONS = 57642
const SUBPARTITION = 57643
const SUBPARTITIONS = 57644
const CLUSTER = 57645
const TYPE = 57646
const ANY = 57647
const SOME = 57648
const EXTERNAL = 57649
const LOCALFILE = 57650
const URL = 57651
const PREPARE = 57652
const DEALLOCATE = 57653
const RESET = 57654
const EXTENSION = 57655
const RETENTION = 57656
const PERIOD = 57657
const INCREMENT = 57658
const CYCLE = 57659
const MINVALUE = 57660
const PUBLICATION = 57661
const SUBSCRIPTIONS = 57662
const PUBLICATIONS = 57663
const PROPERTIES = 57664
const PARSER = 57665
const VISIBLE = 57666
const INVISIBLE = 57667
const BTREE = 57668
const HASH = 57669
const RTREE = 57670
const BSI = 57671
const IVFFLAT = 57672
const MASTER = 57673
const ZONEMAP = 57674
const LEADING = 57675
const BOTH = 57676
const TRAILING = 57677
const UNKNOWN = 57678
const LISTS = 57679
const OP_TYPE = 57680
const REINDEX = 57681
const EXPIRE = 57682
const ACCOUNT = 57683
const ACCOUNTS = 57684
const UNLOCK = 57685
const DAY = 57686
const NEVER = 57687
const PUMP = 57688
const MYSQL_COMPATIBILITY_MODE = 57689
const UNIQUE_CHECK_ON_AUTOINCR = 57690
const MODIFY = 57691
const CHANGE = 57692
const SECOND = 57693
const ASCII = 57694
const COALESCE = 57695
const COLLATION = 57696
const HOUR = 57697
const MICROSECOND = 57698
const MINUTE = 57699
const MONTH = 57700
const QUARTER = 57701
const REPEAT = 57702
const REVERSE = 57703
const ROW_COUNT = 57704
const WEEK = 57705
const REVOKE = 57706
const FUNCTION = 57707
const PRIVILEGES = 57708
const TABLESPACE = 57709
const EXECUTE = 57710
const SUPER = 57711
const GRANT = 57712
const OPTION = 57713
const REFERENCES = 57714
const REPLICATION = 57715
const SLAVE = 57716
const CLIENT = 57717
const USAGE = 57718
const RELOAD = 57719
const FILE = 57720
const TEMPORARY = 57721
const ROUTINE = 57722
const EVENT = 57723
const SHUTDOWN = 57724
const NULLX = 57725
const AUTO_INCREMENT = 57726
const APPROXNUM = 57727
const SIGNED = 57728
const UNSIGNED = 57729
const ZEROFILL = 57730
const ENGINES = 57731
const LOW_CARDINALITY = 57732
const AUTOEXTEND_SIZE = 57733
const ADMIN_NAME = 57734
const RANDOM = 57735
const SUSPEND = 57736
const ATTRIBUTE = 57737
const HISTORY = 57738
const REUSE = 57739
const CURRENT = 57740
const OPTIONAL = 57741
const FAILED_LOGIN_ATTEMPTS = 57742
const PASSWORD_LOCK_TIME = 57743
const UNBOUNDED = 57744
const SECONDARY = 57745
const RESTRICTED = 57746
const USER = 57747
const IDENTIFIED = 57748
const CIPHER = 57749
const ISSUER = 57750
const X509 = 57751
const SUBJECT = 57752
const SAN = 57753
const REQUIRE = 57754
const SSL = 57755
const NONE = 57756
const PASSWORD = 57757
const SHARED = 57758
const EXCLUSIVE = 57759
const MAX_QUERIES_PER_HOUR = 57760
const MAX_UPDATES_PER_HOUR = 57761
const MAX_CONNECTIONS_PER_HOUR = 57762
const MAX_USER_CONNECTIONS = 57763
const FORMAT = 57764
const VERBOSE = 57765
const CONNECTION = 57766
const TRIGGERS = 57767
const PROFILES = 57768
const LOAD = 57769
const INLINE = 57770
const INFILE = 57771
const TERMINATED = 57772
const OPTIONALLY = 57773
const ENCLOSED = 57774
const ESCAPED = 57775
const STARTING = 57776
const LINES = 57777
const ROWS = 57778
const IMPORT = 57779
const DISCARD = 57780
const JSONTYPE = 57781
const MODUMP = 57782
const OVER = 57783
const PRECEDING = 57784
const FOLLOWING = 57785
const GROUPS = 57786
const DATABASES = 57787
const TABLES = 57788
const SEQUENCES = 57789
const EXTENDED = 57790
const FULL = 57791
const PROCESSLIST = 57792
const FIELDS = 57793
const COLUMNS = 57794
const OPEN = 57795
const ERRORS = 57796
const WARNINGS = 57797
const INDEXES = 57798
const SCHEMAS = 57799
const NODE = 57800
const LOCKS = 57801
const ROLES = 57802
const TABLE_NUMBER = 57803
const COLUMN_NUMBER = 57804
const TABLE_VALUES = 57805
const TABLE_SIZE = 57806
const NAMES = 57807
const GLOBAL = 57808
const PERSIST = 57809
const SESSION = 57810
const ISOLATION = 57811
const LEVEL = 57812
const READ = 57813
const WRITE = 57814
const ONLY = 57815
const REPEATABLE = 57816
const COMMITTED = 57817
const UNCOMMITTED = 57818
const SERIALIZABLE = 57819
const LOCAL = 57820
const EVENTS = 57821
const PLUGINS = 57822
const CURRENT_TIMESTAMP = 57823
const DATABASE = 57824
const CURRENT_TIME = 57825
const LOCALTIME = 57826
const LOCALTIMESTAMP = 57827
const UTC_DATE = 57828
const UTC_TIME = 57829
const UTC_TIMESTAMP = 57830
const REPLACE = 57831
const CONVERT = 57832
const SEPARATOR = 57833
const TIMESTAMPDIFF = 57834
const CURRENT_DATE = 57835
const CURRENT_USER = 57836
const CURRENT_ROLE = 57837
const SECOND_MICROSECOND = 57838
const MINUTE_MICROSECOND = 57839
const MINUTE_SECOND = 57840
const HOUR_MICROSECOND = 57841
const HOUR_SECOND = 57842
const HOUR_MINUTE = 57843
const DAY_MICROSECOND = 57844
const DAY_SECOND = 57845
const DAY_MINUTE = 57846
const DAY_HOUR = 57847
const YEAR_MONTH = 57848
const SQL_TSI_HOUR = 57849
const SQL_TSI_DAY = 57850
const SQL_TSI_WEEK = 57851
const SQL_TSI_MONTH = 57852
const SQL_TSI_QUARTER = 57853
const SQL_TSI_YEAR = 57854
const SQL_TSI_SECOND = 57855
const SQL_TSI_MINUTE = 57856
const RECURSIVE = 57857
const CONFIG = 57858
const DRAINER = 57859
const SOURCE = 57860
const STREAM = 57861
const HEADERS = 57862
const CONNECTOR = 57863
const CONNECTORS = 57864
const DAEMON = 57865
const PAUSE = 57866
const CANCEL = 57867
const TASK = 57868
const RESUME = 57869
const MATCH = 57870
const AGAINST = 57871
const BOOLEAN = 57872
const LANGUAGE = 57873
const WITH = 57874
const QUERY = 57875
const EXPANSION = 57876
const WITHOUT = 57877
const VALIDATION = 57878
const UPGRADE = 57879
const RETRY = 57880
const ADDDATE = 57881
const BIT_AND = 57882
const BIT_OR = 57883
const BIT_XOR = 57884
const CAST = 57885
const COUNT = 57886
const APPROX_COUNT = 57887
const APPROX_COUNT_DISTINCT = 57888
const SERIAL_EXTRACT = 57889
const APPROX_PERCENTILE = 57890
const CURDATE = 57891
const CURTIME = 57892
const DATE_ADD = 57893
const DATE_SUB = 57894
const EXTRACT = 57895
const GROUP_CONCAT = 57896
const MAX = 57897
const MID = 57898
const MIN = 57899
const NOW = 57900
const POSITION = 57901
const SESSION_USER = 57902
const STD = 57903
const STDDEV = 57904
const MEDIAN = 57905
const CLUSTER_CENTERS = 57906
const KMEANS = 57907
const STDDEV_POP = 57908
const STDDEV_SAMP = 57909
const SUBDATE = 57910
const SUBSTR = 57911
const SUBSTRING = 57912
const SUM = 57913
const SYSDATE = 57914
const SYSTEM_USER = 57915
const TRANSLATE = 57916
const TRIM = 57917
const VARIANCE = 57918
const VAR_POP = 57919
const VAR_SAMP = 57920
const AVG = 57921
const RANK = 57922
const ROW_NUMBER = 57923
const DENSE_RANK = 57924
const BIT_CAST = 57925
const BITMAP_BIT_POSITION = 57926
const BITMAP_BUCKET_NUMBER = 57927
const BITMAP_COUNT = 57928
const BITMAP_CONSTRUCT_AGG = 57929
const BITMAP_OR_AGG = 57930
const NEXTVAL = 57931
const SETVAL = 57932
const CURRVAL = 57933
const LASTVAL = 57934
const ARROW = 57935
const ROW = 57936
const OUTFILE = 57937
const HEADER = 57938
const MAX_FILE_SIZE = 57939
const FORCE_QUOTE = 57940
const PARALLEL = 57941
const STRICT = 57942
const UNUSED = 57943
const BINDINGS = 57944
const DO = 57945
const DECLARE = 57946
const LOOP = 57947
const WHILE = 57948
const LEAVE = 57949
const ITERATE = 57950
const UNTIL = 57951
const CALL = 57952
const PREV = 57953
const SLIDING = 57954
const FILL = 57955
const SPBEGIN = 57956
const BACKEND = 57957
const SERVERS = 57958
const HANDLER = 57959
const PERCENT = 57960
const SAMPLE = 57961
const MO_TS = 57962
const PITR = 57963
const CDC = 57964
const GROUPING = 57965
const SETS = 57966
const CUBE = 57967
const ROLLUP = 57968
const LOGSERVICE = 57969
const REPLICAS = 57970
const STORES = 57971
const SETTINGS = 57972
const KILL = 57973
const BACKUP = 57974
const FILESYSTEM = 57975
const PARALLELISM = 57976
const RESTORE = 57977
const QUERY_RESULT = 57978

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12768

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 141,
	11, 800,
	22, 800,
	-2, 793,
	-1, 166,
	245, 1228,
	247, 1127,
	-2, 1174,
	-1, 193,
	43, 623,
	247, 623,
	274, 630,
	275, 630,
	473, 623,
	-2, 658,
	-1, 233,
	657, 1999,
	-2, 527,
	-1, 541,
	657, 2122,
	-2, 407,
	-1, 599,
	657, 2181,
	-2, 405,
	-1, 600,
	657, 2182,
	-2, 406,
	-1, 601,
	657, 2183,
	-2, 408,
	-1, 741,
	326, 176,
	445, 176,
	446, 176,
	-2, 1901,
	-1, 808,
	85, 1686,
	-2, 2058,
	-1, 809,
	85, 1705,
	-2, 2029,
	-1, 813,
	85, 1706,
	-2, 2057,
	-1, 847,
	85, 1613,
	-2, 2261,
	-1, 848,
	85, 1614,
	-2, 2260,
	-1, 849,
	85, 1615,
	-2, 2250,
	-1, 850,
	85, 2222,
	-2, 2243,
	-1, 851,
	85, 2223,
	-2, 2244,
	-1, 852,
	85, 2224,
	-2, 2252,
	-1, 853,
	85, 2225,
	-2, 2232,
	-1, 854,
	85, 2226,
	-2, 2241,
	-1, 855,
	85, 2227,
	-2, 2253,
	-1, 856,
	85, 2228,
	-2, 2254,
	-1, 857,
	85, 2229,
	-2, 2259,
	-1, 858,
	85, 2230,
	-2, 2264,
	-1, 859,
	85, 2231,
	-2, 2265,
	-1, 860,
	85, 1682,
	-2, 2096,
	-1, 861,
	85, 1683,
	-2, 1885,
	-1, 862,
	85, 1684,
	-2, 2105,
	-1, 863,
	85, 1685,
	-2, 1894,
	-1, 865,
	85, 1688,
	-2, 1902,
	-1, 867,
	85, 1690,
	-2, 2129,
	-1, 869,
	85, 1693,
	-2, 1921,
	-1, 871,
	85, 1695,
	-2, 2141,
	-1, 872,
	85, 1696,
	-2, 2140,
	-1, 873,
	85, 1697,
	-2, 1966,
	-1, 874,
	85, 1698,
	-2, 2053,
	-1, 877,
	85, 1701,
	-2, 2152,
	-1, 879,
	85, 1703,
	-2, 2155,
	-1, 880,
	85, 1704,
	-2, 2157,
	-1, 881,
	85, 1707,
	-2, 2165,
	-1, 882,
	85, 1708,
	-2, 2038,
	-1, 883,
	85, 1709,
	-2, 2083,
	-1, 884,
	85, 1710,
	-2, 2048,
	-1, 885,
	85, 1711,
	-2, 2073,
	-1, 896,
	85, 1591,
	-2, 2255,
	-1, 897,
	85, 1592,
	-2, 2256,
	-1, 898,
	85, 1593,
	-2, 2257,
	-1, 1002,
	468, 658,
	469, 658,
	-2, 624,
	-1, 1053,
	127, 1885,
	138, 1885,
	158, 1885,
	-2, 1859,
	-1, 1175,
	22, 827,
	-2, 776,
	-1, 1285,
	11, 800,
	22, 800,
	-2, 1468,
	-1, 1369,
	22, 827,
	-2, 776,
	-1, 1587,
	1, 2221,
	6, 2221,
	7, 2221,
	8, 2221,
	9, 2221,
	11, 2221,
	17, 2221,
	18, 2221,
	19, 2221,
	20, 2221,
	22, 2221,
	24, 2221,
	35, 2221,
	39, 2221,
	82, 2221,
	86, 2221,
	113, 2221,
	114, 2221,
	115, 2221,
	116, 2221,
	119, 2221,
	121, 2221,
	123, 2221,
	124, 2221,
	125, 2221,
	127, 2221,
	128, 2221,
	129, 2221,
	130, 2221,
	131, 2221,
	132, 2221,
	133, 2221,
	134, 2221,
	135, 2221,
	136, 2221,
	137, 2221,
	139, 2221,
	140, 2221,
	141, 2221,
	142, 2221,
	143, 2221,
	147, 2221,
	148, 2221,
	149, 2221,
	151, 2221,
	154, 2221,
	158, 2221,
	159, 2221,
	549, 2221,
	626, 2221,
	654, 2221,
	-2, 866,
	-1, 1588,
	1, 2160,
	6, 2160,
	7, 2160,
	8, 2160,
	9, 2160,
	11, 2160,
	17, 2160,
	18, 2160,
	19, 2160,
	20, 2160,
	22, 2160,
	24, 2160,
	35, 2160,
	39, 2160,
	82, 2160,
	86, 2160,
	113, 2160,
	114, 2160,
	115, 2160,
	116, 2160,
	119, 2160,
	121, 2160,
	123, 2160,
	124, 2160,
	125, 2160,
	127, 2160,
	128, 2160,
	129, 2160,
	130, 2160,
	131, 2160,
	132, 2160,
	133, 2160,
	134, 2160,
	135, 2160,
	136, 2160,
	137, 2160,
	139, 2160,
	140, 2160,
	141, 2160,
	142, 2160,
	143, 2160,
	147, 2160,
	148, 2160,
	149, 2160,
	151, 2160,
	154, 2160,
	158, 2160,
	159, 2160,
	549, 2160,
	626, 2160,
	654, 2160,
	-2, 870,
	-1, 1730,
	85, 1758,
	-2, 2055,
	-1, 1731,
	85, 1759,
	-2, 2056,
	-1, 1906,
	86, 999,
	-2, 1005,
	-1, 2359,
	110, 1166,
	154, 1166,
	194, 1166,
	197, 1166,
	287, 1166,
	-2, 1159,
	-1, 2520,
	11, 800,
	22, 800,
	-2, 940,
	-1, 2554,
	86, 1845,
	159, 1845,
	-2, 2040,
	-1, 2555,
	86, 1845,
	159, 1845,
	-2, 2039,
	-1, 2556,
	86, 1821,
	159, 1821,
	-2, 2026,
	-1, 2557,
	86, 1822,
	159, 1822,
	-2, 2031,
	-1, 2558,
	86, 1823,
	159, 1823,
	-2, 1954,
	-1, 2559,
	86, 1824,
	159, 1824,
	-2, 1948,
	-1, 2560,
	86, 1825,
	159, 1825,
	-2, 1875,
	-1, 2561,
	86, 1826,
	159, 1826,
	-2, 2028,
	-1, 2562,
	86, 1827,
	159, 1827,
	-2, 1952,
	-1, 2563,
	86, 1828,
	159, 1828,
	-2, 1947,
	-1, 2564,
	86, 1829,
	159, 1829,
	-2, 1935,
	-1, 2565,
	86, 1845,
	159, 1845,
	-2, 1936,
	-1, 2566,
	86, 1845,
	159, 1845,
	-2, 1937,
	-1, 2568,
	86, 1834,
	159, 1834,
	-2, 2073,
	-1, 2569,
	86, 1811,
	159, 1811,
	-2, 2058,
	-1, 2570,
	86, 1843,
	159, 1843,
	-2, 2029,
	-1, 2571,
	86, 1843,
	159, 1843,
	-2, 2057,
	-1, 2572,
	86, 1843,
	159, 1843,
	-2, 1903,
	-1, 2573,
	86, 1841,
	159, 1841,
	-2, 2048,
	-1, 2574,
	86, 1838,
	159, 1838,
	-2, 1926,
	-1, 2575,
	85, 1792,
	86, 1792,
	159, 1792,
	403, 1792,
	404, 1792,
	405, 1792,
	-2, 1874,
	-1, 2576,
	85, 1793,
	86, 1793,
	159, 1793,
	403, 1793,
	404, 1793,
	405, 1793,
	-2, 1876,
	-1, 2577,
	85, 1794,
	86, 1794,
	159, 1794,
	403, 1794,
	404, 1794,
	405, 1794,
	-2, 2101,
	-1, 2578,
	85, 1796,
	86, 1796,
	159, 1796,
	403, 1796,
	404, 1796,
	405, 1796,
	-2, 2030,
	-1, 2579,
	85, 1798,
	86, 1798,
	159, 1798,
	403, 1798,
	404, 1798,
	405, 1798,
	-2, 2009,
	-1, 2580,
	85, 1800,
	86, 1800,
	159, 1800,
	403, 1800,
	404, 1800,
	405, 1800,
	-2, 1953,
	-1, 2581,
	85, 1802,
	86, 1802,
	159, 1802,
	403, 1802,
	404, 1802,
	405, 1802,
	-2, 1931,
	-1, 2582,
	85, 1803,
	86, 1803,
	159, 1803,
	403, 1803,
	404, 1803,
	405, 1803,
	-2, 1932,
	-1, 2583,
	85, 1805,
	86, 1805,
	159, 1805,
	403, 1805,
	404, 1805,
	405, 1805,
	-2, 1873,
	-1, 2584,
	86, 1848,
	159, 1848,
	403, 1848,
	404, 1848,
	405, 1848,
	-2, 1908,
	-1, 2585,
	86, 1848,
	159, 1848,
	403, 1848,
	404, 1848,
	405, 1848,
	-2, 1922,
	-1, 2586,
	86, 1851,
	159, 1851,
	403, 1851,
	404, 1851,
	405, 1851,
	-2, 1904,
	-1, 2587,
	86, 1851,
	159, 1851,
	403, 1851,
	404, 1851,
	405, 1851,
	-2, 1969,
	-1, 2588,
	86, 1848,
	159, 1848,
	403, 1848,
	404, 1848,
	405, 1848,
	-2, 1991,
	-1, 2805,
	110, 1166,
	154, 1166,
	194, 1166,
	197, 1166,
	287, 1166,
	-2, 1160,
	-1, 2823,
	83, 720,
	159, 720,
	-2, 1344,
	-1, 3247,
	197, 1166,
	311, 1431,
	-2, 1403,
	-1, 3429,
	110, 1166,
	154, 1166,
	194, 1166,
	197, 1166,
	-2, 1284,
	-1, 3431,
	110, 1166,
	154, 1166,
	194, 1166,
	197, 1166,
	-2, 1284,
	-1, 3443,
	83, 720,
	159, 720,
	-2, 1344,
	-1, 3464,
	197, 1166,
	311, 1431,
	-2, 1404,
	-1, 3616,
	110, 1166,
	154, 1166,
	194, 1166,
	197, 1166,
	-2, 1285,
	-1, 3644,
	86, 1246,
	159, 1246,
	-2, 1166,
	-1, 3788,
	86, 1246,
	159, 1246,
	-2, 1166,
	-1, 3952,
	86, 1250,
	159, 1250,
	-2, 1166,
	-1, 4003,
	86, 1251,
	159, 1251,
	-2, 1166,
}

const yyPrivate = 57344

const yyLast = 54995

var yyAct = [...]int{
	775, 751, 4053, 777, 4025, 2853, 222, 4045, 1632, 3956,
	1710, 3449, 3962, 3955, 3548, 3963, 3854, 3266, 3788, 3233,
	3877, 760, 3835, 3912, 3672, 3341, 3478, 1991, 3766, 1706,
	2847, 3736, 3826, 753, 3342, 3787, 1321, 3604, 3855, 1770,
	1473, 3705, 805, 1541, 1052, 3757, 641, 1176, 3411, 2850,
	3836, 3552, 3838, 1479, 68, 1939, 3543, 3416, 1757, 2406,
	37, 3465, 3242, 659, 1170, 665, 665, 3625, 2826, 3613,
	3586, 665, 683, 692, 2765, 1713, 692, 3204, 3190, 3618,
	3432, 3166, 207, 2966, 2964, 2965, 3339, 2102, 2089, 3403,
	2942, 3193, 3262, 2876, 3434, 3244, 3251, 2552, 2961, 3383,
	2125, 3034, 704, 2200, 1633, 2051, 2086, 3327, 2678, 2514,
	2550, 2409, 2993, 3306, 1775, 2794, 3173, 2953, 2370, 1951,
	2158, 1166, 3171, 1534, 3167, 2643, 700, 3250, 3213, 3164,
	2806, 3141, 689, 2338, 748, 2196, 3081, 2439, 743, 140,
	36, 2314, 1621, 2183, 3007, 2622, 2313, 3169, 3168, 2167,
	2166, 2604, 933, 1868, 2131, 1617, 2159, 2082, 2515, 1439,
	2195, 1625, 2055, 3017, 2052, 1622, 2783, 2498, 1610, 974,
	2778, 2858, 2878, 1981, 2407, 2493, 6, 2818, 218, 8,
	217, 7, 2359, 2369, 1915, 2548, 1771, 1704, 2197, 1406,
	1653, 1114, 752, 1581, 1550, 1519, 2402, 658, 641, 1513,
	742, 1764, 2350, 2715, 2353, 1695, 1192, 761, 2165, 1482,
	1744, 1950, 27, 2230, 2162, 1636, 2147, 1591, 2121, 1911,
	1046, 1462, 222, 697, 222, 1703, 1105, 1106, 2522, 1518,
	1914, 1515, 973, 665, 674, 2494, 1045, 208, 1011, 750,
	900, 1776, 707, 744, 114, 1572, 15, 706, 1086, 24,
	1474, 1580, 950, 16, 2714, 204, 1061, 1458, 691, 17,
	1445, 1391, 10, 971, 14, 1709, 640, 956, 1322, 703,
	997, 902, 2204, 661, 1367, 23, 200, 903, 2524, 3845,
	3754, 2751, 1102, 33, 688, 1253, 1254, 1255, 1252, 1253,
	1254, 1255, 1252, 1253, 1254, 1255, 1252, 2751, 2751, 1772,
	677, 3446, 3220, 3051, 1101, 3050, 1103, 2214, 1171, 3579,
	3419, 1172, 3334, 2666, 2610, 2608, 1483, 2605, 687, 2607,
	1079, 1881, 1598, 1594, 1097, 684, 1098, 206, 660, 2312,
	1386, 1442, 1443, 1444, 695, 1517, 686, 3813, 922, 666,
	744, 1058, 1060, 1031, 1360, 670, 920, 1098, 2318, 3151,
	1098, 1171, 2322, 1389, 1882, 685, 1645, 3134, 3131, 3136,
	3133, 4037, 1496, 1875, 1382, 1596, 1253, 1254, 1255, 1252,
	205, 64, 196, 167, 1253, 1254, 1255, 1252, 1644, 3541,
	3030, 3028, 2136, 1096, 3821, 8, 3712, 7, 197, 3706,
	2743, 2741, 1080, 3544, 3340, 188, 2180, 1316, 3840, 198,
	2161, 901, 3110, 2153, 2447, 4059, 3834, 3773, 912, 4034,
	3938, 3720, 1397, 1251, 3558, 205, 1215, 3991, 139, 3587,
	3433, 3591, 2652, 2361, 205, 205, 64, 196, 167, 205,
	64, 196, 167, 125, 2745, 2201, 1631, 921, 3832, 2660,
	205, 3741, 201, 3718, 2360, 919, 2696, 3888, 922, 1558,
	1396, 3774, 1395, 1394, 205, 64, 196, 167, 1392, 920,
	1062, 702, 2812, 3053, 3108, 1414, 1431, 1074, 1069, 1064,
	1068, 1072, 1056, 1398, 2212, 1884, 205, 205, 1057, 2959,
	2354, 205, 205, 64, 196, 167, 205, 201, 2542, 749,
	1250, 1026, 1024, 1662, 1025, 1077, 201, 201, 2543, 1067,
	2099, 201, 3000, 3743, 1640, 2065, 205, 64, 196, 167,
	2623, 964, 2810, 965, 1520, 205, 1522, 913, 1492, 147,
	148, 1493, 149, 150, 139, 3042, 201, 151, 1696, 139,
	152, 1700, 1676, 1651, 1637, 205, 64, 196, 167, 3135,
	3132, 2767, 3001, 3002, 917, 1020, 1187, 1965, 201, 201,
	1075, 1712, 945, 201, 201, 1699, 2066, 2067, 1639, 1078,
	1248, 2529, 2813, 1648, 2528, 3568, 959, 2530, 955, 1243,
	1184, 1893, 1894, 3935, 2780, 1480, 1481, 1223, 201, 2768,
	1225, 1065, 1032, 3843, 2781, 1470, 1055, 1650, 1054, 1230,
	3966, 3967, 1231, 166, 194, 203, 195, 123, 2301, 1413,
	3843, 3926, 3990, 3237, 1028, 1076, 3842, 201, 1226, 1495,
	1597, 1595, 3842, 3925, 3841, 3924, 193, 187, 186, 3235,
	1233, 3841, 3931, 70, 936, 891, 3824, 890, 892, 893,
	1478, 894, 895, 2779, 1477, 1480, 1481, 2647, 4029, 4030,
	3914, 1701, 3343, 3917, 2746, 1066, 3914, 3709, 3827, 3828,
	3829, 3830, 1190, 3036, 3035, 3037, 3940, 3941, 3343, 1181,
	2083, 1716, 3851, 665, 665, 1698, 2216, 2897, 1030, 3936,
	3937, 2786, 3356, 2073, 665, 1180, 3184, 166, 1685, 203,
	1195, 1198, 962, 2488, 189, 190, 191, 3404, 2208, 1691,
	1219, 3596, 3186, 3409, 692, 692, 2482, 665, 2349, 961,
	193, 954, 1228, 1195, 1198, 3567, 3071, 2954, 2144, 2770,
	958, 957, 3933, 3569, 3745, 3746, 1221, 199, 1246, 1247,
	2769, 3069, 1073, 1604, 1603, 3490, 1245, 939, 1224, 1227,
	2213, 946, 3181, 3182, 2657, 192, 1061, 1108, 135, 689,
	689, 689, 192, 1506, 136, 1029, 2208, 3965, 3183, 2445,
	1218, 953, 1415, 1385, 1220, 2097, 2098, 3542, 1070, 2744,
	1293, 1071, 3029, 2485, 2486, 2948, 1229, 2484, 3750, 3593,
	963, 2077, 1494, 2545, 3180, 952, 3844, 3753, 3359, 951,
	1715, 1714, 1697, 1241, 1242, 938, 3387, 2491, 1173, 1468,
	2191, 944, 3191, 1240, 3075, 2750, 2763, 657, 1172, 1172,
	3505, 137, 3502, 3699, 1210, 1172, 2202, 1180, 3265, 1061,
	3998, 3239, 2202, 942, 63, 3263, 3264, 2319, 1722, 1725,
	1726, 1058, 1060, 1883, 1646, 2202, 3559, 738, 3052, 1723,
	740, 1222, 3049, 3202, 2764, 739, 2235, 2819, 3214, 3870,
	1325, 2203, 1098, 1232, 1098, 1098, 1098, 915, 1172, 3778,
	3865, 962, 1189, 1098, 1098, 3772, 690, 2944, 3770, 1287,
	690, 1081, 1063, 65, 3939, 2957, 2219, 2221, 2222, 2477,
	694, 2215, 693, 2606, 2356, 3495, 3142, 943, 3856, 1197,
	1196, 1599, 3872, 3450, 1027, 916, 3878, 964, 3234, 965,
	3178, 688, 688, 688, 1058, 1060, 2852, 3457, 145, 202,
	3700, 146, 1197, 1196, 2334, 3192, 168, 2848, 2849, 1186,
	2852, 61, 3728, 690, 3729, 3719, 1457, 1388, 65, 1390,
	3268, 3740, 65, 901, 3396, 687, 687, 687, 3506, 701,
	3723, 1402, 684, 684, 684, 1405, 1168, 690, 3744, 1411,
	659, 1207, 1174, 686, 686, 686, 1175, 1365, 1057, 3592,
	1370, 168, 1203, 1204, 960, 3394, 2742, 1885, 1199, 3155,
	168, 168, 685, 685, 685, 168, 690, 2661, 3731, 1393,
	1294, 1209, 3192, 974, 1179, 65, 168, 138, 45, 1183,
	1185, 1188, 1686, 202, 62, 1687, 1480, 1481, 5, 2785,
	168, 2480, 3395, 949, 3850, 1289, 1290, 1291, 1292, 65,
	3730, 2084, 1480, 1481, 1235, 142, 143, 1236, 3663, 144,
	3187, 3779, 168, 168, 4065, 1469, 2412, 168, 168, 3728,
	3771, 3729, 168, 1796, 2955, 3072, 918, 665, 65, 2457,
	1508, 2545, 2456, 3747, 665, 1238, 3652, 1476, 641, 641,
	3555, 3932, 168, 3240, 2412, 2415, 2789, 2790, 641, 641,
	1201, 168, 1545, 1545, 2792, 665, 1021, 2898, 1455, 2899,
	2900, 2788, 2478, 2479, 1530, 1724, 3597, 2425, 1529, 1208,
	3658, 168, 2074, 2405, 2428, 3731, 692, 1573, 659, 1416,
	1454, 1543, 1543, 1584, 1584, 3879, 1337, 1338, 1692, 1453,
	4048, 2926, 3792, 937, 935, 3179, 1547, 1472, 1471, 222,
	3200, 3758, 3263, 3264, 1552, 3243, 1326, 3730, 641, 1167,
	3130, 2448, 3954, 2220, 3435, 3267, 2405, 1234, 1449, 3673,
	3674, 3675, 3679, 3677, 3678, 3676, 1408, 1409, 3539, 1284,
	1407, 2427, 1418, 1419, 1420, 1421, 1422, 1412, 1424, 3346,
	1023, 702, 3911, 1022, 1430, 1516, 963, 3259, 3146, 1507,
	2798, 2801, 2802, 2803, 2799, 2800, 1239, 2411, 2422, 1371,
	1629, 2653, 2413, 927, 1215, 1634, 2995, 2997, 2534, 2443,
	2076, 2205, 1643, 1539, 1540, 2072, 2426, 1369, 3012, 3013,
	2416, 1237, 3297, 2049, 1404, 2411, 2405, 2410, 2415, 2408,
	2413, 1792, 1423, 2333, 3074, 1429, 1428, 1427, 1789, 1426,
	2756, 1674, 1791, 1788, 1790, 1794, 1795, 1887, 1033, 1417,
	1793, 696, 1464, 1465, 931, 1545, 2414, 1545, 1180, 929,
	928, 1061, 1652, 3397, 3384, 3791, 3724, 1638, 1061, 3665,
	3725, 4049, 3260, 3201, 1649, 2895, 1438, 1441, 2231, 1448,
	968, 969, 970, 1436, 2414, 966, 1456, 689, 2217, 2218,
	689, 689, 2760, 1466, 1214, 2326, 1605, 1401, 1524, 1526,
	1896, 1485, 1486, 1684, 1488, 1489, 1897, 1490, 1537, 1538,
	1484, 1497, 1498, 1487, 934, 1574, 1669, 1670, 3083, 3082,
	1021, 2917, 2918, 1528, 1608, 1545, 1611, 1612, 2328, 2327,
	1642, 3654, 1619, 1620, 3953, 3653, 930, 3577, 1613, 1614,
	1399, 1400, 1180, 1774, 3148, 1459, 1463, 1463, 1463, 3659,
	3660, 2325, 1895, 1553, 1758, 1805, 1806, 1823, 1809, 1627,
	923, 1624, 1565, 2416, 1628, 1559, 1824, 2469, 1600, 927,
	1459, 1459, 1586, 3724, 1571, 1585, 1589, 3837, 670, 1831,
	2996, 1833, 924, 1834, 1835, 1836, 2927, 2929, 2930, 2931,
	2928, 3626, 1708, 2824, 1799, 1800, 1801, 1802, 1803, 1804,
	1797, 1798, 4067, 1450, 1023, 4046, 4047, 1022, 2341, 1673,
	2352, 2124, 2421, 1450, 3347, 3921, 2419, 1251, 1672, 3303,
	926, 2545, 1177, 3299, 1180, 929, 928, 1177, 1215, 1694,
	1886, 2342, 2343, 1727, 1889, 4061, 1891, 2625, 1689, 688,
	3400, 3358, 688, 688, 1898, 1900, 1866, 1901, 2916, 1903,
	1904, 1084, 1087, 1088, 1573, 1682, 1813, 1814, 1815, 1912,
	1545, 1917, 1918, 1808, 1920, 1508, 665, 1655, 2757, 1829,
	2306, 665, 1830, 687, 1545, 1888, 687, 687, 974, 3261,
	684, 1940, 1034, 684, 684, 1095, 2244, 1683, 1092, 1843,
	1844, 686, 1681, 1545, 686, 686, 1679, 1869, 1707, 1508,
	1660, 1702, 1680, 1663, 683, 1677, 1822, 1678, 2210, 1865,
	685, 1021, 2269, 685, 685, 2268, 1253, 1254, 1255, 1252,
	1705, 3219, 1693, 4055, 1964, 2652, 1746, 1661, 2351, 3272,
	1664, 1665, 2512, 1971, 1971, 2825, 1508, 3270, 1508, 1508,
	3140, 3138, 665, 665, 2513, 2038, 1912, 2042, 2513, 4043,
	1545, 2046, 2047, 2122, 3303, 2442, 2062, 1711, 641, 4005,
	1753, 1754, 2243, 3977, 1212, 1919, 1253, 1254, 1255, 1252,
	1251, 1215, 641, 3015, 1545, 1366, 2772, 778, 788, 3974,
	2747, 1968, 2642, 2630, 1921, 2201, 2064, 779, 1251, 780,
	784, 787, 783, 781, 782, 1023, 4056, 2825, 1022, 1213,
	1872, 665, 1912, 1545, 2398, 2107, 3968, 665, 665, 665,
	700, 700, 3106, 905, 906, 907, 908, 2117, 2118, 2119,
	2120, 1837, 4006, 1993, 2126, 905, 906, 907, 908, 745,
	3950, 2040, 4006, 2100, 222, 2311, 3978, 222, 222, 2686,
	222, 1213, 785, 4074, 1908, 1909, 1910, 1867, 1089, 1090,
	1091, 1094, 3975, 1093, 2305, 1974, 1923, 1924, 1925, 1926,
	2513, 1873, 1253, 1254, 1255, 1252, 2304, 3905, 1158, 1154,
	1155, 1156, 1157, 2078, 2691, 786, 2690, 2689, 2687, 2245,
	1823, 1823, 2169, 2276, 3904, 2192, 2092, 2093, 2069, 3898,
	2071, 1823, 1823, 1556, 2109, 2110, 2111, 3873, 2185, 1907,
	2095, 2090, 2091, 3951, 3861, 2048, 2106, 1936, 2241, 2085,
	1937, 1437, 1952, 1761, 1954, 1955, 2135, 2412, 2415, 2138,
	2139, 3811, 2141, 1877, 1973, 1916, 1942, 1943, 1961, 1957,
	1531, 1940, 4057, 2179, 1061, 1545, 2199, 1061, 1953, 1932,
	1251, 1962, 3446, 1638, 3810, 1061, 2688, 3019, 2171, 1975,
	1976, 1947, 3805, 3804, 3803, 1948, 1949, 1251, 1945, 3802,
	2827, 3408, 2245, 2655, 910, 2039, 3782, 689, 1970, 1972,
	2210, 2654, 1958, 1959, 2385, 2646, 910, 3862, 2063, 3781,
	2044, 2392, 3756, 3511, 2050, 2264, 2193, 2249, 2190, 2129,
	2115, 1657, 1969, 2068, 3812, 2070, 1732, 1733, 1734, 1735,
	1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 2079, 2175,
	1459, 1302, 1755, 1756, 1200, 2045, 3459, 2374, 3425, 1058,
	1060, 2104, 3376, 3372, 1463, 2245, 2245, 2245, 2105, 2164,
	1058, 1060, 2245, 2112, 2113, 3280, 1463, 1164, 2990, 2210,
	2164, 1159, 1061, 2733, 2130, 2721, 3689, 2713, 2132, 1099,
	1100, 1268, 2210, 2416, 1104, 2245, 2545, 2668, 2411, 2405,
	2410, 1832, 2408, 2413, 1253, 1254, 1255, 1252, 1705, 2650,
	2638, 2632, 2627, 2149, 2400, 1266, 1276, 1277, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1268, 2181, 2692, 2693, 3460,
	2619, 3426, 2224, 3509, 1284, 3377, 3373, 2617, 2170, 2615,
	2178, 1940, 2613, 3866, 2094, 2176, 2373, 2307, 3281, 2283,
	2384, 2513, 2282, 3224, 2189, 3066, 2374, 2414, 1251, 688,
	1251, 1535, 925, 2316, 2317, 1460, 2320, 1058, 1060, 2323,
	1251, 2267, 1536, 2258, 4068, 4033, 2257, 2256, 2246, 2194,
	2329, 2440, 2374, 2628, 2633, 2628, 743, 3867, 3332, 665,
	665, 665, 3846, 687, 2207, 2247, 2299, 3755, 3716, 2209,
	684, 3786, 3656, 2620, 665, 665, 665, 665, 1812, 1811,
	2618, 686, 2614, 1666, 2605, 2614, 2223, 2371, 2187, 2374,
	2306, 3655, 1251, 2277, 2278, 1251, 2280, 2377, 1508, 3627,
	685, 3641, 3600, 2287, 1501, 1502, 1746, 1504, 1505, 2225,
	1509, 1510, 1511, 3215, 1251, 2237, 1251, 2188, 2232, 1251,
	1251, 2245, 1812, 1811, 1508, 1267, 1266, 1276, 1277, 1269,
	1270, 1271, 1272, 1273, 1274, 1275, 1268, 1491, 1533, 2226,
	2227, 2434, 2210, 3628, 1560, 1561, 1562, 1563, 1564, 3418,
	1566, 1567, 1568, 1569, 1570, 1461, 1667, 3438, 1576, 1577,
	1578, 1579, 3436, 1267, 1266, 1276, 1277, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1268, 1271, 1272, 1273, 1274, 1275,
	1268, 2389, 2271, 932, 3304, 2391, 1446, 2393, 2441, 3295,
	1447, 3287, 1849, 3216, 2671, 3282, 3195, 2951, 2950, 665,
	1971, 3439, 1253, 1254, 1255, 1252, 3437, 2796, 2517, 2517,
	2062, 2517, 2752, 3335, 2308, 2300, 2302, 2303, 1267, 1266,
	1276, 1277, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268,
	2665, 641, 641, 2631, 1752, 2536, 1842, 3217, 2174, 1180,
	1446, 1532, 2675, 2394, 1447, 1545, 665, 2173, 2172, 1451,
	1749, 1751, 1748, 1433, 1750, 1432, 2335, 1182, 2599, 665,
	1253, 1254, 1255, 1252, 1061, 1180, 2589, 659, 2133, 1765,
	3021, 2609, 1325, 1584, 2540, 2062, 1902, 1765, 2594, 2238,
	2596, 3923, 2404, 2403, 222, 1592, 2446, 2133, 2397, 2449,
	2450, 2451, 2452, 2453, 2454, 2455, 1255, 1252, 2458, 2459,
	2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2378,
	2470, 2471, 2472, 2473, 2474, 2521, 2475, 2381, 2519, 1252,
	2523, 3668, 2387, 3667, 2635, 2388, 2531, 3038, 2532, 2887,
	3959, 2885, 2417, 2418, 2864, 2423, 2862, 2525, 3601, 3602,
	2390, 2648, 3647, 4039, 4064, 2199, 2547, 2537, 2538, 1058,
	1060, 2735, 1545, 2736, 1545, 3099, 1545, 1253, 1254, 1255,
	1252, 1180, 1253, 1254, 1255, 1252, 2600, 4038, 1304, 2667,
	3981, 3333, 2386, 1253, 1254, 1255, 1252, 3594, 2795, 3406,
	2593, 1303, 2677, 2658, 1253, 1254, 1255, 1252, 2938, 3949,
	2936, 2228, 2229, 2601, 3948, 1545, 1180, 2487, 2492, 3412,
	2699, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268, 4063,
	2526, 1253, 1254, 1255, 1252, 2706, 3868, 3098, 2766, 1592,
	1545, 2644, 2645, 3807, 1543, 1276, 1277, 1269, 1270, 1271,
	1272, 1273, 1274, 1275, 1268, 1463, 2934, 3595, 2694, 3407,
	2541, 2544, 3795, 3785, 1253, 1254, 1255, 1252, 2937, 1543,
	2935, 1524, 1526, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
	1257, 2260, 2923, 2707, 2590, 3775, 2592, 3707, 3630, 2754,
	2755, 3629, 3451, 2758, 1827, 2710, 2711, 3440, 1253, 1254,
	1255, 1252, 1253, 1254, 1255, 1252, 1256, 1593, 2679, 1828,
	2679, 1180, 3405, 3283, 1286, 1180, 2933, 1253, 1254, 1255,
	1252, 2683, 1545, 1296, 3185, 1508, 3062, 3033, 3032, 2921,
	2920, 2042, 2664, 2919, 2911, 2905, 2659, 2904, 2673, 2823,
	2640, 3573, 2922, 2697, 2903, 2829, 3085, 2902, 2748, 1305,
	2259, 2621, 2533, 2651, 2310, 2649, 3417, 2152, 1326, 2656,
	2151, 2150, 2705, 2839, 2146, 2739, 2145, 2101, 1253, 1254,
	1255, 1252, 1892, 1180, 1890, 1658, 1384, 1253, 1254, 1255,
	1252, 2861, 3172, 1162, 2553, 3748, 3749, 1061, 1180, 1180,
	1180, 1971, 4060, 2811, 1180, 1810, 2871, 2872, 2873, 2874,
	1180, 2881, 2695, 2882, 2883, 2685, 2884, 4058, 2886, 2807,
	2669, 2670, 3549, 738, 4031, 2808, 740, 3997, 3996, 2881,
	3993, 739, 3929, 3561, 1253, 1254, 1255, 1252, 1527, 2840,
	3928, 2517, 3737, 3909, 3853, 2820, 4066, 1705, 3605, 3831,
	3822, 2672, 1161, 3799, 2793, 2939, 3794, 3793, 1993, 2830,
	1253, 1254, 1255, 1252, 3752, 641, 3739, 2782, 1253, 1254,
	1255, 1252, 2042, 3738, 2842, 2108, 1180, 2062, 2062, 2062,
	2062, 2062, 2062, 3708, 3649, 2775, 3609, 2777, 3598, 3580,
	2662, 3578, 3575, 1180, 2062, 3572, 3571, 2517, 3547, 3545,
	2859, 3519, 3516, 3513, 2859, 2943, 2060, 2855, 2252, 3560,
	2774, 3402, 3392, 2998, 4019, 1545, 2791, 2716, 2717, 3499,
	3385, 3369, 2866, 2722, 3885, 2814, 665, 665, 3364, 2828,
	3367, 8, 2822, 7, 3362, 2945, 1253, 1254, 1255, 1252,
	3102, 3293, 3292, 3290, 1941, 3897, 1253, 1254, 1255, 1252,
	3289, 3284, 2844, 2841, 3278, 1253, 1254, 1255, 1252, 2893,
	2894, 2857, 3101, 3277, 2863, 1956, 3100, 1253, 1254, 1255,
	1252, 664, 664, 3196, 2909, 2910, 2869, 672, 2986, 2860,
	2838, 1963, 222, 3159, 1966, 1967, 3158, 222, 2732, 1253,
	1254, 1255, 1252, 1253, 1254, 1255, 1252, 1916, 3154, 2913,
	2947, 2901, 3152, 3150, 1253, 1254, 1255, 1252, 3147, 1823,
	2731, 1823, 2999, 2242, 3048, 1253, 1254, 1255, 1252, 2831,
	2773, 2730, 3145, 2315, 2553, 3076, 3881, 3061, 2836, 2837,
	3073, 3016, 2946, 1545, 2952, 3031, 3068, 1253, 1254, 1255,
	1252, 2968, 2969, 2970, 2971, 2972, 2973, 3005, 1253, 1254,
	1255, 1252, 1583, 1583, 2988, 2989, 2987, 2983, 2932, 2729,
	2924, 2914, 1061, 3638, 3022, 2912, 2908, 2907, 3043, 3026,
	2906, 2761, 2753, 1061, 3006, 3003, 2749, 846, 845, 3054,
	2641, 2330, 2856, 2728, 2324, 2949, 1253, 1254, 1255, 1252,
	2321, 1253, 1254, 1255, 1252, 1869, 2155, 2856, 2867, 2868,
	3047, 2148, 1880, 2870, 1612, 1879, 1659, 1619, 1620, 2877,
	1253, 1254, 1255, 1252, 1613, 1614, 1333, 1267, 1266, 1276,
	1277, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268, 1627,
	3045, 1624, 1329, 1328, 1628, 3024, 3065, 3023, 3149, 672,
	3055, 2708, 3020, 3070, 1165, 3153, 914, 3733, 3732, 3156,
	3157, 3721, 2727, 3717, 3574, 3556, 3431, 1180, 3044, 3430,
	3041, 3046, 3039, 3175, 3429, 3056, 3058, 3057, 3064, 3399,
	3381, 3379, 2726, 3189, 3378, 2967, 2240, 3375, 665, 1253,
	1254, 1255, 1252, 3374, 3368, 3366, 3078, 3348, 2725, 3338,
	3205, 1180, 2967, 3077, 665, 3337, 1180, 1180, 3084, 1253,
	1254, 1255, 1252, 3323, 3097, 2062, 2371, 3322, 3223, 3093,
	3094, 3225, 3090, 3162, 3092, 1253, 1254, 1255, 1252, 3137,
	3104, 1717, 1718, 1719, 1720, 1721, 3091, 2434, 205, 3095,
	196, 167, 3199, 3636, 3087, 3088, 3089, 3086, 3080, 3249,
	3014, 3252, 3139, 3252, 3252, 1061, 2771, 1061, 1180, 2616,
	2612, 3161, 1061, 3208, 1253, 1254, 1255, 1252, 3212, 2611,
	2288, 2281, 3143, 1762, 2275, 2807, 3273, 1766, 1767, 1768,
	1769, 2274, 3269, 3144, 1545, 1545, 2273, 1807, 1061, 2724,
	3227, 3177, 3236, 3238, 3232, 1817, 3160, 1267, 1266, 1276,
	1277, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268, 2272,
	201, 3895, 2270, 1543, 1543, 2266, 1253, 1254, 1255, 1252,
	3221, 2265, 2263, 790, 141, 2254, 3198, 3274, 3275, 141,
	3207, 665, 2251, 3218, 3222, 3210, 3211, 2250, 3175, 2154,
	1058, 1060, 1863, 1862, 3247, 3248, 1861, 1826, 1870, 1825,
	1508, 1816, 3257, 2042, 2042, 1557, 1555, 3111, 3112, 2723,
	3231, 2854, 4018, 3113, 3114, 3115, 3116, 3980, 3117, 3118,
	3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3903,
	3253, 3254, 3258, 2404, 2403, 2720, 1253, 1254, 1255, 1252,
	1323, 3880, 671, 3271, 3817, 141, 3814, 3801, 205, 3796,
	3702, 3701, 3683, 3666, 3662, 3640, 1180, 3624, 3529, 1279,
	2699, 1283, 1253, 1254, 1255, 1252, 3527, 3497, 3279, 3336,
	2719, 3496, 2985, 3105, 3493, 3492, 3458, 1280, 1282, 1278,
	1944, 1281, 1267, 1266, 1276, 1277, 1269, 1270, 1271, 1272,
	1273, 1274, 1275, 1268, 3255, 3455, 3453, 1253, 1254, 1255,
	1252, 3300, 3301, 3420, 3286, 1960, 3096, 2379, 2380, 3285,
	3291, 1607, 3294, 3288, 2718, 665, 2856, 2382, 2383, 3298,
	201, 1618, 1609, 1623, 3311, 1626, 3312, 1267, 1266, 1276,
	1277, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268, 3230,
	1615, 1253, 1254, 1255, 1252, 3316, 1440, 3319, 3320, 3321,
	2856, 2940, 2865, 3893, 2712, 2856, 2856, 2816, 2815, 2809,
	2776, 1505, 2734, 2626, 1870, 2535, 3325, 2476, 3331, 1870,
	1870, 2372, 2344, 2309, 1747, 1059, 201, 2114, 1906, 1876,
	141, 1253, 1254, 1255, 1252, 1690, 1641, 1616, 2126, 3389,
	1383, 1368, 3391, 1364, 1363, 141, 1362, 141, 1361, 3351,
	1360, 1359, 1358, 3349, 1357, 1356, 3354, 2856, 2702, 3355,
	1355, 1354, 1353, 1352, 3350, 1351, 3370, 1350, 1349, 1348,
	2233, 1347, 2134, 2679, 1346, 2137, 1345, 1344, 2140, 664,
	1169, 2142, 665, 2042, 3360, 1253, 1254, 1255, 1252, 2698,
	1178, 1343, 1342, 3424, 1267, 1266, 1276, 1277, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1268, 1341, 1340, 1061, 2517,
	2062, 3443, 1339, 1206, 3398, 1061, 1253, 1254, 1255, 1252,
	3393, 3401, 1336, 3194, 2674, 1335, 1334, 4011, 1760, 1332,
	2591, 1331, 1330, 3386, 3461, 1327, 2184, 1180, 3388, 2598,
	1320, 1319, 1317, 1316, 1315, 3382, 3249, 1314, 1313, 1312,
	1180, 1253, 1254, 1255, 1252, 1253, 1254, 1255, 1252, 1311,
	1310, 1180, 1309, 3508, 1308, 1307, 1306, 1545, 1301, 3413,
	1300, 1299, 1298, 2502, 2506, 2507, 2508, 2503, 2511, 2504,
	2509, 3415, 3445, 2505, 1297, 2510, 1217, 1163, 665, 3891,
	2042, 3307, 3308, 3494, 1180, 2376, 1543, 3491, 2358, 1205,
	4009, 3964, 3310, 2797, 2546, 2553, 2157, 1216, 2976, 2980,
	3510, 124, 67, 3531, 2981, 3442, 3448, 3484, 3441, 2975,
	2978, 3532, 3314, 3313, 222, 2979, 66, 3421, 3422, 3423,
	2984, 2977, 2974, 3427, 3428, 3520, 2982, 1180, 2507, 2508,
	3523, 2234, 3498, 3503, 3500, 2239, 3922, 3833, 3645, 2639,
	3533, 2629, 1434, 2248, 3507, 1934, 1935, 1929, 1930, 1931,
	2889, 3245, 3512, 3246, 3060, 2444, 3515, 2890, 2891, 2892,
	3530, 3352, 3353, 3504, 3522, 3521, 3518, 3524, 3576, 3326,
	667, 668, 2031, 3525, 1601, 3517, 2624, 3583, 3514, 2663,
	2255, 1180, 3554, 2644, 2645, 669, 1654, 1635, 2262, 2331,
	2116, 1211, 3170, 3163, 2843, 2817, 3540, 2396, 2367, 1938,
	1905, 1180, 1545, 1545, 1812, 1811, 4022, 3205, 1379, 1380,
	2279, 3798, 3550, 3276, 3535, 2284, 2285, 2286, 3551, 2489,
	2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2483, 1543, 1758, 2043, 1180, 3634, 1180, 3617, 1500, 3617,
	3606, 3611, 3612, 1499, 3637, 3607, 3639, 1377, 1378, 3581,
	3582, 1244, 3590, 1545, 1375, 1376, 3570, 1373, 1374, 3318,
	3588, 3608, 3589, 3008, 1061, 2332, 2186, 1452, 1425, 1475,
	3614, 665, 3599, 1180, 1180, 3585, 3987, 1180, 1180, 3985,
	2832, 3622, 1758, 3942, 3610, 2835, 3621, 3328, 2171, 3919,
	3918, 3916, 3445, 3857, 3818, 3697, 3633, 3685, 3696, 3635,
	3680, 3546, 3371, 3643, 3491, 3345, 3646, 3344, 1940, 3329,
	3694, 3650, 3670, 3671, 2429, 2399, 3681, 3682, 1656, 3018,
	1450, 3390, 3703, 3704, 3484, 3063, 3462, 4013, 4012, 1177,
	2759, 2360, 2495, 1503, 2253, 1545, 1387, 1202, 4012, 3501,
	1514, 4013, 3664, 3324, 3691, 1467, 905, 906, 907, 908,
	2877, 1177, 209, 3, 75, 2, 3690, 4035, 3734, 4036,
	1, 1551, 2740, 3692, 1543, 1874, 1381, 909, 3727, 2502,
	2506, 2507, 2508, 2503, 2511, 2504, 2509, 904, 3715, 2505,
	1521, 2510, 2527, 2967, 2096, 1549, 1878, 3714, 3710, 911,
	2991, 2992, 141, 141, 141, 1059, 3317, 3722, 2994, 3726,
	974, 3562, 2762, 3563, 2206, 3767, 1267, 1266, 1276, 1277,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1268, 2956, 2481,
	2348, 1180, 3188, 3687, 3761, 1435, 2967, 3688, 3751, 967,
	1818, 3784, 1671, 1194, 1668, 1193, 1191, 1763, 792, 1870,
	2160, 1870, 2941, 3762, 2915, 3693, 3554, 4021, 3764, 4052,
	1061, 3979, 3790, 3763, 4024, 1688, 3759, 776, 3910, 3776,
	1870, 1870, 3823, 3983, 1180, 3780, 3825, 3713, 1285, 1545,
	2211, 1249, 3040, 993, 833, 803, 1318, 1647, 3109, 3107,
	2856, 1085, 802, 3410, 2787, 3698, 3011, 3797, 3769, 1082,
	994, 2143, 1583, 3820, 3711, 1602, 1606, 2395, 1543, 3777,
	3876, 3644, 3241, 3806, 2851, 3452, 1630, 3454, 3871, 3456,
	3566, 3564, 3808, 3565, 708, 2075, 639, 1043, 3684, 2156,
	709, 2375, 3849, 3934, 3800, 3839, 947, 2357, 948, 940,
	2805, 2804, 3819, 1711, 1728, 1711, 1258, 1745, 3128, 3129,
	1295, 747, 2634, 2236, 2637, 2784, 1838, 1839, 1840, 1841,
	3479, 3004, 1845, 1846, 1847, 1848, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 74, 3858, 73,
	72, 71, 3852, 230, 794, 229, 3735, 3603, 3906, 4026,
	773, 772, 1180, 3860, 771, 770, 3815, 3816, 769, 768,
	1545, 2500, 2501, 3900, 2499, 3847, 3875, 3869, 3907, 3890,
	3892, 3894, 3896, 2497, 3874, 2496, 2057, 3809, 2676, 2056,
	2123, 2682, 3203, 3908, 3883, 2880, 2875, 1372, 1982, 1543,
	1980, 3889, 2700, 2701, 1512, 2424, 2431, 1979, 3961, 3361,
	2703, 2704, 3557, 3899, 3886, 3887, 3661, 2925, 3915, 3913,
	1545, 3553, 1928, 3767, 2420, 1999, 2709, 2896, 1996, 1995,
	2888, 3657, 3651, 2027, 3765, 3616, 3463, 3927, 3464, 3952,
	3470, 2366, 1113, 1109, 1111, 3960, 1112, 1110, 3943, 1543,
	2684, 3945, 3296, 2401, 3165, 1717, 1870, 3946, 3947, 2340,
	3859, 2339, 2337, 3944, 2336, 3863, 3864, 1410, 3848, 3930,
	3584, 2551, 3976, 2549, 1160, 3309, 3969, 3305, 3970, 2168,
	3971, 2182, 3972, 3059, 2058, 3973, 2054, 2053, 1083, 2958,
	2490, 3986, 3742, 3988, 3989, 1933, 3884, 3984, 3982, 941,
	1711, 2355, 41, 1180, 121, 3839, 3992, 108, 3642, 3468,
	3226, 184, 1922, 59, 183, 3228, 3229, 1927, 3648, 58,
	119, 181, 57, 4001, 103, 102, 118, 179, 4004, 56,
	214, 4003, 4002, 213, 2833, 2834, 4010, 4007, 4008, 4020,
	3790, 4028, 216, 215, 4027, 212, 4014, 4015, 4016, 4017,
	3480, 1554, 3686, 2602, 2603, 671, 211, 1590, 210, 4040,
	3920, 1180, 4032, 3471, 3620, 3902, 899, 44, 43, 185,
	42, 4041, 109, 4042, 3466, 60, 4044, 40, 39, 3488,
	3489, 4050, 38, 34, 4054, 3467, 13, 4051, 1977, 1978,
	12, 3875, 141, 35, 22, 21, 1675, 20, 26, 32,
	31, 134, 133, 30, 132, 131, 130, 129, 4062, 128,
	127, 126, 29, 19, 51, 50, 49, 4028, 4070, 981,
	4027, 4069, 3472, 48, 47, 46, 9, 122, 117, 4054,
	4071, 115, 28, 3994, 3995, 4075, 116, 113, 112, 111,
	110, 106, 104, 86, 3302, 85, 84, 2103, 99, 98,
	97, 96, 95, 2103, 2103, 2103, 94, 92, 93, 992,
	141, 83, 82, 81, 80, 3315, 79, 141, 101, 205,
	64, 196, 167, 107, 105, 1870, 90, 100, 91, 89,
	141, 88, 87, 141, 141, 78, 77, 197, 76, 165,
	164, 978, 979, 163, 188, 162, 141, 161, 198, 159,
	160, 158, 1021, 157, 156, 155, 154, 153, 52, 53,
	54, 55, 175, 174, 176, 178, 180, 139, 177, 182,
	3487, 172, 2410, 170, 173, 171, 169, 69, 11, 120,
	18, 25, 125, 4, 0, 0, 0, 0, 0, 0,
	0, 201, 0, 0, 0, 0, 0, 3476, 0, 0,
	0, 0, 0, 0, 0, 3025, 0, 3027, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3473,
	3477, 3475, 3474, 0, 0, 0, 1870, 0, 0, 0,
	0, 1870, 0, 0, 0, 0, 1023, 0, 0, 1022,
	0, 0, 2184, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3999, 0, 0, 0, 0, 0, 0, 3482,
	3483, 0, 0, 0, 0, 0, 0, 0, 147, 148,
	0, 149, 150, 0, 0, 0, 151, 3079, 1007, 152,
	0, 0, 0, 0, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3103, 0, 3490, 0, 0,
	1711, 0, 0, 0, 984, 0, 0, 0, 0, 3469,
	0, 0, 0, 0, 0, 3481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 166, 194, 203, 195, 123, 0, 0, 0,
	3444, 0, 0, 0, 0, 0, 0, 0, 0, 3447,
	0, 0, 0, 0, 0, 193, 187, 186, 0, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 1006,
	1004, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 720, 719, 726, 716, 0, 0, 0, 0, 0,
	0, 1003, 0, 723, 724, 0, 725, 729, 0, 0,
	710, 0, 0, 977, 0, 0, 0, 0, 0, 0,
	734, 0, 0, 0, 983, 1016, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 191, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2345, 2346, 2347, 1012, 0,
	0, 0, 0, 0, 0, 3486, 0, 0, 0, 2061,
	2362, 2363, 2364, 2365, 0, 3256, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1013, 1017, 0, 135, 0, 0,
	0, 192, 0, 136, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 998, 1002, 1020, 0,
	0, 0, 999, 996, 995, 0, 1001, 986, 987, 985,
	988, 989, 990, 991, 0, 1018, 0, 1019, 0, 0,
	0, 3485, 0, 0, 0, 0, 0, 141, 1014, 1015,
	141, 141, 0, 141, 0, 0, 0, 0, 0, 0,
	137, 0, 2028, 0, 0, 0, 0, 1989, 0, 0,
	0, 0, 0, 63, 0, 0, 0, 0, 0, 0,
	3631, 3632, 0, 0, 0, 1010, 0, 0, 0, 0,
	0, 1009, 0, 1059, 0, 1514, 141, 2031, 1998, 0,
	0, 0, 0, 0, 1059, 0, 1005, 2032, 2033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	141, 0, 65, 0, 711, 713, 712, 0, 0, 0,
	0, 0, 0, 1997, 0, 718, 0, 0, 0, 0,
	0, 0, 1551, 0, 0, 0, 0, 722, 0, 0,
	0, 2005, 0, 0, 737, 2103, 0, 145, 202, 0,
	146, 715, 0, 0, 0, 168, 0, 0, 0, 0,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	980, 975, 0, 0, 0, 2028, 976, 0, 0, 0,
	1989, 1285, 0, 0, 0, 0, 0, 0, 0, 3363,
	0, 0, 0, 0, 0, 0, 3365, 0, 0, 2021,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2031, 1998, 0, 0, 0, 0, 138, 45, 0, 0,
	2032, 2033, 0, 62, 0, 0, 0, 0, 3380, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 142, 143, 1997, 0, 144, 0,
	0, 0, 0, 717, 721, 727, 0, 728, 730, 0,
	0, 731, 732, 733, 2005, 0, 735, 736, 0, 0,
	0, 0, 0, 1988, 1990, 1987, 0, 0, 1984, 1253,
	1254, 1255, 1252, 2009, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2015, 0, 0, 0, 0, 0,
	0, 0, 2000, 0, 1983, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2003, 2037, 0, 0, 2004, 2006,
	2008, 0, 2010, 2011, 2012, 2016, 2017, 2018, 2020, 2023,
	2024, 2025, 2021, 0, 0, 0, 0, 0, 0, 2013,
	2022, 2014, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1992, 0, 0, 0, 0, 0, 0, 0, 1796,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2029, 0, 0, 1870, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1870, 2821, 0, 3526, 0, 0,
	3528, 0, 1985, 1986, 0, 0, 1988, 2846, 1987, 0,
	0, 2845, 0, 0, 0, 0, 2009, 0, 3534, 0,
	2026, 0, 714, 0, 0, 0, 0, 2015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2002, 0, 0,
	0, 0, 0, 0, 2001, 0, 0, 2003, 2037, 0,
	0, 2004, 2006, 2008, 0, 2010, 2011, 2012, 2016, 2017,
	2018, 2020, 2023, 2024, 2025, 0, 0, 0, 2019, 0,
	0, 0, 2013, 2022, 2014, 0, 0, 2007, 0, 0,
	1132, 0, 0, 0, 1992, 0, 0, 0, 0, 0,
	2035, 2034, 0, 2520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2029, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1792, 0, 0,
	0, 0, 0, 0, 1789, 1985, 1986, 0, 1791, 1788,
	1790, 1794, 1795, 1994, 0, 0, 1793, 0, 0, 0,
	0, 0, 0, 2026, 0, 0, 0, 0, 2061, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	2002, 0, 3009, 3010, 0, 0, 0, 2001, 1132, 0,
	0, 0, 0, 0, 0, 2030, 0, 0, 2036, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2019, 0, 0, 1117, 0, 0, 0, 0, 0,
	2007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2035, 2034, 1140, 1144, 1146, 1148, 1150,
	1151, 1153, 0, 1158, 1154, 1155, 1156, 1157, 0, 1135,
	1136, 1137, 1138, 1115, 1116, 1141, 0, 1118, 0, 1120,
	1121, 1122, 1123, 1119, 1124, 1125, 1126, 1127, 1128, 1131,
	1133, 1129, 1130, 1139, 0, 0, 0, 0, 0, 0,
	0, 1143, 1145, 1147, 1149, 1152, 1994, 0, 0, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1799, 1800, 1801, 1802, 1803, 1804, 1797, 1798, 0, 0,
	0, 0, 1117, 0, 0, 0, 1107, 0, 0, 0,
	0, 1134, 0, 0, 0, 0, 0, 0, 2030, 0,
	1132, 2036, 0, 1140, 1144, 1146, 1148, 1150, 1151, 1153,
	0, 1158, 1154, 1155, 1156, 1157, 0, 1135, 1136, 1137,
	1138, 1115, 1116, 1141, 0, 1118, 0, 1120, 1121, 1122,
	1123, 1119, 1124, 1125, 1126, 1127, 1128, 1131, 1133, 1129,
	1130, 1139, 0, 720, 719, 726, 716, 0, 0, 1143,
	1145, 1147, 1149, 1152, 0, 723, 724, 0, 725, 729,
	0, 0, 710, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 141, 0, 0, 1134,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1305, 0, 0, 3197, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 738, 0,
	3209, 740, 0, 0, 1117, 0, 739, 0, 0, 0,
	0, 0, 2680, 2681, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1140, 1144, 1146, 1148, 1150,
	1151, 1153, 0, 1158, 1154, 1155, 1156, 1157, 0, 1135,
	1136, 1137, 1138, 1115, 1116, 1141, 3882, 1118, 0, 1120,
	1121, 1122, 1123, 1119, 1124, 1125, 1126, 1127, 1128, 1131,
	1133, 1129, 1130, 1139, 0, 0, 0, 720, 719, 726,
	716, 1143, 1145, 1147, 1149, 1152, 0, 0, 0, 723,
	724, 0, 725, 729, 0, 0, 710, 0, 0, 0,
	2061, 2061, 2061, 2061, 2061, 2061, 734, 0, 0, 0,
	0, 0, 0, 2028, 0, 0, 0, 2061, 0, 0,
	205, 1134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2103, 0, 0,
	3957, 0, 3615, 0, 0, 0, 0, 0, 2031, 0,
	0, 0, 738, 0, 0, 740, 711, 713, 712, 0,
	739, 0, 0, 0, 0, 0, 1142, 718, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 722,
	0, 0, 0, 0, 0, 0, 737, 0, 0, 0,
	0, 0, 201, 715, 0, 0, 0, 705, 0, 0,
	2028, 0, 2005, 0, 0, 141, 0, 0, 0, 0,
	141, 0, 0, 0, 3957, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 141, 0, 0, 0, 2031, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1142, 0, 3957, 0, 0, 0,
	2021, 3357, 0, 2028, 0, 0, 0, 0, 0, 3789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2005,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	711, 713, 712, 0, 0, 717, 721, 727, 2031, 728,
	730, 718, 0, 731, 732, 733, 0, 0, 735, 736,
	0, 0, 0, 722, 0, 0, 0, 0, 4073, 0,
	737, 0, 0, 0, 0, 0, 0, 715, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2009, 0, 0, 2021, 0, 0,
	0, 0, 2005, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2003, 2037, 0, 2103, 2004,
	2006, 2008, 0, 2010, 2011, 2012, 2016, 2017, 2018, 2020,
	2023, 2024, 2025, 0, 0, 0, 1142, 0, 0, 0,
	2013, 2022, 2014, 0, 1059, 0, 141, 0, 0, 0,
	0, 141, 0, 0, 0, 0, 3760, 0, 2061, 2028,
	2021, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2009, 0, 0, 0, 0, 2029, 141, 0, 717,
	721, 727, 2015, 728, 730, 0, 0, 731, 732, 733,
	0, 1796, 735, 736, 2031, 0, 0, 0, 0, 0,
	0, 0, 2003, 2037, 714, 0, 2004, 2006, 2008, 0,
	2010, 2011, 2012, 2016, 2017, 2018, 2020, 2023, 2024, 2025,
	0, 2026, 0, 0, 2103, 0, 0, 2013, 2022, 2014,
	0, 0, 0, 0, 0, 0, 0, 0, 2002, 0,
	0, 0, 0, 0, 2009, 2001, 0, 0, 2005, 0,
	0, 0, 0, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 2029, 0, 0, 0, 0, 0, 2019,
	0, 0, 0, 0, 0, 2003, 2037, 0, 2007, 2004,
	2006, 2008, 0, 2010, 2011, 2012, 2016, 2017, 2018, 2020,
	2023, 2024, 2025, 0, 0, 0, 0, 0, 0, 0,
	2013, 2022, 2014, 0, 0, 0, 0, 0, 2026, 0,
	0, 0, 0, 0, 0, 0, 2021, 0, 0, 0,
	0, 0, 0, 0, 0, 2002, 0, 0, 0, 0,
	0, 0, 2001, 0, 0, 0, 2029, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 714, 0,
	0, 0, 0, 0, 0, 0, 2019, 0, 0, 1792,
	0, 0, 0, 0, 0, 2007, 1789, 0, 0, 0,
	1791, 1788, 1790, 1794, 1795, 0, 0, 0, 1793, 0,
	0, 2026, 0, 0, 0, 0, 3619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2002, 0,
	2009, 0, 0, 0, 0, 2001, 0, 0, 0, 0,
	0, 2015, 0, 0, 0, 0, 0, 3669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2019,
	0, 2003, 2037, 0, 0, 2004, 2006, 2008, 2007, 2010,
	2011, 2012, 2016, 2017, 2018, 2020, 2023, 2024, 2025, 0,
	0, 0, 0, 0, 0, 0, 2013, 2022, 2014, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2029, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 141, 0, 0, 0, 0, 0,
	0, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785,
	1786, 1787, 1799, 1800, 1801, 1802, 1803, 1804, 1797, 1798,
	0, 0, 0, 0, 0, 0, 0, 2026, 0, 0,
	0, 0, 0, 0, 0, 0, 3623, 0, 0, 0,
	0, 0, 0, 2061, 2002, 0, 0, 0, 0, 0,
	0, 2001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2019, 0, 0, 0, 0,
	0, 0, 0, 0, 2007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 141, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 3623, 0, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 762, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 801, 561, 512, 428, 380, 1588, 578, 0,
	1092, 870, 878, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 0, 141, 0, 0, 754, 0, 0, 791,
	846, 845, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 861, 0, 0, 0, 0, 0, 0, 746, 758,
	0, 763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 755, 756, 1582, 0, 0,
	0, 811, 0, 757, 0, 0, 806, 785, 789, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 809, 813, 329, 884, 807, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 885, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	1089, 1090, 1587, 1094, 0, 1093, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 804, 0, 624, 0, 463,
	0, 0, 868, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 808, 0, 417, 398, 881, 0, 141,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 865, 394, 589, 622, 623, 514, 0, 880,
	860, 862, 863, 867, 871, 872, 873, 874, 875, 877,
	879, 883, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 882, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 812, 564, 565, 384, 385, 386, 387,
	869, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 891,
	864, 890, 892, 893, 889, 894, 895, 876, 767, 0,
	819, 887, 886, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 774, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 853, 826, 827,
	828, 764, 829, 823, 824, 765, 825, 854, 817, 850,
	851, 793, 820, 830, 849, 831, 852, 855, 856, 896,
	897, 837, 821, 256, 898, 834, 857, 848, 847, 832,
	818, 858, 859, 800, 795, 835, 836, 822, 841, 842,
	843, 766, 814, 815, 816, 838, 839, 796, 797, 798,
	799, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 844, 632, 432,
	0, 840, 635, 636, 633, 370, 419, 437, 426, 810,
	649, 510, 511, 650, 621, 0, 759, 0, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 801, 561, 512, 428,
	380, 579, 578, 0, 0, 870, 878, 0, 0, 0,
	0, 0, 0, 0, 0, 866, 0, 0, 0, 0,
	754, 0, 0, 791, 846, 845, 778, 788, 0, 0,
	308, 228, 507, 627, 509, 508, 779, 0, 780, 784,
	787, 783, 781, 782, 0, 861, 0, 0, 0, 0,
	0, 0, 746, 758, 0, 763, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	756, 0, 0, 0, 0, 811, 0, 757, 0, 0,
	806, 785, 789, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 786, 809, 813, 329, 884, 807,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 885, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 804,
	0, 624, 0, 463, 0, 0, 868, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 808, 0, 417,
	398, 881, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 1820, 1819, 1821, 475, 363,
	364, 0, 342, 290, 291, 648, 865, 394, 589, 622,
	623, 514, 0, 880, 860, 862, 863, 867, 871, 872,
	873, 874, 875, 877, 879, 883, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 882, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 812, 564, 565,
	384, 385, 386, 387, 869, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 891, 864, 890, 892, 893, 889, 894,
	895, 876, 767, 0, 819, 887, 886, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	774, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 853, 826, 827, 828, 764, 829, 823, 824, 765,
	825, 854, 817, 850, 851, 793, 820, 830, 849, 831,
	852, 855, 856, 896, 897, 837, 821, 256, 898, 834,
	857, 848, 847, 832, 818, 858, 859, 800, 795, 835,
	836, 822, 841, 842, 843, 766, 814, 815, 816, 838,
	839, 796, 797, 798, 799, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 844, 632, 432, 0, 840, 635, 636, 633, 370,
	419, 437, 426, 810, 649, 510, 511, 650, 621, 0,
	759, 0, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 762, 0, 0, 0, 335,
	1871, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	801, 561, 512, 428, 380, 579, 578, 0, 0, 870,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 866,
	0, 2087, 0, 0, 754, 0, 0, 791, 846, 845,
	778, 788, 0, 0, 308, 228, 507, 627, 509, 508,
	779, 0, 780, 784, 787, 783, 781, 782, 0, 861,
	0, 0, 0, 0, 0, 0, 746, 758, 0, 763,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 755, 756, 0, 0, 0, 0, 811,
	0, 757, 0, 0, 2088, 785, 789, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 786, 809,
	813, 329, 884, 807, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	885, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 804, 0, 624, 0, 463, 0, 0,
	868, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 808, 0, 417, 398, 881, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	865, 394, 589, 622, 623, 514, 0, 880, 860, 862,
	863, 867, 871, 872, 873, 874, 875, 877, 879, 883,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 882, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 812, 564, 565, 384, 385, 386, 387, 869, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 891, 864, 890,
	892, 893, 889, 894, 895, 876, 767, 0, 819, 887,
	886, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 774, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 853, 826, 827, 828, 764,
	829, 823, 824, 765, 825, 854, 817, 850, 851, 793,
	820, 830, 849, 831, 852, 855, 856, 896, 897, 837,
	821, 256, 898, 834, 857, 848, 847, 832, 818, 858,
	859, 800, 795, 835, 836, 822, 841, 842, 843, 766,
	814, 815, 816, 838, 839, 796, 797, 798, 799, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 844, 632, 432, 0, 840,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 0, 759, 205, 810, 0, 0, 0,
	0, 0, 0, 0, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 1288, 561, 512, 428, 380, 579, 578,
	0, 0, 870, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 754, 0, 0,
	791, 846, 845, 778, 788, 0, 0, 308, 228, 507,
	627, 509, 508, 779, 0, 780, 784, 787, 783, 781,
	782, 0, 861, 0, 0, 0, 0, 0, 0, 746,
	758, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 756, 0, 0,
	0, 0, 811, 0, 757, 0, 0, 806, 785, 789,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 786, 809, 813, 329, 884, 807, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 885, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 804, 0, 624, 0,
	463, 0, 0, 868, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 808, 0, 417, 398, 881, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 865, 394, 589, 622, 623, 514, 0,
	880, 860, 862, 863, 867, 871, 872, 873, 874, 875,
	877, 879, 883, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 882, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 812, 564, 565, 384, 385, 386,
	387, 869, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	891, 864, 890, 892, 893, 889, 894, 895, 876, 767,
	0, 819, 887, 886, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 774, 292, 520,
	366, 168, 409, 340, 585, 586, 0, 637, 853, 826,
	827, 828, 764, 829, 823, 824, 765, 825, 854, 817,
	850, 851, 793, 820, 830, 849, 831, 852, 855, 856,
	896, 897, 837, 821, 256, 898, 834, 857, 848, 847,
	832, 818, 858, 859, 800, 795, 835, 836, 822, 841,
	842, 843, 766, 814, 815, 816, 838, 839, 796, 797,
	798, 799, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 844, 632,
	432, 0, 840, 635, 636, 633, 370, 419, 437, 426,
	810, 649, 510, 511, 650, 621, 0, 759, 0, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 4072, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 810, 649, 510, 511, 650, 621,
	0, 759, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 801, 561, 512, 428, 380, 579, 578, 0, 0,
	870, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 754, 0, 0, 791, 846,
	845, 778, 788, 0, 0, 308, 228, 507, 627, 509,
	508, 779, 0, 780, 784, 787, 783, 781, 782, 0,
	861, 0, 0, 0, 0, 0, 0, 746, 758, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 756, 0, 0, 0, 0,
	811, 0, 757, 0, 0, 806, 785, 789, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 786,
	809, 813, 329, 884, 807, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 885, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 804, 0, 624, 0, 463, 0,
	0, 868, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 808, 0, 417, 398, 881, 3958, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 865, 394, 589, 622, 623, 514, 0, 880, 860,
	862, 863, 867, 871, 872, 873, 874, 875, 877, 879,
	883, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 882, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 812, 564, 565, 384, 385, 386, 387, 869,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 891, 864,
	890, 892, 893, 889, 894, 895, 876, 767, 0, 819,
	887, 886, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 774, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 853, 826, 827, 828,
	764, 829, 823, 824, 765, 825, 854, 817, 850, 851,
	793, 820, 830, 849, 831, 852, 855, 856, 896, 897,
	837, 821, 256, 898, 834, 857, 848, 847, 832, 818,
	858, 859, 800, 795, 835, 836, 822, 841, 842, 843,
	766, 814, 815, 816, 838, 839, 796, 797, 798, 799,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 844, 632, 432, 0,
	840, 635, 636, 633, 370, 419, 437, 426, 810, 649,
	510, 511, 650, 621, 0, 759, 0, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 0, 335, 1871, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 801, 561, 512, 428, 380,
	579, 578, 0, 0, 870, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 754,
	0, 0, 791, 846, 845, 778, 788, 0, 0, 308,
	228, 507, 627, 509, 508, 779, 0, 780, 784, 787,
	783, 781, 782, 0, 861, 0, 0, 0, 0, 0,
	0, 746, 758, 0, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 755, 756,
	0, 0, 0, 0, 811, 0, 757, 0, 0, 806,
	785, 789, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 786, 809, 813, 329, 884, 807, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 885, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 804, 0,
	624, 0, 463, 0, 0, 868, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 808, 0, 417, 398,
	881, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 865, 394, 589, 622, 623,
	514, 0, 880, 860, 862, 863, 867, 871, 872, 873,
	874, 875, 877, 879, 883, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 882, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 812, 564, 565, 384,
	385, 386, 387, 869, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 891, 864, 890, 892, 893, 889, 894, 895,
	876, 767, 0, 819, 887, 886, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 774,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	853, 826, 827, 828, 764, 829, 823, 824, 765, 825,
	854, 817, 850, 851, 793, 820, 830, 849, 831, 852,
	855, 856, 896, 897, 837, 821, 256, 898, 834, 857,
	848, 847, 832, 818, 858, 859, 800, 795, 835, 836,
	822, 841, 842, 843, 766, 814, 815, 816, 838, 839,
	796, 797, 798, 799, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	844, 632, 432, 0, 840, 635, 636, 633, 370, 419,
	437, 426, 810, 649, 510, 511, 650, 621, 0, 759,
	0, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 801,
	561, 512, 428, 380, 579, 578, 0, 0, 870, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 754, 0, 0, 791, 846, 845, 778,
	788, 0, 0, 308, 228, 507, 627, 509, 508, 779,
	0, 780, 784, 787, 783, 781, 782, 0, 861, 0,
	0, 0, 0, 0, 0, 746, 758, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 756, 1582, 0, 0, 0, 811, 0,
	757, 0, 0, 806, 785, 789, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 786, 809, 813,
	329, 884, 807, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 885,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 804, 0, 624, 0, 463, 0, 0, 868,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	808, 0, 417, 398, 881, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 865,
	394, 589, 622, 623, 514, 0, 880, 860, 862, 863,
	867, 871, 872, 873, 874, 875, 877, 879, 883, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	882, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	812, 564, 565, 384, 385, 386, 387, 869, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 891, 864, 890, 892,
	893, 889, 894, 895, 876, 767, 0, 819, 887, 886,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 774, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 853, 826, 827, 828, 764, 829,
	823, 824, 765, 825, 854, 817, 850, 851, 793, 820,
	830, 849, 831, 852, 855, 856, 896, 897, 837, 821,
	256, 898, 834, 857, 848, 847, 832, 818, 858, 859,
	800, 795, 835, 836, 822, 841, 842, 843, 766, 814,
	815, 816, 838, 839, 796, 797, 798, 799, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 844, 632, 432, 0, 840, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 810, 759, 0, 2261, 0, 0, 0, 0,
	0, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 762, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 801,
	561, 512, 428, 380, 579, 578, 0, 0, 870, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 754, 0, 0, 791, 846, 845, 778,
	788, 0, 0, 308, 228, 507, 627, 509, 508, 779,
	0, 780, 784, 787, 783, 781, 782, 0, 861, 0,
	0, 0, 0, 0, 0, 746, 758, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 756, 0, 0, 0, 0, 811, 0,
	757, 0, 0, 806, 785, 789, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 786, 809, 813,
	329, 884, 807, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 885,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 804, 0, 624, 0, 463, 0, 0, 868,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	808, 0, 417, 398, 881, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 865,
	394, 589, 622, 623, 514, 0, 880, 860, 862, 863,
	867, 871, 872, 873, 874, 875, 877, 879, 883, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	882, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	812, 564, 565, 384, 385, 386, 387, 869, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 891, 864, 890, 892,
	893, 889, 894, 895, 876, 767, 0, 819, 887, 886,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 774, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 853, 826, 827, 828, 764, 829,
	823, 824, 765, 825, 854, 817, 850, 851, 793, 820,
	830, 849, 831, 852, 855, 856, 896, 897, 837, 821,
	256, 898, 834, 857, 848, 847, 832, 818, 858, 859,
	800, 795, 835, 836, 822, 841, 842, 843, 766, 814,
	815, 816, 838, 839, 796, 797, 798, 799, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 844, 632, 432, 0, 840, 635,
	636, 633, 370, 419, 437, 426, 810, 649, 510, 511,
	650, 621, 0, 759, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 801, 561, 512, 428, 380, 579, 578,
	0, 0, 870, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 754, 0, 0,
	791, 846, 845, 778, 788, 0, 0, 308, 228, 507,
	627, 509, 508, 779, 0, 780, 784, 787, 783, 781,
	782, 0, 861, 0, 0, 0, 0, 0, 0, 746,
	758, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 756, 1864, 0,
	0, 0, 811, 0, 757, 0, 0, 806, 785, 789,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 786, 809, 813, 329, 884, 807, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 885, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 804, 0, 624, 0,
	463, 0, 0, 868, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 808, 0, 417, 398, 881, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 865, 394, 589, 622, 623, 514, 0,
	880, 860, 862, 863, 867, 871, 872, 873, 874, 875,
	877, 879, 883, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 882, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 812, 564, 565, 384, 385, 386,
	387, 869, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	891, 864, 890, 892, 893, 889, 894, 895, 876, 767,
	0, 819, 887, 886, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 774, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 853, 826,
	827, 828, 764, 829, 823, 824, 765, 825, 854, 817,
	850, 851, 793, 820, 830, 849, 831, 852, 855, 856,
	896, 897, 837, 821, 256, 898, 834, 857, 848, 847,
	832, 818, 858, 859, 800, 795, 835, 836, 822, 841,
	842, 843, 766, 814, 815, 816, 838, 839, 796, 797,
	798, 799, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 844, 632,
	432, 0, 840, 635, 636, 633, 370, 419, 437, 426,
	810, 649, 510, 511, 650, 621, 0, 759, 0, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 754, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 810, 649, 510, 511, 650, 621,
	0, 759, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 762, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 801, 561, 512, 428, 380, 579, 578, 0, 0,
	870, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 0, 0, 754, 0, 0, 791, 846,
	845, 778, 788, 0, 0, 308, 228, 507, 627, 509,
	508, 779, 0, 780, 784, 787, 783, 781, 782, 0,
	861, 0, 0, 0, 0, 0, 0, 746, 758, 0,
	763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 755, 756, 0, 0, 0, 0,
	811, 0, 757, 0, 0, 806, 785, 789, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 786,
	809, 813, 329, 884, 807, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 885, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 804, 0, 624, 0, 463, 0,
	0, 868, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 808, 0, 417, 398, 881, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 865, 394, 589, 622, 623, 514, 0, 880, 860,
	862, 863, 867, 871, 872, 873, 874, 875, 877, 879,
	883, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 882, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 812, 564, 565, 384, 385, 386, 387, 869,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 891, 864,
	890, 892, 893, 889, 894, 895, 876, 767, 0, 819,
	887, 886, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 774, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 853, 826, 827, 828,
	764, 829, 823, 824, 765, 825, 854, 817, 850, 851,
	793, 820, 830, 849, 831, 852, 855, 856, 896, 897,
	837, 821, 256, 898, 834, 857, 848, 847, 832, 818,
	858, 859, 800, 795, 835, 836, 822, 841, 842, 843,
	766, 814, 815, 816, 838, 839, 796, 797, 798, 799,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 844, 632, 432, 0,
	3536, 635, 3537, 3538, 370, 419, 437, 426, 810, 649,
	510, 511, 650, 621, 0, 759, 0, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	762, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 801, 561, 512, 428, 380,
	579, 578, 0, 0, 870, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 0, 754,
	0, 0, 791, 846, 845, 778, 788, 0, 0, 308,
	228, 507, 627, 509, 508, 2737, 0, 2738, 784, 787,
	783, 781, 782, 0, 861, 0, 0, 0, 0, 0,
	0, 746, 758, 0, 763, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 755, 756,
	0, 0, 0, 0, 811, 0, 757, 0, 0, 806,
	785, 789, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 786, 809, 813, 329, 884, 807, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 885, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 804, 0,
	624, 0, 463, 0, 0, 868, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 808, 0, 417, 398,
	881, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 865, 394, 589, 622, 623,
	514, 0, 880, 860, 862, 863, 867, 871, 872, 873,
	874, 875, 877, 879, 883, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 882, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 812, 564, 565, 384,
	385, 386, 387, 869, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 891, 864, 890, 892, 893, 889, 894, 895,
	876, 767, 0, 819, 887, 886, 888, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 774,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	853, 826, 827, 828, 764, 829, 823, 824, 765, 825,
	854, 817, 850, 851, 793, 820, 830, 849, 831, 852,
	855, 856, 896, 897, 837, 821, 256, 898, 834, 857,
	848, 847, 832, 818, 858, 859, 800, 795, 835, 836,
	822, 841, 842, 843, 766, 814, 815, 816, 838, 839,
	796, 797, 798, 799, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	844, 632, 432, 0, 840, 635, 636, 633, 370, 419,
	437, 426, 810, 649, 510, 511, 650, 621, 0, 759,
	0, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	1729, 0, 0, 0, 762, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 801,
	561, 512, 428, 380, 579, 578, 0, 0, 870, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 866, 0,
	0, 0, 0, 754, 0, 0, 791, 846, 845, 778,
	788, 0, 0, 308, 228, 507, 627, 509, 508, 779,
	0, 780, 784, 787, 783, 781, 782, 0, 861, 0,
	0, 0, 0, 0, 0, 0, 758, 0, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 755, 756, 0, 0, 0, 0, 811, 0,
	757, 0, 0, 806, 785, 789, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 786, 809, 813,
	329, 884, 807, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 885,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 804, 0, 624, 0, 463, 0, 0, 868,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	808, 0, 417, 398, 881, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	1730, 1731, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 865,
	394, 589, 622, 623, 514, 0, 880, 860, 862, 863,
	867, 871, 872, 873, 874, 875, 877, 879, 883, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	882, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	812, 564, 565, 384, 385, 386, 387, 869, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 891, 864, 890, 892,
	893, 889, 894, 895, 876, 767, 0, 819, 887, 886,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 774, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 853, 826, 827, 828, 764, 829,
	823, 824, 765, 825, 854, 817, 850, 851, 793, 820,
	830, 849, 831, 852, 855, 856, 896, 897, 837, 821,
	256, 898, 834, 857, 848, 847, 832, 818, 858, 859,
	800, 795, 835, 836, 822, 841, 842, 843, 766, 814,
	815, 816, 838, 839, 796, 797, 798, 799, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 844, 632, 432, 0, 840, 635,
	636, 633, 370, 419, 437, 426, 810, 649, 510, 511,
	650, 621, 0, 759, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 762, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 801, 561, 512, 428, 380, 579, 578,
	0, 0, 870, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 0, 0, 754, 0, 0,
	791, 846, 845, 778, 788, 0, 0, 308, 228, 507,
	627, 509, 508, 779, 0, 780, 784, 787, 783, 781,
	782, 0, 861, 0, 0, 0, 0, 0, 0, 0,
	758, 0, 763, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 755, 756, 0, 0,
	0, 0, 811, 0, 757, 0, 0, 806, 785, 789,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 786, 809, 813, 329, 884, 807, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 885, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 804, 0, 624, 0,
	463, 0, 0, 868, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 808, 0, 417, 398, 881, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 865, 394, 589, 622, 623, 514, 0,
	880, 860, 862, 863, 867, 871, 872, 873, 874, 875,
	877, 879, 883, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 882, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 812, 564, 565, 384, 385, 386,
	387, 869, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	891, 864, 890, 892, 893, 889, 894, 895, 876, 767,
	0, 819, 887, 886, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 774, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 853, 826,
	827, 828, 764, 829, 823, 824, 765, 825, 854, 817,
	850, 851, 793, 820, 830, 849, 831, 852, 855, 856,
	896, 897, 837, 821, 256, 898, 834, 857, 848, 847,
	832, 818, 858, 859, 800, 795, 835, 836, 822, 841,
	842, 843, 766, 814, 815, 816, 838, 839, 796, 797,
	798, 799, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 844, 632,
	432, 0, 840, 635, 636, 633, 370, 419, 437, 426,
	810, 649, 510, 511, 650, 621, 0, 759, 0, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 762, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 801, 561, 512,
	428, 380, 579, 578, 0, 0, 870, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 0,
	0, 0, 0, 0, 791, 846, 845, 778, 788, 0,
	0, 308, 228, 507, 627, 509, 508, 779, 0, 780,
	784, 787, 783, 781, 782, 0, 861, 0, 0, 0,
	0, 0, 0, 746, 758, 0, 763, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	755, 756, 0, 0, 0, 0, 811, 0, 757, 0,
	0, 806, 785, 789, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 786, 809, 813, 329, 884,
	807, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 885, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	804, 0, 624, 0, 463, 0, 0, 868, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 808, 0,
	417, 398, 881, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 865, 394, 589,
	622, 623, 514, 0, 880, 860, 862, 863, 867, 871,
	872, 873, 874, 875, 877, 879, 883, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 882, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 812, 564,
	565, 384, 385, 386, 387, 869, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 891, 864, 890, 892, 893, 889,
	894, 895, 876, 767, 0, 819, 887, 886, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 774, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 853, 826, 827, 828, 764, 829, 823, 824,
	765, 825, 854, 817, 850, 851, 793, 820, 830, 849,
	831, 852, 855, 856, 896, 897, 837, 821, 256, 898,
	834, 857, 848, 847, 832, 818, 858, 859, 800, 795,
	835, 836, 822, 841, 842, 843, 766, 814, 815, 816,
	838, 839, 796, 797, 798, 799, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 844, 632, 432, 0, 840, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	0, 759, 205, 64, 196, 167, 0, 0, 0, 0,
	0, 0, 396, 0, 525, 558, 547, 631, 513, 0,
	197, 0, 0, 0, 0, 0, 0, 188, 0, 335,
	0, 198, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	139, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 125, 0, 0, 0, 0,
	0, 0, 0, 0, 201, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 166, 194, 203, 195, 123,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	220, 0, 0, 0, 433, 0, 0, 362, 193, 187,
	186, 479, 0, 417, 398, 232, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 599, 600, 601, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 458,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 223, 571, 574, 504,
	233, 0, 568, 583, 541, 582, 234, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 137, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 231, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	238, 303, 446, 239, 0, 292, 520, 366, 168, 409,
	340, 585, 586, 61, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 235,
	45, 221, 224, 226, 225, 0, 62, 569, 581, 615,
	5, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 142, 236, 510,
	511, 237, 621, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 139, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 201, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 2412, 2415, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 2416, 463, 0,
	0, 0, 2411, 0, 2410, 433, 2408, 2413, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 2414, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 168,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1324, 0, 0, 227,
	0, 0, 778, 788, 0, 0, 308, 228, 507, 627,
	509, 508, 779, 0, 780, 784, 787, 783, 781, 782,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 785, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	786, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621, 205, 64, 196, 167, 0,
	0, 0, 0, 0, 0, 396, 675, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 682,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 679, 680, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 676, 678, 313, 486, 410, 690, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 168, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 525, 558,
	547, 631, 513, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 0, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1117, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 2575,
	2578, 2579, 2580, 2581, 2582, 2583, 0, 2588, 2584, 2585,
	2586, 2587, 0, 2570, 2571, 2572, 2573, 1115, 2554, 2576,
	0, 2555, 392, 2556, 2557, 2558, 2559, 1119, 2560, 2561,
	2562, 2563, 2564, 2567, 2568, 2565, 2566, 2574, 404, 369,
	405, 352, 382, 381, 383, 1143, 1145, 1147, 1149, 1152,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 2569, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	2577, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 2412, 2415, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 2416, 463, 0, 0, 0, 2411, 0, 2410, 433,
	2408, 2413, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 2414, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 2433, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 2432, 463, 0, 0, 0, 2438, 2435, 2437,
	433, 0, 2436, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 2430, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 2433, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 2432, 463, 0, 0, 0, 2438, 2435,
	2437, 433, 0, 2436, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 2127, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 2128, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	1253, 1254, 1255, 1252, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 205, 649, 510, 511, 650,
	621, 0, 0, 0, 0, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 139, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 201, 2177, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 168, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	205, 649, 510, 511, 650, 621, 0, 0, 0, 0,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 139, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 201, 2163, 0, 227, 0, 0, 0, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 168, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 1042,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 1049, 1050, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1053, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 1036, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 1023, 461, 302, 1022, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 1040, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 1041, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	1044, 564, 565, 384, 385, 386, 387, 346, 590, 1039,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	1051, 1037, 1047, 1038, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 1048, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 1035, 419, 437, 426, 205, 649, 510, 511,
	650, 621, 0, 0, 0, 0, 396, 0, 525, 558,
	547, 631, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 139, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2059, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 0, 450, 478, 329, 469, 0, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 494, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	520, 366, 168, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 1049, 1050, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 1023, 461,
	302, 1022, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 1051, 2080, 1047, 2081,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 1048,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 2960, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 2963, 0, 0, 0, 2962, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 1548, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 1546, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1544, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 1542, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 1546, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1544, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4023, 0, 227, 846, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	0, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	1546, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1544, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 652, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 2477, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 972, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 1546, 0, 0, 0, 308, 228, 507, 627,
	509, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1759, 0, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	0, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 2516, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 2518, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 525, 558,
	547, 631, 513, 0, 0, 0, 0, 0, 2127, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 0, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 2128, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 0, 450, 478, 329, 469, 0, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 494, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 3174, 3176, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 2539, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 1546, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 663, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 662, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 846, 0, 0, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 4000, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	0, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	3768, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 652, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 3901, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1773, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 308, 228, 507, 627,
	509, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	0, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3783, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 525, 558,
	547, 631, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 0, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 0, 450, 478, 329, 469, 0, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 494, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 3695, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 3206, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3224, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2059, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 3414,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	0, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 652, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 1546, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 2518, 0, 0, 0, 308, 228, 507, 627,
	509, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	0, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 2879, 0, 0, 0, 0, 0,
	0, 0, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 525, 558,
	547, 631, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 0, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2198,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 0, 450, 478, 329, 469, 0, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 494, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 2636, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 0, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2597, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 2595, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 445, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 2368, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 453, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	1913, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 453, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 525, 558, 547, 631, 513, 0,
	2041, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	0, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 445,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 652, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 1546, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 1946, 407, 293, 436,
	332, 379, 305, 307, 327, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 308, 228, 507, 627,
	509, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	0, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 1575, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 411, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 612, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621, 396, 0, 525, 558, 547,
	631, 513, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 663, 335, 0, 0, 365, 562, 544, 554, 545,
	530, 531, 532, 539, 345, 533, 534, 535, 505, 536,
	506, 537, 538, 0, 561, 512, 428, 380, 579, 578,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	227, 0, 0, 0, 0, 0, 0, 308, 228, 507,
	627, 509, 508, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 311, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 298, 434, 453, 309, 423, 466,
	314, 431, 445, 304, 395, 420, 0, 0, 300, 451,
	430, 377, 355, 356, 299, 0, 414, 333, 347, 330,
	393, 0, 450, 478, 329, 469, 0, 461, 302, 0,
	460, 392, 447, 452, 378, 372, 0, 301, 449, 376,
	371, 359, 337, 494, 360, 361, 351, 404, 369, 405,
	352, 382, 381, 383, 0, 0, 0, 0, 0, 489,
	490, 0, 0, 638, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 624, 0,
	463, 0, 0, 0, 0, 0, 0, 433, 0, 0,
	362, 0, 0, 0, 479, 0, 417, 398, 652, 0,
	0, 415, 367, 448, 406, 454, 435, 462, 411, 407,
	293, 436, 332, 379, 305, 307, 327, 334, 336, 338,
	339, 388, 389, 401, 422, 438, 439, 440, 331, 315,
	416, 316, 349, 317, 294, 323, 321, 324, 424, 325,
	296, 402, 444, 0, 344, 412, 375, 297, 374, 403,
	443, 442, 306, 470, 476, 477, 566, 0, 482, 653,
	654, 655, 491, 0, 408, 496, 497, 498, 500, 501,
	502, 503, 567, 584, 551, 521, 484, 575, 518, 522,
	523, 587, 0, 0, 0, 475, 363, 364, 0, 342,
	290, 291, 648, 328, 394, 589, 622, 623, 514, 0,
	576, 515, 524, 320, 548, 560, 559, 390, 474, 0,
	571, 574, 504, 647, 0, 568, 583, 651, 582, 644,
	400, 0, 421, 580, 527, 0, 572, 546, 0, 573,
	542, 577, 0, 516, 0, 429, 456, 468, 485, 488,
	517, 602, 603, 604, 295, 487, 606, 607, 608, 609,
	610, 611, 612, 605, 459, 549, 526, 552, 467, 529,
	528, 0, 0, 563, 483, 564, 565, 384, 385, 386,
	387, 346, 590, 313, 486, 410, 0, 550, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 556, 553, 656,
	0, 613, 614, 0, 0, 480, 481, 341, 348, 499,
	350, 312, 399, 343, 465, 357, 0, 492, 557, 493,
	616, 619, 617, 618, 391, 353, 354, 425, 358, 368,
	413, 464, 397, 418, 310, 455, 427, 373, 543, 570,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 279, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 598, 597, 596, 595,
	594, 593, 592, 591, 0, 0, 540, 441, 322, 284,
	318, 319, 326, 645, 642, 446, 646, 0, 292, 520,
	366, 0, 409, 340, 585, 586, 0, 637, 240, 241,
	242, 243, 244, 245, 246, 247, 285, 248, 249, 250,
	251, 252, 253, 254, 257, 258, 259, 260, 261, 262,
	263, 264, 588, 255, 256, 265, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 0,
	0, 0, 286, 287, 288, 289, 0, 0, 280, 281,
	282, 283, 0, 0, 0, 471, 472, 473, 495, 0,
	457, 519, 643, 0, 0, 0, 0, 0, 0, 0,
	569, 581, 615, 0, 625, 626, 628, 630, 629, 632,
	432, 0, 634, 635, 636, 633, 370, 419, 437, 426,
	0, 649, 510, 511, 650, 621, 396, 0, 525, 558,
	547, 631, 513, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 0, 0, 365, 562, 544, 554,
	545, 530, 531, 532, 539, 345, 533, 534, 535, 505,
	536, 506, 537, 538, 0, 561, 512, 428, 380, 579,
	578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 227, 0, 0, 0, 0, 0, 0, 308, 228,
	507, 627, 509, 508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 298, 434, 453, 309, 423,
	466, 314, 431, 445, 304, 395, 420, 0, 0, 300,
	451, 430, 377, 355, 356, 299, 0, 414, 333, 347,
	330, 393, 0, 450, 478, 329, 469, 0, 461, 302,
	0, 460, 392, 447, 452, 378, 372, 0, 301, 449,
	376, 371, 359, 337, 494, 360, 361, 351, 404, 369,
	405, 352, 382, 381, 383, 0, 0, 0, 0, 0,
	489, 490, 0, 0, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 673, 624,
	0, 463, 0, 0, 0, 0, 0, 0, 433, 0,
	0, 362, 0, 0, 0, 479, 0, 417, 398, 652,
	0, 0, 415, 367, 448, 406, 454, 435, 462, 411,
	407, 293, 436, 332, 379, 305, 307, 327, 334, 336,
	338, 339, 388, 389, 401, 422, 438, 439, 440, 331,
	315, 416, 316, 349, 317, 294, 323, 321, 324, 424,
	325, 296, 402, 444, 0, 344, 412, 375, 297, 374,
	403, 443, 442, 306, 470, 476, 477, 566, 0, 482,
	653, 654, 655, 491, 0, 408, 496, 497, 498, 500,
	501, 502, 503, 567, 584, 551, 521, 484, 575, 518,
	522, 523, 587, 0, 0, 0, 475, 363, 364, 0,
	342, 290, 291, 648, 328, 394, 589, 622, 623, 514,
	0, 576, 515, 524, 320, 548, 560, 559, 390, 474,
	0, 571, 574, 504, 647, 0, 568, 583, 651, 582,
	644, 400, 0, 421, 580, 527, 0, 572, 546, 0,
	573, 542, 577, 0, 516, 0, 429, 456, 468, 485,
	488, 517, 602, 603, 604, 295, 487, 606, 607, 608,
	609, 610, 611, 612, 605, 459, 549, 526, 552, 467,
	529, 528, 0, 0, 563, 483, 564, 565, 384, 385,
	386, 387, 346, 590, 313, 486, 410, 0, 550, 0,
	0, 0, 0, 0, 0, 0, 0, 555, 556, 553,
	656, 0, 613, 614, 0, 0, 480, 481, 341, 348,
	499, 350, 312, 399, 343, 465, 357, 0, 492, 557,
	493, 616, 619, 617, 618, 391, 353, 354, 425, 358,
	368, 413, 464, 397, 418, 310, 455, 427, 373, 543,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 279, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 597, 596,
	595, 594, 593, 592, 591, 0, 0, 540, 441, 322,
	284, 318, 319, 326, 645, 642, 446, 646, 0, 292,
	520, 366, 0, 409, 340, 585, 586, 0, 637, 240,
	241, 242, 243, 244, 245, 246, 247, 285, 248, 249,
	250, 251, 252, 253, 254, 257, 258, 259, 260, 261,
	262, 263, 264, 588, 255, 256, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	0, 0, 0, 286, 287, 288, 289, 0, 0, 280,
	281, 282, 283, 0, 0, 0, 471, 472, 473, 495,
	0, 457, 519, 643, 0, 0, 0, 0, 0, 0,
	0, 569, 581, 615, 0, 625, 626, 628, 630, 629,
	632, 432, 0, 634, 635, 636, 633, 370, 419, 437,
	426, 0, 649, 510, 511, 650, 621, 396, 0, 525,
	558, 547, 631, 513, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 335, 0, 0, 365, 562, 544,
	554, 545, 530, 531, 532, 539, 345, 533, 534, 535,
	505, 536, 506, 537, 538, 0, 561, 512, 428, 380,
	579, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 227, 0, 0, 0, 0, 0, 0, 308,
	228, 507, 627, 509, 508, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 311, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 298, 434, 453, 309,
	423, 466, 314, 431, 445, 304, 395, 420, 0, 0,
	300, 451, 430, 377, 355, 356, 299, 0, 414, 333,
	347, 330, 393, 0, 450, 478, 329, 469, 0, 461,
	302, 0, 460, 392, 447, 452, 378, 372, 0, 301,
	449, 376, 371, 359, 337, 494, 360, 361, 351, 404,
	369, 405, 352, 382, 381, 383, 0, 0, 0, 0,
	0, 489, 490, 0, 0, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	624, 0, 463, 0, 0, 0, 0, 0, 0, 433,
	0, 0, 362, 0, 0, 0, 479, 0, 417, 398,
	652, 0, 0, 415, 367, 448, 406, 454, 435, 462,
	411, 407, 293, 436, 332, 379, 305, 307, 327, 334,
	336, 338, 339, 388, 389, 401, 422, 438, 439, 440,
	331, 315, 416, 316, 349, 317, 294, 323, 321, 324,
	424, 325, 296, 402, 444, 0, 344, 412, 375, 297,
	374, 403, 443, 442, 306, 470, 476, 477, 566, 0,
	482, 653, 654, 655, 491, 0, 408, 496, 497, 498,
	500, 501, 502, 503, 567, 584, 551, 521, 484, 575,
	518, 522, 523, 587, 0, 0, 0, 475, 363, 364,
	0, 342, 290, 291, 648, 328, 394, 589, 622, 623,
	514, 0, 576, 515, 524, 320, 548, 560, 559, 390,
	474, 0, 571, 574, 504, 647, 0, 568, 583, 651,
	582, 644, 400, 0, 421, 580, 527, 0, 572, 546,
	0, 573, 542, 577, 0, 516, 0, 429, 456, 468,
	485, 488, 517, 602, 603, 604, 295, 487, 606, 607,
	608, 609, 610, 611, 612, 605, 459, 549, 526, 552,
	467, 529, 528, 0, 0, 563, 483, 564, 565, 384,
	385, 386, 387, 346, 590, 313, 486, 410, 0, 550,
	0, 0, 0, 0, 0, 0, 0, 0, 555, 556,
	553, 656, 0, 613, 614, 0, 0, 480, 481, 341,
	348, 499, 350, 312, 399, 343, 465, 357, 0, 492,
	557, 493, 616, 619, 617, 618, 391, 353, 354, 425,
	358, 368, 413, 464, 397, 418, 310, 455, 427, 373,
	543, 570, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 279, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 598, 597,
	596, 595, 594, 593, 592, 591, 972, 0, 540, 441,
	322, 284, 318, 319, 326, 645, 642, 446, 646, 0,
	292, 520, 366, 0, 409, 340, 585, 586, 0, 637,
	240, 241, 242, 243, 244, 245, 246, 247, 285, 248,
	249, 250, 251, 252, 253, 254, 257, 258, 259, 260,
	261, 262, 263, 264, 588, 255, 256, 265, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 0, 0, 0, 286, 287, 288, 289, 0, 0,
	280, 281, 282, 283, 0, 0, 0, 471, 472, 473,
	495, 0, 457, 519, 643, 0, 0, 0, 0, 0,
	0, 0, 569, 581, 615, 0, 625, 626, 628, 630,
	629, 632, 432, 0, 634, 635, 636, 633, 370, 419,
	437, 426, 0, 649, 510, 511, 650, 621, 396, 0,
	525, 558, 547, 631, 513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 335, 0, 0, 365, 562,
	544, 554, 545, 530, 531, 532, 539, 345, 533, 534,
	535, 505, 536, 506, 537, 538, 0, 561, 512, 428,
	380, 579, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 227, 0, 0, 0, 0, 0, 0,
	308, 228, 507, 627, 509, 508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 298, 434, 453,
	309, 423, 466, 314, 431, 445, 304, 395, 420, 0,
	0, 300, 451, 430, 377, 355, 356, 299, 0, 414,
	333, 347, 330, 393, 0, 450, 478, 329, 469, 0,
	461, 302, 0, 460, 392, 447, 452, 378, 372, 0,
	301, 449, 376, 371, 359, 337, 494, 360, 361, 351,
	404, 369, 405, 352, 382, 381, 383, 0, 0, 0,
	0, 0, 489, 490, 0, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 624, 0, 463, 0, 0, 0, 0, 0, 0,
	433, 0, 0, 362, 0, 0, 0, 479, 0, 417,
	398, 652, 0, 0, 415, 367, 448, 406, 454, 435,
	462, 411, 407, 293, 436, 332, 379, 305, 307, 327,
	334, 336, 338, 339, 388, 389, 401, 422, 438, 439,
	440, 331, 315, 416, 316, 349, 317, 294, 323, 321,
	324, 424, 325, 296, 402, 444, 0, 344, 412, 375,
	297, 374, 403, 443, 442, 306, 470, 476, 477, 566,
	0, 482, 653, 654, 655, 491, 0, 408, 496, 497,
	498, 500, 501, 502, 503, 567, 584, 551, 521, 484,
	575, 518, 522, 523, 587, 0, 0, 0, 475, 363,
	364, 0, 342, 290, 291, 648, 328, 394, 589, 622,
	623, 514, 0, 576, 515, 524, 320, 548, 560, 559,
	390, 474, 0, 571, 574, 504, 647, 0, 568, 583,
	651, 582, 644, 400, 0, 421, 580, 527, 0, 572,
	546, 0, 573, 542, 577, 0, 516, 0, 429, 456,
	468, 485, 488, 517, 602, 603, 604, 295, 487, 606,
	607, 608, 609, 610, 611, 612, 605, 459, 549, 526,
	552, 467, 529, 528, 0, 0, 563, 483, 564, 565,
	384, 385, 386, 387, 346, 590, 313, 486, 410, 0,
	550, 0, 0, 0, 0, 0, 0, 0, 0, 555,
	556, 553, 656, 0, 613, 614, 0, 0, 480, 481,
	341, 348, 499, 350, 312, 399, 343, 465, 357, 0,
	492, 557, 493, 616, 619, 617, 618, 391, 353, 354,
	425, 358, 368, 413, 464, 397, 418, 310, 455, 427,
	373, 543, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 279, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 598,
	597, 596, 595, 594, 593, 592, 591, 0, 0, 540,
	441, 322, 284, 318, 319, 326, 645, 642, 446, 646,
	0, 292, 520, 366, 0, 409, 340, 585, 586, 0,
	637, 240, 241, 242, 243, 244, 245, 246, 247, 285,
	248, 249, 250, 251, 252, 253, 254, 257, 258, 259,
	260, 261, 262, 263, 264, 588, 255, 256, 265, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 280, 281, 282, 283, 0, 0, 0, 471, 472,
	473, 495, 0, 457, 519, 643, 0, 0, 0, 0,
	0, 0, 0, 569, 581, 615, 0, 625, 626, 628,
	630, 629, 632, 432, 0, 634, 635, 636, 633, 370,
	419, 437, 426, 0, 649, 510, 511, 650, 621, 396,
	0, 525, 558, 547, 631, 513, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 335, 0, 0, 365,
	562, 544, 554, 545, 530, 531, 532, 539, 345, 533,
	534, 535, 505, 536, 506, 537, 538, 0, 561, 512,
	428, 380, 579, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 227, 0, 0, 0, 0, 0,
	0, 308, 228, 507, 627, 509, 508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 298, 434,
	453, 309, 423, 466, 314, 431, 1899, 304, 395, 420,
	0, 0, 300, 451, 430, 377, 355, 356, 299, 0,
	414, 333, 347, 330, 393, 0, 450, 478, 329, 469,
	0, 461, 302, 0, 460, 392, 447, 452, 378, 372,
	0, 301, 449, 376, 371, 359, 337, 494, 360, 361,
	351, 404, 369, 405, 352, 382, 381, 383, 0, 0,
	0, 0, 0, 489, 490, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 624, 0, 463, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 362, 0, 0, 0, 479, 0,
	417, 398, 652, 0, 0, 415, 367, 448, 406, 454,
	435, 462, 411, 407, 293, 436, 332, 379, 305, 307,
	327, 334, 336, 338, 339, 388, 389, 401, 422, 438,
	439, 440, 331, 315, 416, 316, 349, 317, 294, 323,
	321, 324, 424, 325, 296, 402, 444, 0, 344, 412,
	375, 297, 374, 403, 443, 442, 306, 470, 476, 477,
	566, 0, 482, 653, 654, 655, 491, 0, 408, 496,
	497, 498, 500, 501, 502, 503, 567, 584, 551, 521,
	484, 575, 518, 522, 523, 587, 0, 0, 0, 475,
	363, 364, 0, 342, 290, 291, 648, 328, 394, 589,
	622, 623, 514, 0, 576, 515, 524, 320, 548, 560,
	559, 390, 474, 0, 571, 574, 504, 647, 0, 568,
	583, 651, 582, 644, 400, 0, 421, 580, 527, 0,
	572, 546, 0, 573, 542, 577, 0, 516, 0, 429,
	456, 468, 485, 488, 517, 602, 603, 604, 295, 487,
	606, 607, 608, 609, 610, 611, 612, 605, 459, 549,
	526, 552, 467, 529, 528, 0, 0, 563, 483, 564,
	565, 384, 385, 386, 387, 346, 590, 313, 486, 410,
	0, 550, 0, 0, 0, 0, 0, 0, 0, 0,
	555, 556, 553, 656, 0, 613, 614, 0, 0, 480,
	481, 341, 348, 499, 350, 312, 399, 343, 465, 357,
	0, 492, 557, 493, 616, 619, 617, 618, 391, 353,
	354, 425, 358, 368, 413, 464, 397, 418, 310, 455,
	427, 373, 543, 570, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 279, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	598, 597, 596, 595, 594, 593, 592, 591, 0, 0,
	540, 441, 322, 284, 318, 319, 326, 645, 642, 446,
	646, 0, 292, 520, 366, 0, 409, 340, 585, 586,
	0, 637, 240, 241, 242, 243, 244, 245, 246, 247,
	285, 248, 249, 250, 251, 252, 253, 254, 257, 258,
	259, 260, 261, 262, 263, 264, 588, 255, 256, 265,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 0, 0, 0, 286, 287, 288, 289,
	0, 0, 280, 281, 282, 283, 0, 0, 0, 471,
	472, 473, 495, 0, 457, 519, 643, 0, 0, 0,
	0, 0, 0, 0, 569, 581, 615, 0, 625, 626,
	628, 630, 629, 632, 432, 0, 634, 635, 636, 633,
	370, 419, 437, 426, 0, 649, 510, 511, 650, 621,
	396, 0, 525, 558, 547, 631, 513, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 0, 0,
	365, 562, 544, 554, 545, 530, 531, 532, 539, 345,
	533, 534, 535, 505, 536, 506, 537, 538, 0, 561,
	512, 428, 380, 579, 578, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 227, 0, 0, 0, 0,
	0, 0, 308, 228, 507, 627, 509, 508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	434, 1525, 309, 423, 466, 314, 431, 445, 304, 395,
	420, 0, 0, 300, 451, 430, 377, 355, 356, 299,
	0, 414, 333, 347, 330, 393, 0, 450, 478, 329,
	469, 0, 461, 302, 0, 460, 392, 447, 452, 378,
	372, 0, 301, 449, 376, 371, 359, 337, 494, 360,
	361, 351, 404, 369, 405, 352, 382, 381, 383, 0,
	0, 0, 0, 0, 489, 490, 0, 0, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	620, 0, 0, 624, 0, 463, 0, 0, 0, 0,
	0, 0, 433, 0, 0, 362, 0, 0, 0, 479,
	0, 417, 398, 652, 0, 0, 415, 367, 448, 406,
	454, 435, 462, 411, 407, 293, 436, 332, 379, 305,
	307, 327, 334, 336, 338, 339, 388, 389, 401, 422,
	438, 439, 440, 331, 315, 416, 316, 349, 317, 294,
	323, 321, 324, 424, 325, 296, 402, 444, 0, 344,
	412, 375, 297, 374, 403, 443, 442, 306, 470, 476,
	477, 566, 0, 482, 653, 654, 655, 491, 0, 408,
	496, 497, 498, 500, 501, 502, 503, 567, 584, 551,
	521, 484, 575, 518, 522, 523, 587, 0, 0, 0,
	475, 363, 364, 0, 342, 290, 291, 648, 328, 394,
	589, 622, 623, 514, 0, 576, 515, 524, 320, 548,
	560, 559, 390, 474, 0, 571, 574, 504, 647, 0,
	568, 583, 651, 582, 644, 400, 0, 421, 580, 527,
	0, 572, 546, 0, 573, 542, 577, 0, 516, 0,
	429, 456, 468, 485, 488, 517, 602, 603, 604, 295,
	487, 606, 607, 608, 609, 610, 611, 612, 605, 459,
	549, 526, 552, 467, 529, 528, 0, 0, 563, 483,
	564, 565, 384, 385, 386, 387, 346, 590, 313, 486,
	410, 0, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 555, 556, 553, 656, 0, 613, 614, 0, 0,
	480, 481, 341, 348, 499, 350, 312, 399, 343, 465,
	357, 0, 492, 557, 493, 616, 619, 617, 618, 391,
	353, 354, 425, 358, 368, 413, 464, 397, 418, 310,
	455, 427, 373, 543, 570, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 279, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 598, 597, 596, 595, 594, 593, 592, 591, 0,
	0, 540, 441, 322, 284, 318, 319, 326, 645, 642,
	446, 646, 0, 292, 520, 366, 0, 409, 340, 585,
	586, 0, 637, 240, 241, 242, 243, 244, 245, 246,
	247, 285, 248, 249, 250, 251, 252, 253, 254, 257,
	258, 259, 260, 261, 262, 263, 264, 588, 255, 256,
	265, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 0, 0, 0, 286, 287, 288,
	289, 0, 0, 280, 281, 282, 283, 0, 0, 0,
	471, 472, 473, 495, 0, 457, 519, 643, 0, 0,
	0, 0, 0, 0, 0, 569, 581, 615, 0, 625,
	626, 628, 630, 629, 632, 432, 0, 634, 635, 636,
	633, 370, 419, 437, 426, 0, 649, 510, 511, 650,
	621, 396, 0, 525, 558, 547, 631, 513, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 335, 0,
	0, 365, 562, 544, 554, 545, 530, 531, 532, 539,
	345, 533, 534, 535, 505, 536, 506, 537, 538, 0,
	561, 512, 428, 380, 579, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 227, 0, 0, 0,
	0, 0, 0, 308, 228, 507, 627, 509, 508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	298, 434, 1523, 309, 423, 466, 314, 431, 445, 304,
	395, 420, 0, 0, 300, 451, 430, 377, 355, 356,
	299, 0, 414, 333, 347, 330, 393, 0, 450, 478,
	329, 469, 0, 461, 302, 0, 460, 392, 447, 452,
	378, 372, 0, 301, 449, 376, 371, 359, 337, 494,
	360, 361, 351, 404, 369, 405, 352, 382, 381, 383,
	0, 0, 0, 0, 0, 489, 490, 0, 0, 638,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 620, 0, 0, 624, 0, 463, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 362, 0, 0, 0,
	479, 0, 417, 398, 652, 0, 0, 415, 367, 448,
	406, 454, 435, 462, 411, 407, 293, 436, 332, 379,
	305, 307, 327, 334, 336, 338, 339, 388, 389, 401,
	422, 438, 439, 440, 331, 315, 416, 316, 349, 317,
	294, 323, 321, 324, 424, 325, 296, 402, 444, 0,
	344, 412, 375, 297, 374, 403, 443, 442, 306, 470,
	476, 477, 566, 0, 482, 653, 654, 655, 491, 0,
	408, 496, 497, 498, 500, 501, 502, 503, 567, 584,
	551, 521, 484, 575, 518, 522, 523, 587, 0, 0,
	0, 475, 363, 364, 0, 342, 290, 291, 648, 328,
	394, 589, 622, 623, 514, 0, 576, 515, 524, 320,
	548, 560, 559, 390, 474, 0, 571, 574, 504, 647,
	0, 568, 583, 651, 582, 644, 400, 0, 421, 580,
	527, 0, 572, 546, 0, 573, 542, 577, 0, 516,
	0, 429, 456, 468, 485, 488, 517, 602, 603, 604,
	295, 487, 606, 607, 608, 609, 610, 611, 612, 605,
	459, 549, 526, 552, 467, 529, 528, 0, 0, 563,
	483, 564, 565, 384, 385, 386, 387, 346, 590, 313,
	486, 410, 0, 550, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 553, 656, 0, 613, 614, 0,
	0, 480, 481, 341, 348, 499, 350, 312, 399, 343,
	465, 357, 0, 492, 557, 493, 616, 619, 617, 618,
	391, 353, 354, 425, 358, 368, 413, 464, 397, 418,
	310, 455, 427, 373, 543, 570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 279, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 598, 597, 596, 595, 594, 593, 592, 591,
	0, 0, 540, 441, 322, 284, 318, 319, 326, 645,
	642, 446, 646, 0, 292, 520, 366, 0, 409, 340,
	585, 586, 0, 637, 240, 241, 242, 243, 244, 245,
	246, 247, 285, 248, 249, 250, 251, 252, 253, 254,
	257, 258, 259, 260, 261, 262, 263, 264, 588, 255,
	256, 265, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 0, 0, 0, 286, 287,
	288, 289, 0, 0, 280, 281, 282, 283, 0, 0,
	0, 471, 472, 473, 495, 0, 457, 519, 643, 0,
	0, 0, 0, 0, 0, 0, 569, 581, 615, 0,
	625, 626, 628, 630, 629, 632, 432, 0, 634, 635,
	636, 633, 370, 419, 437, 426, 0, 649, 510, 511,
	650, 621, 396, 0, 525, 558, 547, 631, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 335,
	0, 0, 365, 562, 544, 554, 545, 530, 531, 532,
	539, 345, 533, 534, 535, 505, 536, 506, 537, 538,
	0, 561, 512, 428, 380, 579, 578, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 227, 0, 0,
	0, 0, 0, 0, 308, 228, 507, 627, 509, 508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 434, 453, 309, 423, 466, 314, 431, 1403,
	304, 395, 420, 0, 0, 300, 451, 430, 377, 355,
	356, 299, 0, 414, 333, 347, 330, 393, 0, 450,
	478, 329, 469, 0, 461, 302, 0, 460, 392, 447,
	452, 378, 372, 0, 301, 449, 376, 371, 359, 337,
	494, 360, 361, 351, 404, 369, 405, 352, 382, 381,
	383, 0, 0, 0, 0, 0, 489, 490, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 624, 0, 463, 0, 0,
	0, 0, 0, 0, 433, 0, 0, 362, 0, 0,
	0, 479, 0, 417, 398, 652, 0, 0, 415, 367,
	448, 406, 454, 435, 462, 411, 407, 293, 436, 332,
	379, 305, 307, 327, 334, 336, 338, 339, 388, 389,
	401, 422, 438, 439, 440, 331, 315, 416, 316, 349,
	317, 294, 323, 321, 324, 424, 325, 296, 402, 444,
	0, 344, 412, 375, 297, 374, 403, 443, 442, 306,
	470, 476, 477, 566, 0, 482, 653, 654, 655, 491,
	0, 408, 496, 497, 498, 500, 501, 502, 503, 567,
	584, 551, 521, 484, 575, 518, 522, 523, 587, 0,
	0, 0, 475, 363, 364, 0, 342, 290, 291, 648,
	328, 394, 589, 622, 623, 514, 0, 576, 515, 524,
	320, 548, 560, 559, 390, 474, 0, 571, 574, 504,
	647, 0, 568, 583, 651, 582, 644, 400, 0, 421,
	580, 527, 0, 572, 546, 0, 573, 542, 577, 0,
	516, 0, 429, 456, 468, 485, 488, 517, 602, 603,
	604, 295, 487, 606, 607, 608, 609, 610, 611, 612,
	605, 459, 549, 526, 552, 467, 529, 528, 0, 0,
	563, 483, 564, 565, 384, 385, 386, 387, 346, 590,
	313, 486, 410, 0, 550, 0, 0, 0, 0, 0,
	0, 0, 0, 555, 556, 553, 656, 0, 613, 614,
	0, 0, 480, 481, 341, 348, 499, 350, 312, 399,
	343, 465, 357, 0, 492, 557, 493, 616, 619, 617,
	618, 391, 353, 354, 425, 358, 368, 413, 464, 397,
	418, 310, 455, 427, 373, 543, 570, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 597, 596, 595, 594, 593, 592,
	591, 0, 0, 540, 441, 322, 284, 318, 319, 326,
	645, 642, 446, 646, 0, 292, 520, 366, 0, 409,
	340, 585, 586, 0, 637, 240, 241, 242, 243, 244,
	245, 246, 247, 285, 248, 249, 250, 251, 252, 253,
	254, 257, 258, 259, 260, 261, 262, 263, 264, 588,
	255, 256, 265, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 0, 0, 0, 286,
	287, 288, 289, 0, 0, 280, 281, 282, 283, 0,
	0, 0, 471, 472, 473, 495, 0, 457, 519, 643,
	0, 0, 0, 0, 0, 0, 0, 569, 581, 615,
	0, 625, 626, 628, 630, 629, 632, 432, 0, 634,
	635, 636, 633, 370, 419, 437, 426, 0, 649, 510,
	511, 650, 621, 396, 0, 525, 558, 547, 631, 513,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	335, 0, 0, 365, 562, 544, 554, 545, 530, 531,
	532, 539, 345, 533, 534, 535, 505, 536, 506, 537,
	538, 0, 561, 512, 428, 380, 579, 578, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 227, 0,
	0, 0, 0, 0, 0, 308, 228, 507, 627, 509,
	508, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 298, 434, 453, 309, 423, 466, 314, 431,
	445, 304, 395, 420, 0, 0, 300, 451, 430, 377,
	355, 356, 299, 0, 414, 333, 347, 330, 393, 0,
	450, 478, 329, 469, 0, 461, 302, 0, 460, 392,
	447, 452, 378, 372, 0, 301, 449, 376, 371, 359,
	337, 494, 360, 361, 351, 404, 369, 405, 352, 382,
	381, 383, 0, 0, 0, 0, 0, 489, 490, 0,
	0, 638, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 624, 0, 463, 0,
	0, 0, 0, 0, 0, 433, 0, 0, 362, 0,
	0, 0, 479, 0, 417, 398, 652, 0, 0, 415,
	367, 448, 406, 454, 435, 462, 411, 407, 293, 436,
	332, 379, 305, 307, 741, 334, 336, 338, 339, 388,
	389, 401, 422, 438, 439, 440, 331, 315, 416, 316,
	349, 317, 294, 323, 321, 324, 424, 325, 296, 402,
	444, 0, 344, 412, 375, 297, 374, 403, 443, 442,
	306, 470, 476, 477, 566, 0, 482, 653, 654, 655,
	491, 0, 408, 496, 497, 498, 500, 501, 502, 503,
	567, 584, 551, 521, 484, 575, 518, 522, 523, 587,
	0, 0, 0, 475, 363, 364, 0, 342, 290, 291,
	648, 328, 394, 589, 622, 623, 514, 0, 576, 515,
	524, 320, 548, 560, 559, 390, 474, 0, 571, 574,
	504, 647, 0, 568, 583, 651, 582, 644, 400, 0,
	421, 580, 527, 0, 572, 546, 0, 573, 542, 577,
	0, 516, 0, 429, 456, 468, 485, 488, 517, 602,
	603, 604, 295, 487, 606, 607, 608, 609, 610, 611,
	612, 605, 459, 549, 526, 552, 467, 529, 528, 0,
	0, 563, 483, 564, 565, 384, 385, 386, 387, 346,
	590, 313, 486, 410, 0, 550, 0, 0, 0, 0,
	0, 0, 0, 0, 555, 556, 553, 656, 0, 613,
	614, 0, 0, 480, 481, 341, 348, 499, 350, 312,
	399, 343, 465, 357, 0, 492, 557, 493, 616, 619,
	617, 618, 391, 353, 354, 425, 358, 368, 413, 464,
	397, 418, 310, 455, 427, 373, 543, 570, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 598, 597, 596, 595, 594, 593,
	592, 591, 0, 0, 540, 441, 322, 284, 318, 319,
	326, 645, 642, 446, 646, 0, 292, 520, 366, 0,
	409, 340, 585, 586, 0, 637, 240, 241, 242, 243,
	244, 245, 246, 247, 285, 248, 249, 250, 251, 252,
	253, 254, 257, 258, 259, 260, 261, 262, 263, 264,
	588, 255, 256, 265, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 0, 0, 0,
	286, 287, 288, 289, 0, 0, 280, 281, 282, 283,
	0, 0, 0, 471, 472, 473, 495, 0, 457, 519,
	643, 0, 0, 0, 0, 0, 0, 0, 569, 581,
	615, 0, 625, 626, 628, 630, 629, 632, 432, 0,
	634, 635, 636, 633, 370, 419, 437, 426, 0, 649,
	510, 511, 650, 621, 396, 0, 525, 558, 547, 631,
	513, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 335, 0, 0, 365, 562, 544, 554, 545, 530,
	531, 532, 539, 345, 533, 534, 535, 505, 536, 506,
	537, 538, 0, 561, 512, 428, 380, 579, 578, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 227,
	0, 0, 0, 0, 0, 0, 308, 228, 507, 627,
	509, 508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 434, 453, 309, 423, 466, 314,
	431, 445, 304, 395, 420, 0, 0, 300, 451, 430,
	377, 355, 356, 299, 0, 414, 333, 347, 330, 393,
	0, 450, 478, 329, 469, 0, 461, 302, 0, 460,
	392, 447, 452, 378, 372, 0, 301, 449, 376, 371,
	359, 337, 494, 360, 361, 351, 404, 369, 405, 352,
	382, 381, 383, 0, 0, 0, 0, 0, 489, 490,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 624, 0, 463,
	0, 0, 0, 0, 0, 0, 433, 0, 0, 362,
	0, 0, 0, 479, 0, 417, 398, 652, 0, 0,
	415, 367, 448, 406, 454, 435, 462, 698, 407, 293,
	436, 332, 379, 305, 307, 327, 334, 336, 338, 339,
	388, 389, 401, 422, 438, 439, 440, 331, 315, 416,
	316, 349, 317, 294, 323, 321, 324, 424, 325, 296,
	402, 444, 0, 344, 412, 375, 297, 374, 403, 443,
	442, 306, 470, 476, 477, 566, 0, 482, 653, 654,
	655, 491, 0, 408, 496, 497, 498, 500, 501, 502,
	503, 567, 584, 551, 521, 484, 575, 518, 522, 523,
	587, 0, 0, 0, 475, 363, 364, 0, 342, 290,
	291, 648, 328, 394, 589, 622, 623, 514, 0, 576,
	515, 524, 320, 548, 560, 559, 390, 474, 0, 571,
	574, 504, 647, 0, 568, 583, 651, 582, 644, 400,
	0, 421, 580, 527, 0, 572, 546, 0, 573, 542,
	577, 0, 516, 0, 429, 456, 468, 485, 488, 517,
	602, 603, 604, 295, 487, 606, 607, 608, 609, 610,
	611, 699, 605, 459, 549, 526, 552, 467, 529, 528,
	0, 0, 563, 483, 564, 565, 384, 385, 386, 387,
	346, 590, 313, 486, 410, 0, 550, 0, 0, 0,
	0, 0, 0, 0, 0, 555, 556, 553, 656, 0,
	613, 614, 0, 0, 480, 481, 341, 348, 499, 350,
	312, 399, 343, 465, 357, 0, 492, 557, 493, 616,
	619, 617, 618, 391, 353, 354, 425, 358, 368, 413,
	464, 397, 418, 310, 455, 427, 373, 543, 570, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 597, 596, 595, 594,
	593, 592, 591, 0, 0, 540, 441, 322, 284, 318,
	319, 326, 645, 642, 446, 646, 0, 292, 520, 366,
	0, 409, 340, 585, 586, 0, 637, 240, 241, 242,
	243, 244, 245, 246, 247, 285, 248, 249, 250, 251,
	252, 253, 254, 257, 258, 259, 260, 261, 262, 263,
	264, 588, 255, 256, 265, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 0, 0,
	0, 286, 287, 288, 289, 0, 0, 280, 281, 282,
	283, 0, 0, 0, 471, 472, 473, 495, 0, 457,
	519, 643, 0, 0, 0, 0, 0, 0, 0, 569,
	581, 615, 0, 625, 626, 628, 630, 629, 632, 432,
	0, 634, 635, 636, 633, 370, 419, 437, 426, 0,
	649, 510, 511, 650, 621,
}

var yyPact = [...]int{
	357, -1000, -1000, -1000, -327, 16449, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 50555, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 439, 50555, -325, 32256, 48662, -1000, -1000, 2835, -1000,
	49293, 18362, 50555, 545, 543, 50555, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 966, -1000, 54341, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 890, 5250, 53710, 12636, -210,
	-1000, 1579, -33, 2675, 527, -194, -202, 1153, 1178, 1213,
	1047, 50555, 1104, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 455, 1007, 49924, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4032, 246, 963, 1007, 23418, 125, 123,
	1579, 468, -80, 223, -1000, 1379, 4096, 200, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12636,
	12636, 16449, -375, 16449, 12636, 50555, 50555, -1000, -1000, -1000,
	-1000, -325, 49293, 890, 5250, 12636, 2675, 527, -194, -202,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -80, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 123, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 5047,
	-1000, 1643, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2381, 3212, 1639,
	2673, 841, 48662, 50555, -1000, 150, 841, -1000, -1000, -1000,
	1579, 3560, -1000, 50555, 50555, 218, 1980, -1000, 493, 469,
	412, 463, 350, 1616, -1000, -1000, -1000, -1000, -1000, -1000,
	766, 3540, -1000, 50555, 50555, 3226, 50555, -1000, 2355, 793,
	-1000, 5394, 3375, 1442, 1005, 3235, -1000, -1000, 3211, -1000,
	367, 332, 344, 759, 435, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 321, -1000, 3444, -1000, -1000, 338, -1000, -1000,
	327, -1000, -1000, -1000, 97, -1000, -1000, -1000, -1000, -1000,
	-1000, -5, -1000, -1000, 1218, 2219, 12636, 2176, -1000, 2902,
	1700, -1000, -1000, -1000, 8192, 15172, 15172, 15172, 15172, 50555,
	-1000, -1000, 3051, 12636, 3209, 3197, 3196, 3195, -1000, -1000,
	-1000, -1000, -1000, -1000, 3193, 1613, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2127, -1000, -1000, -1000, 15806,
	-1000, 3191, 3190, 3189, 3187, 3185, 3184, 3174, 3173, 3172,
	3169, 3168, 3167, 3166, 3165, 2915, 17721, 3160, 2662, 2661,
	3157, 3156, 3154, 2645, 3151, 3150, 3147, 2915, 2915, 3137,
	3132, 3131, 3117, 3116, 3102, 3101, 3099, 3096, 3094, 3093,
	3092, 3090, 3088, 3087, 3086, 3085, 3080, 3079, 3077, 3076,
	3075, 3073, 3071, 3069, 3068, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1376,
	-1000, 3066, 3538, 2995, -1000, 3445, 3442, 3435, 3396, -265,
	3065, 2305, -1000, -1000, 103, 3539, 50555, -285, 50555, 426,
	-90, -91, -93, -1000, -76, -1000, -1000, 1129, -1000, 1084,
	53079, 935, -1000, -1000, 50555, 879, 879, 879, 50555, 50555,
	217, 831, 879, 879, 879, 879, 879, 945, 879, 3464,
	954, 952, 951, 950, 879, -40, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1978, 1976, 3303, 1068, -1000, -1000, -1000,
	-1000, 1512, 50555, -1000, 3021, 426, -314, 1901, 1901, 3522,
	3522, 3463, 815, 806, 784, 1901, 602, -1000, 1868, 1868,
	1868, 1868, 1901, 542, 823, 3467, 3467, 167, 1868, 79,
	1901, 1901, 79, 1901, 1901, -1000, 1955, 273, -271, -1000,
	-1000, -1000, -1000, 1868, 1868, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3432, 3427, 890, 890, 50555, 890, 210, 50555,
	890, 890, 890, 50555, 895, -312, 28, 52448, 51817, 2370,
	2355, 792, 788, 1531, 1964, -1000, 1754, 50555, 50555, 1754,
	1754, 26577, 25946, -1000, 50555, -1000, 3538, 2995, 2880, 1567,
	2879, 2995, -94, 426, 890, 890, 890, 890, 890, 286,
	890, 890, 890, 890, 890, 50555, 50555, 48031, 890, 890,
	890, 890, 10728, 6281, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16449, 2148,
	2215, 199, -12, -304, 261, -1000, -1000, 50555, 3353, 320,
	-1000, -1000, -1000, 2986, -1000, 2997, 2997, 2997, 2997, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2997,
	2997, 3015, 3062, -1000, -1000, 2996, 2996, 2996, 2986, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2998, 2998, 3000, 3000, 2998, 50555,
	-113, -1000, -1000, 12636, 50555, 3368, 473, 3061, 841, -1000,
	-1000, 50555, 187, 502, 3538, 3367, 3467, 3517, -1000, -1000,
	1593, 2304, 2635, -1000, 350, -1000, 416, 350, -1000, 522,
	522, 1847, -1000, 1169, -1000, -1000, -1000, -1000, -1000, -1000,
	50555, -5, 441, -1000, -1000, 2608, 3060, -1000, 657, 1400,
	1372, -1000, 283, 4368, 41090, 2355, 41090, 50555, -1000, -1000,
	-1000, -1000, -1000, -1000, 88, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 335,
	-1000, 12636, 12636, 12636, 12636, 12636, -1000, 712, 14538, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 15172, 15172, 15172, 15172,
	15172, 15172, 15172, 15172, 15172, 15172, 15172, 15172, 3049, 1965,
	15172, 15172, 15172, 15172, 29101, 1567, 3152, 1514, 312, 1700,
	1700, 1700, 1700, 12636, -1000, 1998, 2219, 12636, 12636, 12636,
	12636, 35411, 50555, -1000, -1000, 4666, 12636, 12636, 5598, 12636,
	3392, 12636, 12636, 12636, 2875, 6915, 50555, 12636, -1000, 2873,
	2871, -1000, -1000, 2238, 12636, -1000, -1000, 12636, -1000, -1000,
	12636, 15172, 12636, -1000, 12636, 12636, 12636, -1000, -1000, 830,
	3392, 3392, 3392, 1940, 12636, 12636, 3392, 3392, 3392, 1896,
	3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392, 3392,
	3392, 2870, 2867, 2866, 12002, 3467, -210, -1000, 10094, 3367,
	3467, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -267, 3054, 50555, 2634, 2631, -334, 185, 458, 50555,
	1190, -1000, -1000, 50555, 2303, 50555, 2301, 82, 1144, 1088,
	1095, -1000, -1000, 50555, 51186, -1000, 50555, 2009, 50555, 50555,
	3385, -1000, 3053, 50555, 879, 879, 879, -1000, 46138, 41090,
	50555, 50555, 2355, 50555, 50555, 50555, 879, 879, 879, 879,
	50555, -1000, 3314, 41090, 3309, 895, -1000, 50555, 1512, 3384,
	50555, -1000, -1000, -1000, -1000, 3522, 15172, 15172, -1000, -1000,
	12636, -1000, 47400, 1868, 1901, 1901, -1000, -1000, 50555, -1000,
	-1000, -1000, 1868, 50555, 1868, 1868, 3522, 1868, -1000, -1000,
	-1000, 1901, 1901, -1000, -1000, 12636, -1000, -1000, 1868, 1868,
	-1000, -1000, 3522, 50555, 84, 3522, 3522, 107, -1000, -1000,
	-1000, 1901, 50555, 50555, 879, 50555, -1000, 50555, 50555, -1000,
	-1000, 50555, 50555, 4536, 50555, 46138, 46769, 3422, -1000, 41090,
	50555, 50555, 1506, -1000, 934, 38566, -1000, 50555, 1387, -1000,
	18, -1000, 67, 28, 1754, 28, 1754, 926, -1000, 641,
	739, 24684, 569, 41090, 7549, -1000, -1000, 1754, 1754, 7549,
	7549, 1710, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1501,
	-1000, 267, 3467, -1000, -1000, -1000, -1000, -1000, 2296, -1000,
	50555, 46138, 41090, 2355, 50555, 890, 50555, 50555, 50555, 50555,
	50555, -1000, 3052, 1592, -1000, 3374, 50555, 50555, 50555, 50555,
	1354, -1000, -1000, 21517, 1591, 1354, -1000, -1000, -1000, -1000,
	2014, -1000, 12636, 16449, -240, 12636, 16449, 16449, 12636, 16449,
	-1000, 12636, 303, -1000, -1000, -1000, -1000, 2295, -1000, 2293,
	-1000, -1000, -1000, -1000, -1000, 2630, 2630, -1000, 2290, -1000,
	-1000, -1000, -1000, 2289, -1000, -1000, 2286, -1000, -1000, -1000,
	-1000, -152, 2863, 1218, -1000, 2625, 3234, -211, -1000, 22787,
	50555, 50555, 473, -344, 1971, 1970, 1961, -1000, -211, -1000,
	22152, 50555, 3467, -1000, -216, 3367, 12636, 50555, -1000, 3462,
	-1000, -1000, 350, -1000, -1000, -1000, 522, 440, -1000, -1000,
	-1000, -1000, -1000, -1000, 1590, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 432, -81, -92, 1486, -1000,
	50555, -1000, -1000, 283, 41090, 42983, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 276, -1000, -1000, 183, -1000, 922, 265,
	1833, -1000, -1000, 224, 216, 227, 1021, 2219, -1000, 2031,
	2031, 2053, -1000, 760, -1000, -1000, -1000, -1000, 3051, -1000,
	-1000, -1000, 2133, 1694, -1000, 1879, 1879, 1660, 1660, 1660,
	1660, 1660, 2107, 2107, -1000, -1000, -1000, 8192, 3049, 15172,
	15172, 15172, 15172, 975, 975, 3486, 3064, -1000, -1000, -1000,
	-1000, 12636, 180, 2006, -1000, 12636, 2761, 1509, 2598, 1363,
	1812, -1000, 2986, 12636, 1589, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2861, 2856, 2511, 3537, 2849,
	12636, -1000, -1000, 1811, 1810, 1807, -1000, 2294, 11368, -1000,
	-1000, -1000, 2846, 1587, 2845, -1000, -1000, -1000, 2839, 1805,
	1389, 2836, 1873, 2833, 2810, 2805, 2798, 1484, 12636, 12636,
	12636, 12636, 2795, 1786, 1783, 12636, 12636, 12636, 12636, 2794,
	12636, 12636, 12636, 12636, 12636, 12636, 12636, 12636, 12636, 12636,
	50555, 140, 140, 140, 1467, 1455, -1000, -1000, 1781, -1000,
	2219, -1000, -1000, 3367, -1000, 3048, 2283, 1436, -1000, -1000,
	-322, 2552, 50555, 50555, 179, 50555, 2619, -286, 50555, -1000,
	-1000, 2613, -1000, -1000, -1000, 1142, 1082, 1116, -1000, 50555,
	-1000, 2610, 3373, 3461, 880, 50555, 1231, 3047, 50555, 50555,
	50555, 289, -1000, -1000, 1329, -1000, 265, -19, 548, 1229,
	3225, 3534, -126, 50555, 50555, 50555, 50555, 3383, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 45507, -1000, 3046, 1780,
	-1000, -1000, 1700, 1700, 2219, 3222, 50555, 50555, 3522, 3522,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1868, 3522, 3522,
	1711, 1901, 1868, -1000, -1000, 1868, -344, -1000, 1868, -1000,
	-344, 1583, -344, 50555, -1000, -1000, -1000, 3382, 3021, 1405,
	-1000, -1000, -1000, 3514, 1566, 863, 863, 1123, 820, 3513,
	20255, -1000, 1774, 1361, 920, 3332, 365, -1000, 1774, -149,
	843, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 747, 744,
	1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774,
	1774, 1163, 1774, 1774, 1774, 1774, 1774, -1000, 1774, 3042,
	538, -1000, -1000, -1000, -1000, -1000, -1000, 782, 678, 287,
	3419, 403, -1000, 399, 1329, 323, 3408, 429, 50555, 50555,
	3521, 1461, -1000, -1000, -1000, -1000, -1000, 29732, 29732, 24053,
	29732, -1000, 193, 1754, 28, 73, -1000, -1000, 1387, 7549,
	1387, 7549, 2281, -1000, -1000, 919, -1000, -1000, 1229, -1000,
	50555, 50555, -1000, -1000, 3040, 1958, -1000, -1000, 17721, -1000,
	7549, 7549, -1000, -1000, 31625, 50555, -1000, -7, -1000, 9,
	3367, -1000, 1222, -1000, -1000, 1386, 1229, 3232, 50555, 1222,
	1222, 1222, -1000, -1000, 18993, 50555, 50555, -1000, -1000, -1000,
	-1000, 3522, 10728, -1000, 38566, -1000, -1000, 44876, -1000, 44245,
	3522, 1984, -1000, 16449, 2121, 192, -1000, 253, -307, 191,
	1997, 190, 2219, -1000, -1000, 2793, 2784, 1776, -1000, 1773,
	2783, 1771, 1764, 2280, -1000, 42, -1000, 3356, 1238, -1000,
	3038, -1000, 1746, 3300, -1000, 1384, -1000, 1956, 1745, -1000,
	-1000, -1000, 12636, 43614, 12636, 1238, 1744, 3298, 1384, 3367,
	2609, -1000, 1383, -1000, 2234, 1577, 196, -1000, -1000, -1000,
	50555, 890, 2608, 1743, 42983, 1326, -1000, 912, 1573, 1565,
	-1000, 41090, 347, 41090, -1000, 41090, -1000, -1000, 418, -1000,
	50555, 3360, -1000, -1000, -1000, 2552, 1953, -342, 50555, -1000,
	-1000, -1000, -1000, -1000, 1731, -1000, 975, 975, 3486, 1928,
	-1000, 15172, -1000, 15172, 3148, -1000, 1968, -1000, 12636, 2110,
	4949, 12636, 4949, 1444, 27839, 35411, -100, 3366, 3113, 50555,
	-1000, -1000, 12636, 12636, -1000, 3082, -1000, -1000, -1000, -1000,
	12636, 12636, 2375, -1000, 50555, -1000, -1000, -1000, -1000, 27839,
	-1000, 15172, -1000, -1000, -1000, -1000, 12636, 1371, 1371, 3028,
	1721, 140, 140, 140, 2988, 2944, 2909, 1719, 140, 2883,
	2813, 2722, 2706, 2686, 2617, 2593, 2555, 2544, 2522, 1717,
	-1000, 3037, -1000, -1000, 2100, 13904, 10094, -1000, -1000, 328,
	1381, 2277, 2605, 139, -1000, 1935, -1000, 2601, 50555, 50555,
	1183, -1000, 50555, 3533, -1000, -1000, -1000, -1000, 1079, -1000,
	2600, -1000, 476, 2167, 221, 314, 2780, 1377, -1000, -1000,
	50555, -1000, -1000, -1000, 18993, 3021, 3035, 3021, 163, 1774,
	629, 41090, 778, -1000, 50555, 2130, 1930, 3231, 807, 3351,
	50555, 3034, 427, 3033, 3032, 3380, 504, 5189, 50555, 1336,
	-1000, 1562, 4096, -1000, 50555, -1000, 2355, -1000, 1901, -1000,
	-1000, 3522, -1000, -1000, 12636, 12636, 3522, 1901, 1901, -1000,
	1868, -1000, 50555, -1000, -344, 504, 5189, 3379, 4669, 594,
	2886, -1000, 50555, -1000, -1000, -1000, 905, -1000, 1076, 879,
	50555, 2074, 1076, 2072, 3027, -1000, -1000, 50555, 50555, 50555,
	50555, -1000, -1000, 50555, -1000, 50555, 50555, 50555, 50555, 50555,
	42352, -1000, 50555, 50555, -1000, 50555, 2069, 50555, 2067, 3329,
	-1000, 1774, 1774, 1038, -1000, -1000, 626, -1000, 42352, 2276,
	2273, 2266, 2264, 2599, 2596, 2595, 1774, 1774, 2263, 2594,
	41721, 2590, 1236, 2262, 2259, 2258, 2271, 2589, 1050, -1000,
	2587, 2245, 2199, 2197, 50555, 3026, 2434, 525, -1000, -1000,
	2167, 163, 1774, 401, 50555, 1921, 1920, 629, 612, 539,
	-20, 25315, -1000, -1000, -1000, 50555, 38566, 38566, 38566, 38566,
	38566, 38566, -1000, 3274, 3250, 3273, -1000, 3262, 3251, 3278,
	3272, 2953, 50555, 38566, 3021, -1000, 41721, -1000, -1000, -1000,
	1567, 1712, 3215, 1090, 12636, 7549, -1000, -1000, 14, 50,
	-1000, -1000, -1000, -1000, 41090, 2576, 569, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3459, 50555, 50555, 872, 2774, 1374,
	-1000, -1000, -1000, 5189, 2997, 2997, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2997, 2997, 3015, -1000, -1000,
	2996, 2996, 2996, 2986, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2998, 2998, 3000, 3000, 2998, -1000,
	-1000, 3520, -1000, 1349, -1000, -1000, 1549, -1000, 3520, 2000,
	-328, 16449, 1995, 1809, -1000, 12636, 16449, 12636, -241, 385,
	-243, -1000, -1000, -1000, 2564, -1000, -1000, -1000, 2257, -1000,
	2256, -1000, 202, 206, 2065, -211, 10094, 464, 50555, -211,
	50555, 10094, -1000, 50555, 176, -351, -353, 172, 402, -211,
	3459, 42, 12636, 3330, -1000, -1000, 50555, 2255, -1000, -1000,
	-1000, 3528, 41090, 2355, 1729, 40459, -1000, 333, -1000, 263,
	615, 2559, -1000, 949, 138, 2554, 2552, -1000, -1000, -1000,
	-1000, 15172, 1700, -1000, -1000, -1000, 2219, 12636, 2772, -1000,
	1098, 1098, 2341, 2771, 2768, -1000, 2997, 2997, -1000, 2986,
	2996, 2986, 1098, 1098, 2763, -1000, 2981, -1000, 3366, -1000,
	2181, 2500, -1000, 2496, 2474, 12636, -1000, 2754, 2947, 1413,
	-44, -180, 140, 140, -1000, -1000, -1000, -1000, 140, 140,
	140, 140, -1000, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 842, -95, -275, -96, -276, -1000,
	2753, 1342, -1000, -1000, -1000, -1000, -1000, 5598, 1341, 555,
	555, 2552, 2551, -1000, 899, 2537, 1135, 50555, 2532, -289,
	-1000, 2531, -1000, -1000, 50555, 2527, -1000, 646, 50555, 50555,
	2515, 2512, 1231, 5189, 2747, 3378, 19624, 3377, 2317, -1000,
	-1000, -1000, 30994, 612, -1000, -1000, -1000, 733, 319, 2253,
	591, -1000, 50555, 547, 3181, 1919, 2502, 50555, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3351, -1000, 946, 497, 37304,
	17090, -1000, 411, 50555, -1000, 19624, 19624, 411, 503, 1942,
	-1000, 841, 1398, 144, 38566, 50555, -1000, 37935, 2745, -1000,
	1229, 3522, -1000, 2219, 2219, -344, 3522, 3522, 1901, -1000,
	-1000, 503, -1000, 411, -1000, 933, 20886, 571, 534, 518,
	-1000, 699, -1000, -1000, 837, 3326, 5189, -1000, 50555, -1000,
	50555, -1000, 50555, 50555, 879, 12636, 3326, 50555, 898, -1000,
	1201, 474, 461, 803, 803, 1338, -1000, 3366, -1000, -1000,
	1330, -1000, -1000, -1000, -1000, 50555, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 27839, 27839, 3402, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2492,
	2483, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	50555, 1709, -1000, 1918, 2242, 2480, 2317, 30994, 1914, 1754,
	2479, 2472, 612, -1000, 2471, 2470, 2130, 1912, 937, 50555,
	-1000, 1224, 50555, 50555, -1000, 1355, -1000, 1907, 3219, 3230,
	3219, -1000, 3219, -1000, -1000, -1000, -1000, -1000, -1000, 3265,
	-1000, 3264, -1000, -1000, -1000, -1000, 1355, -1000, -1000, -1000,
	-1000, -1000, 1090, -1000, 3455, 1076, 1076, 1076, 2741, -1000,
	-1000, -1000, -1000, 1326, 2737, -1000, -1000, -1000, 3548, -1000,
	-1000, -1000, -1000, -1000, -1000, 18993, 3348, 3487, 3508, 39828,
	3487, -1000, -328, 1784, -1000, 2099, 188, 1939, 50555, -1000,
	-1000, -1000, 2729, 2723, -219, 211, 3506, 3504, 1124, -1000,
	2721, 1271, -211, -1000, -1000, 1238, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -211, -1000, 1238, -1000, 202, -1000, -1000,
	3336, -1000, -1000, 2355, -1000, 257, -1000, -1000, -1000, -1000,
	-1000, -1000, 240, -1000, 50555, -1000, 1242, 122, -1000, 2219,
	-1000, -1000, -1000, -1000, -1000, 4949, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2463, -1000, -1000, 12636,
	-1000, -1000, -1000, 2462, -1000, -1000, 12636, 2719, 2459, 2718,
	2450, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3538, -1000,
	3501, 1697, 2717, 2711, 1696, 2708, 2705, -1000, 12636, 2704,
	5598, 1033, 2449, 1033, -1000, -1000, 428, 30363, 50555, 3524,
	-1000, 50555, 2441, -1000, -1000, 2167, 642, 679, -1000, -1000,
	-1000, -1000, 980, 411, 2703, 1241, -1000, -1000, -1000, -1000,
	411, -1000, 2440, 264, -1000, -1000, -1000, -1000, 2241, -1000,
	-1000, 2188, 1564, 278, -1000, -1000, -1000, -1000, -1000, -1000,
	2154, 50555, 39197, 2291, 1872, -345, -1000, 2978, -1000, 1774,
	1774, 1774, 50555, 1692, -1000, 1774, 1774, 2698, -1000, -1000,
	2693, 2690, -129, 847, 1911, 1906, -1000, 2226, 29732, 38566,
	37935, 1345, -1000, 1544, -1000, -1000, -1000, -1000, -1000, -1000,
	3522, 847, -1000, 565, 2221, 15172, 2971, 15172, 2970, 582,
	2951, 1690, -1000, 50555, -1000, -1000, 50555, 3908, 2950, -1000,
	2949, 3220, 554, 2946, 2942, 50555, 2453, -1000, 3326, 50555,
	761, 3342, -1000, -1000, -1000, 446, -1000, -1000, 616, -1000,
	50555, -1000, 50555, -1000, 1699, -1000, 27839, -1000, -1000, 1657,
	-1000, 2434, 2432, 5598, -1000, -1000, 264, 2431, 7549, -1000,
	-1000, -1000, -1000, -1000, 3181, 2430, 2154, 50555, -1000, 50555,
	1224, 1224, 3538, 50555, 10094, -1000, -1000, 12636, 2941, -1000,
	12636, -1000, -1000, -1000, -1000, -1000, -1000, 2933, 3312, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1446, -1000, 12636, 13270,
	-1000, -1000, 877, 16449, -244, 380, -1000, -1000, -1000, -221,
	2428, -1000, -1000, 3500, 2427, 2351, 50555, -1000, -1000, 1238,
	1238, -219, -1000, -1000, 1229, -1000, -1000, 1170, 756, -1000,
	2689, 277, -1000, 2443, -1000, 2367, 140, -1000, 140, -1000,
	252, 12636, -1000, 2425, -1000, -1000, -1000, 2424, -1000, -1000,
	2285, -1000, 2688, -1000, 2421, -1000, -1000, 50555, -1000, -1000,
	1128, 2420, -346, 2418, 2167, 2167, 50555, 5189, -130, -129,
	19624, -130, -1000, -1000, 400, 408, -1000, -1000, 2186, 650,
	-1000, -1000, 2417, 614, -1000, 1224, -1000, 1825, 2081, 2377,
	35411, 27839, 29101, 2415, -1000, -1000, 37304, 1446, 1446, 5437,
	335, 5753, -1000, 2932, 1188, 1848, -1000, 2220, -1000, 2217,
	-1000, 3522, 1345, 143, -1000, -1000, 1727, -1000, 1188, 2886,
	3498, -1000, 2767, 50555, 2597, 50555, 2930, 1824, 15172, -1000,
	837, 3297, -1000, -1000, 3908, -1000, -1000, 2086, 15172, -1000,
	-1000, 2413, 29101, 995, 1814, 1795, 1029, 2929, -1000, 697,
	3547, -1000, -1000, -1000, 1032, 2928, -1000, 2061, 2059, -1000,
	50555, -1000, 35411, 35411, 776, 776, 35411, 35411, 2927, 803,
	-1000, -1000, 15172, -1000, -1000, 1774, -1000, -1000, -1000, 1774,
	1652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2291, -1000,
	-1000, 1222, -1000, 3467, -1000, -1000, 2219, 50555, 2219, 36673,
	-1000, 3497, 3494, -1000, 2219, 254, 259, 2926, 2925, -1000,
	-328, 50555, 50555, -226, 2216, -1000, 2412, 198, -1000, -1000,
	1220, -221, -230, 107, 27839, 1791, -1000, 2687, 368, -139,
	-1000, -1000, -1000, -1000, 2685, -1000, 811, -1000, -1000, -1000,
	1218, 2682, 2681, -1000, -1000, -1000, -1000, 50555, -1000, 2371,
	-1000, 2402, 2395, 608, -107, -1000, -1000, 443, -1000, -1000,
	-1000, 623, 2324, -1000, -1000, 407, -1000, -1000, -1000, 2154,
	2393, -1000, -1000, 121, -1000, 1790, 1656, -1000, -1000, -1000,
	-1000, -1000, -1000, 833, -1000, 411, 5597, -1000, 1361, 28470,
	-1000, 1170, 833, 538, 34149, 686, 306, -1000, 2214, -1000,
	-1000, 3538, -1000, 677, -1000, 580, -1000, 1653, -1000, 1640,
	36042, 2192, 1835, -1000, 5524, 955, -1000, -1000, 3486, -1000,
	-1000, -1000, -1000, -1000, -1000, 2386, 2385, -1000, -1000, -1000,
	-1000, -1000, 2191, 2924, 127, 3400, 2382, -1000, -1000, 2922,
	1633, 1628, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1627, 1626, 35411, -1000, -1000, 3486, 2172, 27839, 1774,
	-1000, -1000, 1618, 1595, -1000, -1000, -1000, -1000, -1000, -306,
	2921, 12636, 12636, -1000, -1000, -1000, 2919, -1000, -1000, 3493,
	-226, -233, 2379, 174, 201, -1000, 2378, -1000, -110, 3292,
	-145, -1000, -1000, 918, -213, 162, 147, 124, -1000, -1000,
	-1000, 12636, -1000, -1000, -1000, 120, -1000, 1785, -1000, -1000,
	2167, 50555, 683, -1000, -1000, -1000, -1000, 230, -1000, -1000,
	-1000, -1000, -1000, -1000, 2377, 2373, -1000, 558, 3492, -1000,
	5753, -1000, 1774, -1000, 558, 1578, -1000, 1774, 1774, -1000,
	516, -1000, 1762, -1000, 2165, -1000, 3467, -1000, 505, -1000,
	563, -1000, -1000, -1000, 1571, -1000, -1000, -1000, 5524, 568,
	-1000, 814, 2916, -1000, -1000, 2560, 12636, 2915, 1774, 2458,
	-98, 35411, 3216, 3030, 2838, 2482, 1563, -1000, -1000, 27839,
	-1000, -1000, 34780, -1000, 2904, 1558, 1541, 50555, 2351, -1000,
	-1000, 2372, -1000, 892, 195, 201, -1000, 3490, 194, 3489,
	3488, 1216, 3291, -1000, -1000, 2015, -1000, 155, 153, 141,
	-1000, -1000, -1000, -1000, -1000, 2371, 2369, 2361, 587, -1000,
	324, -1000, -1000, -1000, 315, -1000, 3482, 594, -1000, 27839,
	-1000, -1000, 34149, 1446, 1446, -1000, -1000, 2143, -1000, -1000,
	-1000, -1000, 2138, -1000, -1000, -1000, 1504, -1000, 50555, 1027,
	9460, -1000, 2094, -1000, 50555, -1000, 3229, -1000, 281, 1480,
	315, 776, 315, 776, 315, 776, 315, 776, 336, -1000,
	-1000, -1000, 1453, 12636, -1000, -1000, 1437, -1000, -1000, -1000,
	2892, 2119, 211, 189, 3478, -1000, 2351, 3475, 2351, 2351,
	-1000, 146, -132, 918, -1000, -1000, -1000, -1000, -1000, -1000,
	2359, -1000, -1000, -1000, -1000, 1774, 1774, 2357, 2356, 470,
	-1000, -1000, 33518, 571, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 568, 5753, -1000, 9460, 1433, -1000, 2219, -1000, 803,
	-1000, -1000, 3228, 3155, 3532, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2887, 2448, -1000, 50555, 3395,
	27208, 186, -1000, -1000, -1000, 2353, -1000, 2351, -1000, -1000,
	1768, -141, -1000, -273, 2116, 2092, -1000, -1000, 50555, -1000,
	50555, 565, -1000, 5753, 1423, -1000, 9460, -1000, -1000, 3546,
	-1000, 3542, 1059, 1059, 315, 315, 315, 315, 12636, -1000,
	-1000, -1000, 50555, -1000, 1397, -1000, -1000, -1000, 1534, -1000,
	-1000, -1000, -1000, 2346, -146, -1000, -1000, 2331, -1000, -1000,
	-1000, 1309, 2886, -1000, -1000, -1000, -1000, -1000, 2153, 706,
	-1000, 2380, 1203, -1000, 1767, -1000, 32887, 50555, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 50555, 8826, -1000,
	1445, -1000, -1000, 2219, 50555, -1000,
}

var yyPgo = [...]int{
	0, 176, 3572, 237, 180, 4173, 82, 262, 264, 253,
	259, 4171, 4170, 4169, 4168, 3336, 3322, 4167, 4166, 4165,
	4164, 4163, 4161, 4159, 4158, 4156, 4155, 4154, 4153, 4152,
	4151, 4150, 4149, 4148, 4147, 4146, 4145, 4144, 4143, 4141,
	4140, 4139, 4137, 4135, 4133, 4130, 4129, 249, 4128, 4126,
	4125, 4122, 4121, 4119, 4118, 4117, 4116, 4114, 4113, 4108,
	4106, 4104, 4103, 4102, 4101, 4099, 4098, 4097, 4096, 4092,
	4091, 4090, 4089, 4088, 4086, 4085, 4083, 4082, 4081, 4080,
	4079, 4078, 244, 4077, 4076, 212, 4072, 3321, 4071, 4068,
	4067, 4066, 4065, 4064, 4063, 4056, 4055, 4054, 4053, 300,
	4052, 4051, 4050, 4049, 4047, 4046, 4045, 4044, 4043, 4042,
	4041, 4040, 4039, 283, 4038, 4037, 4036, 4035, 275, 4034,
	246, 4033, 178, 140, 4030, 4026, 4023, 4022, 4018, 4017,
	4015, 4012, 4010, 4009, 4008, 4007, 4006, 4005, 240, 190,
	75, 4004, 51, 4000, 3998, 217, 3997, 154, 3996, 151,
	3994, 3993, 3985, 3983, 3982, 3973, 3970, 3969, 3967, 3966,
	3965, 3964, 3962, 3961, 3960, 3959, 3954, 3953, 3951, 3947,
	3944, 3942, 3941, 48, 3939, 267, 3935, 70, 3932, 182,
	3930, 78, 3929, 60, 139, 276, 2933, 255, 251, 193,
	3928, 183, 3927, 3926, 273, 3924, 164, 228, 162, 105,
	125, 3923, 143, 3921, 274, 47, 40, 250, 149, 55,
	159, 121, 3919, 214, 98, 113, 3917, 3915, 144, 3914,
	245, 185, 3913, 110, 3911, 3910, 3909, 3908, 3907, 200,
	197, 3904, 3902, 133, 3901, 3899, 64, 129, 3894, 81,
	148, 174, 147, 3893, 2526, 118, 87, 3892, 124, 108,
	3890, 97, 3887, 3886, 3884, 3883, 191, 3882, 3881, 136,
	61, 3880, 3878, 3876, 69, 3875, 80, 3874, 43, 3873,
	58, 3872, 3871, 3870, 3869, 3868, 3867, 3865, 3864, 3862,
	3861, 3857, 3856, 56, 3855, 3854, 3852, 3849, 7, 12,
	15, 3848, 26, 3847, 173, 3846, 3845, 175, 3844, 199,
	3840, 3838, 95, 93, 3836, 92, 172, 3835, 27, 28,
	77, 3832, 3830, 218, 1118, 107, 163, 3829, 277, 3826,
	3825, 3823, 167, 3814, 3812, 3811, 2425, 3809, 3808, 3805,
	3804, 3801, 3800, 299, 3799, 1, 216, 41, 3798, 141,
	146, 3797, 37, 31, 3796, 44, 119, 211, 131, 99,
	3795, 3794, 3793, 137, 196, 109, 29, 0, 100, 223,
	158, 3791, 3790, 3789, 258, 3787, 234, 221, 235, 260,
	270, 209, 3771, 3770, 59, 3765, 166, 33, 52, 134,
	489, 21, 239, 3763, 1589, 9, 213, 3761, 210, 3760,
	8, 13, 104, 156, 3759, 3758, 36, 268, 3757, 3756,
	3754, 130, 3751, 3750, 189, 79, 3749, 3748, 3747, 3746,
	39, 3744, 186, 16, 3743, 102, 3741, 242, 3740, 265,
	135, 187, 184, 160, 225, 230, 83, 85, 3739, 1882,
	157, 103, 17, 3738, 236, 3737, 220, 123, 3736, 106,
	3735, 247, 269, 205, 3734, 188, 10, 45, 38, 30,
	49, 11, 254, 203, 3733, 3731, 22, 50, 3730, 53,
	3729, 19, 3728, 3726, 74, 3724, 62, 5, 3722, 3721,
	18, 20, 3720, 35, 207, 177, 128, 94, 67, 3719,
	3717, 142, 168, 3716, 155, 165, 161, 3715, 86, 3714,
	3713, 3711, 3710, 929, 3709, 252, 3708, 3706, 3705, 3704,
	3703, 3702, 3701, 3699, 3698, 215, 3697, 120, 42, 3696,
	3695, 3694, 3693, 88, 153, 3692, 3691, 3690, 3687, 32,
	145, 3686, 14, 3683, 25, 23, 34, 3682, 101, 3678,
	3, 192, 3677, 3675, 4, 3674, 3671, 2, 3669, 3667,
	127, 3665, 96, 24, 171, 111, 3664, 3662, 90, 208,
	150, 3660, 3658, 114, 241, 201, 3657, 54, 232, 263,
	3656, 206, 3655, 3654, 3653, 248, 3652, 3650, 1245, 3649,
	3645, 231, 68, 84, 3642, 219, 116, 3640, 3639, 89,
	170, 122, 117, 57, 91, 3638, 115, 204, 3624, 202,
	3622, 261, 3618, 3616, 112, 3611, 3610, 3609, 3606, 194,
	3605, 3604, 195, 229, 3602, 3600, 271, 3597, 3587, 3586,
	3585, 3582, 3580, 3579, 3577, 3575, 3574, 257, 316, 3565,
}

//line mysql_sql.y:12768
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionsUnion() string {
	v, _ := st.union.(string)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 612, 615, 615, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 348, 348, 349, 349, 130, 344, 344, 343, 343,
	131, 132, 133, 591, 591, 134, 135, 165, 590, 590,
	167, 167, 167, 167, 167, 464, 129, 129, 129, 129,
	129, 171, 171, 171, 171, 171, 127, 597, 597, 597,
	598, 598, 124, 154, 153, 156, 156, 155, 155, 152,
	152, 148, 151, 151, 150, 150, 149, 144, 146, 146,
	145, 147, 147, 125, 113, 126, 539, 539, 538, 538,
	537, 537, 489, 489, 490, 490, 335, 335, 335, 536,
	536, 536, 535, 535, 534, 534, 533, 533, 531, 531,
	532, 530, 529, 529, 529, 527, 527, 527, 523, 523,
	525, 524, 524, 526, 518, 518, 521, 521, 519, 519,
	519, 519, 522, 517, 517, 517, 516, 516, 112, 112,
	112, 431, 431, 111, 111, 445, 445, 445, 445, 445,
	443, 443, 443, 443, 443, 443, 442, 442, 441, 441,
	446, 446, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 100, 100, 100, 100, 100, 100, 100,
	107, 105, 105, 105, 106, 603, 603, 602, 602, 604,
	604, 604, 604, 605, 605, 103, 103, 103, 104, 440,
	440, 440, 101, 102, 102, 430, 430, 435, 435, 434,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 434,
	434, 434, 439, 439, 439, 437, 437, 436, 436, 438,
	438, 91, 91, 91, 91, 91, 91, 95, 96, 97,
	97, 97, 97, 94, 93, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 92, 92, 92, 92, 92, 92,
	86, 86, 86, 86, 86, 85, 85, 87, 87, 427,
	427, 426, 108, 108, 109, 600, 600, 599, 601, 601,
	601, 601, 110, 116, 116, 116, 116, 116, 116, 116,
	116, 115, 115, 118, 118, 117, 119, 99, 99, 99,
	99, 99, 99, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 564,
	564, 564, 564, 566, 566, 362, 363, 616, 365, 361,
	361, 361, 560, 560, 561, 562, 563, 563, 563, 114,
	14, 219, 219, 463, 463, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 11, 13, 84, 89, 89, 90,
	298, 298, 299, 293, 293, 300, 300, 170, 301, 301,
	301, 306, 306, 307, 307, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 278, 278, 278,
	273, 273, 273, 273, 274, 274, 275, 275, 276, 276,
	276, 276, 277, 277, 354, 354, 302, 302, 302, 304,
	304, 303, 297, 295, 295, 295, 295, 295, 295, 295,
	296, 296, 296, 296, 305, 305, 82, 88, 88, 88,
	88, 578, 578, 83, 83, 589, 589, 493, 493, 376,
	376, 375, 375, 375, 375, 375, 375, 375, 375, 375,
	375, 375, 375, 375, 375, 375, 375, 499, 500, 372,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 79, 80, 81,
	54, 57, 58, 169, 53, 53, 53, 416, 416, 52,
	617, 617, 347, 347, 67, 66, 56, 68, 69, 70,
	71, 72, 73, 51, 65, 65, 65, 65, 65, 65,
	65, 65, 76, 512, 512, 619, 619, 619, 74, 75,
	492, 492, 492, 64, 63, 62, 61, 60, 60, 50,
	50, 49, 49, 55, 160, 59, 161, 161, 369, 369,
	369, 371, 371, 367, 618, 618, 459, 459, 370, 370,
	48, 48, 48, 48, 77, 368, 368, 346, 366, 366,
	366, 12, 12, 10, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 26, 27, 29, 424, 424, 421, 28, 20, 19,
	19, 23, 22, 18, 18, 21, 24, 25, 25, 9,
	9, 9, 9, 15, 15, 16, 191, 191, 245, 245,
	572, 572, 568, 568, 569, 569, 569, 570, 570, 571,
	571, 120, 506, 506, 506, 506, 506, 506, 8, 8,
	214, 214, 505, 505, 505, 505, 505, 505, 428, 428,
	428, 549, 549, 549, 550, 213, 213, 208, 208, 507,
	507, 393, 551, 551, 515, 515, 514, 514, 513, 513,
	211, 211, 212, 212, 194, 194, 139, 139, 520, 520,
	520, 520, 528, 528, 488, 488, 283, 283, 337, 337,
	338, 338, 183, 183, 184, 184, 184, 184, 184, 184,
	606, 606, 607, 608, 609, 609, 610, 610, 610, 611,
	611, 611, 611, 611, 557, 557, 559, 559, 558, 210,
	210, 206, 206, 207, 207, 207, 205, 205, 204, 203,
	203, 202, 200, 200, 200, 201, 201, 201, 218, 218,
	186, 186, 186, 185, 185, 185, 185, 185, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	187, 187, 190, 190, 565, 565, 565, 565, 565, 565,
	565, 494, 494, 494, 502, 502, 315, 315, 316, 316,
	316, 316, 316, 137, 137, 498, 498, 314, 314, 188,
	188, 189, 189, 189, 189, 313, 313, 312, 199, 199,
	198, 197, 197, 197, 192, 192, 192, 192, 192, 193,
	324, 324, 323, 323, 322, 322, 322, 322, 325, 123,
	136, 136, 138, 217, 217, 321, 320, 320, 320, 320,
	216, 216, 215, 215, 209, 209, 196, 196, 196, 196,
	319, 195, 317, 596, 596, 595, 595, 594, 592, 592,
	592, 593, 593, 593, 593, 541, 541, 541, 541, 541,
	355, 355, 355, 360, 360, 358, 358, 358, 358, 358,
	364, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 39, 228, 229, 40, 230, 230, 231,
	231, 232, 232, 233, 234, 235, 235, 235, 235, 38,
	220, 220, 221, 221, 222, 222, 223, 224, 224, 224,
	227, 225, 226, 226, 614, 614, 613, 37, 37, 30,
	174, 174, 175, 175, 175, 177, 177, 279, 279, 279,
	176, 176, 178, 178, 178, 573, 575, 575, 577, 576,
	576, 576, 579, 579, 579, 579, 579, 580, 580, 580,
	580, 581, 581, 31, 157, 157, 181, 181, 162, 584,
	584, 584, 583, 583, 585, 585, 586, 586, 341, 341,
	342, 342, 172, 173, 173, 164, 159, 180, 180, 180,
	180, 180, 182, 182, 247, 247, 158, 163, 166, 168,
	574, 582, 582, 582, 425, 425, 422, 423, 423, 420,
	419, 419, 419, 588, 588, 587, 587, 587, 356, 356,
	32, 415, 415, 417, 418, 418, 418, 409, 409, 409,
	409, 36, 413, 413, 414, 414, 414, 414, 414, 414,
	414, 410, 410, 412, 412, 408, 408, 408, 408, 408,
	408, 408, 35, 179, 179, 407, 407, 404, 404, 402,
	402, 403, 403, 401, 401, 401, 405, 405, 43, 78,
	44, 45, 46, 42, 406, 406, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 141, 140, 140, 140,
	140, 140, 143, 143, 340, 340, 339, 339, 142, 280,
	280, 41, 258, 258, 480, 480, 475, 475, 475, 475,
	475, 496, 496, 496, 476, 476, 476, 477, 477, 477,
	479, 479, 479, 478, 478, 478, 478, 478, 495, 495,
	497, 497, 497, 447, 447, 448, 448, 448, 451, 451,
	467, 467, 468, 468, 466, 466, 473, 473, 472, 472,
	471, 471, 470, 470, 469, 469, 469, 469, 462, 462,
	461, 461, 449, 449, 449, 449, 449, 450, 450, 450,
	460, 460, 465, 465, 311, 311, 310, 310, 266, 266,
	267, 267, 309, 309, 264, 264, 265, 265, 265, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 547, 547, 548, 269, 269,
	281, 281, 281, 281, 281, 281, 268, 268, 270, 270,
	246, 246, 244, 244, 236, 236, 236, 236, 236, 237,
	237, 238, 238, 239, 239, 239, 243, 243, 242, 242,
	242, 242, 240, 240, 241, 241, 241, 241, 241, 241,
	433, 433, 544, 544, 545, 545, 540, 540, 540, 543,
	543, 543, 543, 543, 543, 543, 546, 546, 546, 542,
	542, 248, 334, 334, 334, 357, 357, 357, 357, 359,
	333, 333, 333, 263, 263, 262, 262, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 432,
	432, 373, 373, 374, 374, 292, 291, 291, 291, 291,
	291, 289, 290, 288, 288, 288, 288, 288, 285, 285,
	284, 284, 284, 286, 286, 286, 286, 286, 411, 411,
	282, 282, 272, 272, 272, 271, 271, 271, 474, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 287,
	331, 331, 331, 332, 332, 332, 332, 332, 332, 332,
	332, 383, 383, 389, 389, 556, 556, 555, 249, 249,
	249, 250, 250, 250, 250, 250, 250, 250, 250, 250,
	259, 259, 259, 456, 456, 456, 456, 457, 457, 457,
	457, 458, 458, 458, 454, 454, 455, 455, 394, 395,
	395, 503, 503, 504, 504, 452, 452, 453, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 511, 511, 511, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	567, 567, 567, 552, 552, 552, 553, 553, 553, 553,
	553, 553, 553, 553, 553, 553, 553, 553, 554, 554,
	554, 554, 554, 554, 554, 554, 554, 554, 554, 554,
	554, 554, 554, 554, 554, 329, 329, 329, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 396, 396, 397, 397,
	508, 508, 508, 508, 508, 508, 509, 509, 510, 510,
	510, 510, 501, 501, 501, 501, 501, 501, 501, 501,
	501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
	501, 501, 501, 501, 501, 501, 501, 501, 501, 501,
	501, 501, 381, 326, 326, 326, 398, 390, 390, 391,
	391, 392, 392, 384, 384, 384, 384, 384, 384, 385,
	385, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 386, 386, 388, 388, 400, 400, 400,
	399, 399, 399, 399, 399, 399, 399, 261, 261, 261,
	261, 378, 378, 378, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 251, 251, 251, 251,
	255, 255, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 256, 256, 256, 256,
	256, 254, 254, 254, 254, 254, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 121, 122, 122, 253, 336,
	336, 481, 481, 484, 484, 482, 482, 483, 485, 485,
	485, 486, 486, 486, 487, 487, 487, 491, 491, 345,
	345, 345, 353, 353, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 352, 352, 352, 352, 352, 352, 352, 352,
	352, 352, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
	350, 350,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 5, 7, 9, 8, 6, 4, 0, 1, 1,
	0, 1, 5, 2, 2, 6, 9, 6, 9, 4,
	7, 8, 0, 1, 1, 2, 4, 6, 1, 2,
	4, 0, 2, 10, 11, 2, 0, 2, 1, 3,
	3, 3, 0, 2, 0, 2, 1, 3, 5, 0,
	2, 3, 1, 3, 1, 1, 1, 3, 1, 1,
	1, 1, 0, 3, 3, 0, 3, 3, 0, 1,
	3, 0, 1, 3, 0, 2, 1, 2, 3, 4,
	3, 3, 1, 0, 1, 1, 0, 1, 8, 5,
	7, 0, 3, 8, 5, 1, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 4,
	1, 3, 1, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 2, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 2, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 1, 2, 3, 3,
	4, 5, 4, 2, 2, 0, 1, 4, 2, 4,
	1, 5, 3, 2, 1, 2, 2, 4, 4, 5,
	2, 1, 3, 4, 4, 1, 2, 9, 7, 1,
	3, 3, 1, 1, 3, 1, 3, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 2, 4, 3, 3, 1, 1, 1,
	1, 1, 1, 2, 3, 4, 7, 2, 3, 3,
	4, 3, 4, 4, 5, 3, 4, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 1, 1, 1, 1, 6,
	4, 1, 1, 0, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 10, 7, 4, 4, 3,
	1, 3, 3, 1, 3, 1, 6, 7, 3, 3,
	3, 1, 1, 1, 3, 2, 4, 5, 5, 6,
	5, 5, 3, 2, 2, 1, 3, 4, 3, 7,
	5, 8, 2, 2, 1, 3, 2, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 1, 2, 1,
	3, 2, 1, 2, 2, 1, 2, 3, 2, 2,
	3, 6, 3, 3, 1, 1, 7, 7, 7, 8,
	8, 0, 4, 7, 6, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	4, 3, 3, 3, 2, 5, 5, 0, 2, 7,
	0, 1, 0, 1, 5, 5, 3, 3, 2, 4,
	4, 4, 4, 4, 1, 1, 1, 3, 3, 1,
	1, 1, 6, 0, 1, 1, 1, 1, 5, 5,
	0, 1, 1, 3, 3, 3, 4, 7, 7, 5,
	4, 7, 8, 3, 3, 2, 3, 4, 0, 2,
	2, 0, 2, 2, 1, 1, 1, 1, 0, 1,
	5, 5, 6, 4, 3, 1, 3, 1, 1, 3,
	5, 2, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 4, 1, 3, 1, 4, 6, 6,
	4, 4, 4, 4, 4, 3, 6, 3, 5, 1,
	1, 2, 2, 11, 8, 9, 1, 3, 2, 4,
	0, 2, 0, 1, 1, 1, 1, 0, 1, 0,
	1, 4, 2, 1, 5, 4, 4, 2, 5, 5,
	1, 3, 2, 1, 5, 4, 4, 2, 0, 5,
	4, 0, 1, 3, 3, 1, 3, 1, 3, 1,
	3, 4, 0, 1, 0, 1, 1, 3, 1, 1,
	0, 4, 1, 3, 2, 1, 0, 8, 0, 4,
	7, 4, 0, 2, 0, 2, 0, 2, 0, 4,
	1, 3, 1, 1, 6, 4, 5, 7, 4, 5,
	0, 1, 3, 8, 0, 6, 0, 4, 6, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 6, 0,
	3, 0, 1, 2, 4, 4, 0, 1, 3, 1,
	3, 3, 0, 1, 1, 0, 2, 2, 0, 2,
	3, 3, 3, 1, 3, 3, 3, 3, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	7, 7, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 4,
	7, 6, 6, 3, 5, 0, 2, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 1, 4, 4, 4, 3, 4, 3,
	2, 2, 2, 2, 2, 3, 2, 3, 2, 4,
	1, 3, 4, 0, 2, 1, 1, 2, 2, 2,
	0, 1, 2, 4, 1, 3, 1, 3, 2, 3,
	1, 4, 3, 0, 1, 1, 2, 5, 2, 2,
	2, 0, 2, 3, 3, 0, 1, 3, 1, 3,
	0, 1, 2, 1, 1, 0, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 1, 4, 1,
	1, 1, 3, 3, 4, 3, 3, 0, 1, 1,
	1, 0, 2, 7, 8, 10, 2, 2, 8, 0,
	3, 3, 0, 3, 0, 3, 0, 5, 1, 3,
	0, 3, 3, 0, 2, 9, 8, 0, 2, 2,
	3, 3, 0, 2, 0, 2, 4, 4, 4, 4,
	1, 0, 2, 2, 1, 3, 2, 1, 3, 2,
	1, 3, 2, 0, 1, 3, 4, 3, 1, 1,
	4, 1, 3, 1, 1, 1, 1, 0, 1, 1,
	1, 11, 0, 2, 3, 3, 2, 2, 3, 1,
	1, 1, 3, 3, 4, 0, 2, 2, 2, 2,
	2, 2, 6, 0, 4, 1, 1, 0, 3, 0,
	1, 1, 2, 4, 4, 4, 0, 1, 8, 2,
	4, 4, 4, 9, 0, 2, 11, 9, 11, 8,
	6, 9, 7, 10, 7, 6, 2, 2, 9, 4,
	5, 3, 0, 4, 1, 3, 0, 3, 6, 0,
	2, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 5, 1, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 0, 5, 5, 5, 5, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 7, 9,
	7, 9, 2, 1, 7, 9, 7, 9, 8, 5,
	0, 1, 0, 1, 1, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 2, 1, 2, 2,
	1, 1, 2, 2, 2, 3, 3, 2, 2, 1,
	5, 6, 4, 1, 1, 1, 5, 4, 1, 1,
	2, 0, 1, 1, 2, 5, 0, 1, 1, 2,
	2, 3, 3, 1, 1, 2, 2, 2, 0, 1,
	2, 2, 2, 0, 4, 7, 3, 3, 0, 3,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 1, 1, 1, 3, 5, 2, 2, 2,
	2, 4, 1, 1, 2, 5, 6, 8, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 3, 9, 1,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 1, 1, 1, 4, 4, 6, 8, 6, 4,
	5, 4, 4, 4, 3, 4, 6, 6, 7, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 8, 4, 2,
	3, 2, 4, 2, 2, 4, 6, 2, 2, 4,
	6, 4, 2, 4, 4, 4, 0, 1, 2, 3,
	1, 1, 1, 1, 1, 1, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 4, 4, 1, 2, 3, 5, 1, 1,
	3, 0, 1, 0, 3, 0, 3, 3, 0, 3,
	5, 0, 3, 5, 0, 1, 1, 0, 1, 1,
	2, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}

var yyChk = [...]int{
	-1000, -612, -615, -2, -5, 631, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -183, -127, -128,
	-129, -171, -132, -134, -135, 621, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 554, 627, 457, 14, 506, -15, -16, -557, -17,
	266, -361, -362, -363, -365, -616, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -131,
	-79, -80, -81, -83, -82, -88, -84, -89, -159, -164,
	-13, -170, -90, 240, -87, 76, -101, -102, -103, -104,
	-105, -106, -107, -109, -110, 381, 387, 444, 620, 61,
	-184, -186, 648, 649, 652, 541, 544, 162, 163, 165,
	166, 170, 173, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 236, 16, 549, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -158,
	-25, -163, -23, -166, -168, -133, 261, 260, 38, 327,
	328, 329, 385, 259, 237, 239, 15, 31, 42, 360,
	-185, 85, 542, 238, -187, 13, 654, -6, -3, -2,
	-144, -148, -152, -155, -156, -153, -154, -4, -122, 120,
	251, 622, -357, 377, 623, 625, 624, 88, 96, -350,
	-352, 457, 266, 381, 387, 620, 649, 652, 541, 544,
	556, 557, 558, 559, 560, 561, 562, 563, 565, 566,
	567, 568, 569, 570, 571, 581, 582, 572, 573, 574,
	575, 576, 577, 578, 579, 583, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, 594, 595, 596, 509,
	606, 607, 608, 609, 537, 564, 600, 601, 602, 603,
	358, 359, 546, 278, 302, 412, 308, 315, 162, 182,
	176, 205, 196, 542, 171, 282, 320, 283, 95, 165,
	492, 110, 469, 441, 168, 297, 299, 301, 538, 539,
	371, 304, 536, 303, 305, 307, 540, 284, 361, 192,
	187, 296, 280, 185, 285, 40, 286, 210, 287, 288,
	551, 465, 357, 471, 312, 52, 439, 186, 466, 300,
	468, 214, 218, 483, 484, 180, 181, 473, 486, 209,
	212, 213, 258, 354, 355, 43, 548, 270, 487, 216,
	644, 208, 203, 495, 316, 314, 207, 179, 202, 281,
	65, 220, 219, 221, 435, 436, 437, 438, 289, 290,
	375, 482, 199, 188, 362, 172, 23, 490, 265, 470,
	388, 291, 309, 317, 215, 217, 272, 277, 332, 550,
	443, 276, 313, 488, 184, 269, 298, 264, 491, 645,
	173, 390, 292, 166, 306, 485, 647, 494, 64, 403,
	178, 169, 638, 255, 163, 274, 279, 646, 293, 294,
	295, 535, 319, 318, 310, 170, 543, 200, 271, 206,
	190, 177, 201, 164, 273, 493, 404, 618, 360, 422,
	198, 195, 275, 248, 489, 472, 167, 426, 405, 193,
	321, 613, 614, 615, 376, 353, 322, 323, 191, 262,
	463, 464, 326, 432, 344, 406, 442, 413, 407, 227,
	228, 330, 475, 477, 211, 616, 333, 334, 335, 467,
	336, 337, 338, 339, 380, 56, 58, 97, 100, 99,
	650, 651, 63, 29, 366, 369, 401, 408, 346, 619,
	547, 343, 347, 348, 370, 25, 424, 392, 428, 427,
	48, 49, 50, 53, 54, 55, 57, 59, 60, 51,
	534, 385, 398, 496, 45, 47, 395, 27, 372, 423,
	445, 342, 425, 456, 46, 454, 455, 476, 26, 374,
	373, 62, 44, 431, 433, 434, 324, 340, 383, 628,
	497, 378, 394, 397, 379, 345, 368, 399, 67, 66,
	391, 629, 386, 384, 341, 552, 553, 349, 580, 363,
	440, 531, 530, 529, 528, 527, 526, 525, 524, 327,
	328, 329, 409, 410, 411, 421, 414, 415, 416, 417,
	418, 419, 420, 459, 460, 630, 478, 480, 481, 479,
	243, 653, 364, 365, 246, 632, 633, 98, 634, 636,
	635, 28, 637, 643, 640, 641, 642, 555, 231, -438,
	-436, -357, 542, 620, 387, 541, 544, 381, 360, 649,
	652, 385, 266, 327, 328, 329, 457, 358, -230, -357,
	653, -194, 250, 39, -244, -357, -194, -87, -16, -15,
	-185, -186, -244, 245, -366, 24, 439, -99, 440, 240,
	241, 85, 77, -357, -9, -113, -8, -120, -85, -183,
	444, -364, -357, 327, 327, -364, 245, -359, 276, 420,
	-357, -493, 251, -442, -415, 277, -441, -417, -444, -418,
	32, 236, 238, 237, 554, 273, 16, 385, 247, 14,
	13, 386, 259, 25, 26, 28, 15, 387, 389, 29,
	390, 393, 394, 395, 42, 398, 399, 266, 88, 96,
	91, 284, -229, -357, -392, -384, 117, -387, -379, -380,
	-382, -335, -531, -377, 85, 144, 145, 152, 118, 655,
	-381, -474, 36, 120, 560, 564, 600, 507, -327, -328,
	-329, -330, -331, -332, 545, -357, -532, -530, 91, 101,
	103, 107, 108, 106, 104, 156, 189, 105, 92, 157,
	-186, 88, -552, 570, -351, 593, 606, 607, 608, 609,
	592, 61, -501, -510, 244, -508, 155, 194, 262, 190,
	14, 150, 432, 191, 601, 602, 603, 567, 589, 509,
	571, 581, 596, 562, 563, 565, 557, 558, 559, 561,
	572, 574, 588, -511, 584, 594, 595, 580, 604, 605,
	640, 597, 598, 599, 636, 90, 89, 587, 586, 573,
	568, 569, 575, 556, 566, 576, 577, 585, 590, 591,
	369, 110, 370, 371, 499, 361, 80, 372, 251, 439,
	70, 373, 374, 375, 376, 377, 506, 378, 71, 379,
	368, 266, 422, 380, 193, 211, 511, 510, 512, 503,
	500, 498, 501, 502, 504, 505, 578, 579, 583, -136,
	-138, 611, -606, -318, -607, 6, 7, 8, 9, -608,
	157, -597, 441, 550, 91, 320, 358, 17, 499, 639,
	540, 639, 540, 167, 164, -429, 167, 116, 173, 172,
	249, 167, -429, -357, 170, 639, 169, 638, 330, 272,
	-406, -174, 358, 422, 336, 97, 276, -409, -407, 538,
	-495, 324, 320, 296, 246, 113, -175, 256, 255, 111,
	499, 244, 396, 315, 56, 58, -568, -569, 233, 234,
	235, -559, 532, -558, -357, 639, 644, 371, 99, 100,
	638, 27, 245, 382, 272, 477, 475, 476, 478, 479,
	480, 481, -65, -512, -492, 472, 471, -370, 464, 470,
	462, 474, 465, 359, 338, 554, 337, 236, 632, 539,
	533, -345, 406, 442, 496, 497, 383, 443, 483, 485,
	466, 110, 197, 194, 246, 248, 245, 638, 358, 499,
	422, 97, 336, 245, -568, 644, 164, 483, 485, 441,
	276, 420, 41, -435, 432, -434, -436, 484, 495, 89,
	90, 482, -345, 110, 463, 463, -606, -318, -184, -186,
	-123, -557, 540, 639, 246, 358, 422, 276, 247, 245,
	535, 538, 248, 499, 244, 327, 382, 272, 336, 97,
	169, 638, -494, -190, 32, -502, -565, 33, 34, 229,
	230, 231, 69, 234, 232, 66, -1, 124, 654, -384,
	-384, -6, 657, -6, -384, -357, -357, 159, -251, -255,
	-252, -254, -253, -257, -256, 194, 195, 155, 198, 204,
	200, 201, 202, 203, 205, 206, 207, 208, 209, 212,
	213, 210, 31, 211, 262, 190, 191, 192, 193, 214,
	176, 196, 547, 222, 177, 223, 178, 224, 179, 225,
	180, 181, 226, 182, 185, 186, 187, 188, 184, 158,
	-219, 91, 32, 85, 158, 91, -211, 268, -194, -244,
	-236, 158, 655, -211, -606, -204, -205, 11, -244, -333,
	-357, 441, 127, -99, 77, -99, 440, 77, -99, 440,
	240, -560, -561, -562, -564, 240, 440, 439, 241, -118,
	158, 284, 17, -364, -364, 83, -244, -417, 276, -442,
	-415, 36, 82, 159, 249, 159, 82, 85, 383, 358,
	422, 384, 499, 245, 396, 248, 276, 397, 358, 422,
	245, 248, 499, 276, 358, 245, 248, 422, 276, 397,
	358, 462, 463, 248, 27, 388, 391, 392, 463, -516,
	495, 159, 116, 113, 114, 115, -384, 134, -399, 127,
	128, 129, 130, 131, 132, 133, 141, 140, 151, 144,
	145, 146, 147, 148, 149, 150, 142, 143, 137, 117,
	135, 139, 136, 119, 154, -186, -384, -392, 61, -382,
	-382, -382, -382, -357, -474, -389, -384, 85, 85, 85,
	85, 85, 158, 104, 91, -384, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, -509, 85,
	85, -396, -397, 85, 85, -377, -333, 85, 91, 91,
	85, 85, 85, 91, 85, 85, 85, -397, -397, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, -205, 159, -204, 85, -204,
	-205, -187, -186, 32, 33, 32, 33, 32, 33, 32,
	33, -609, 629, 85, 101, 650, 227, 17, -357, 638,
	-357, -591, 32, 543, 543, 543, 543, 488, 549, 171,
	172, 173, -357, 170, 249, -357, -404, 251, -404, -404,
	-228, -357, -230, 382, 248, 535, 248, -175, -404, -404,
	-404, -404, -404, 247, -404, 24, 245, 245, 245, 245,
	-404, 506, 127, 127, 59, -570, 175, 159, -559, -210,
	85, -591, 645, 646, 647, -369, 135, 139, -369, -314,
	18, -314, 24, 274, 274, 274, -369, 314, -617, -618,
	17, 137, -367, -618, -367, -367, -369, -619, 247, 473,
	43, 275, 274, -206, -207, 22, -206, 467, 463, -459,
	468, 469, -371, -618, -370, -369, -369, -370, -369, -369,
	-369, 32, 245, 248, 499, 336, 633, -617, -617, 31,
	31, -493, -493, -244, -493, -493, 533, -346, -357, -493,
	-493, -493, -298, -299, -244, -571, 250, 647, -603, -602,
	486, -605, 488, 164, -436, 164, -436, 88, -417, 276,
	276, 159, 127, 24, -437, 127, 138, -436, -436, -437,
	-437, -268, 41, -356, 155, -357, 91, -268, 41, -600,
	-599, -244, -205, -187, -186, 86, 86, 86, 543, -591,
	-493, -493, -493, -493, -493, -495, -493, -493, -493, -493,
	-493, -364, -220, -357, -230, 251, -493, -493, -493, -493,
	-188, -189, 146, -384, -357, -188, -565, 231, 66, -3,
	-146, -145, 121, 122, 124, 623, 377, 622, 626, 620,
	-436, 41, -487, 404, 403, -481, -483, 85, -482, 85,
	-482, -482, -482, -482, -482, 85, 85, -484, 85, -484,
	-484, -481, -485, 85, -485, -486, 85, -486, -485, -357,
	-463, 549, -390, -392, -357, 39, -505, 61, -183, 85,
	31, 85, -211, -357, 191, 169, 637, -506, 61, -183,
	85, 31, -205, -139, 39, -207, 21, 158, 101, 91,
	-118, -99, 77, -118, -99, -99, 86, 159, -563, 107,
	108, -566, 209, 200, -357, -116, 91, -7, -8, -9,
	-10, -47, -85, -82, -183, 237, 541, 544, -533, -531,
	85, 32, 431, 82, 17, -443, 245, 499, 382, 272,
	248, 358, -441, -424, -421, -419, -356, -417, -420, -419,
	-446, -333, 463, -140, 446, 445, 326, -384, -384, -384,
	-384, -384, 106, 117, 353, 107, 108, -379, -400, 32,
	322, 323, -380, -380, -380, -380, -380, -380, -380, -380,
	-380, -380, -380, -380, -388, -398, -474, 85, 137, 135,
	139, 136, 119, -382, -382, -380, -380, -270, -356, 155,
	86, 159, -384, -556, -555, 121, -384, -384, -384, -384,
	-410, -412, -333, 85, -357, -553, -554, 513, 514, 515,
	516, 517, 518, 519, 520, 521, 522, 523, 373, 368,
	374, 372, 361, 380, 375, 376, 193, 530, 531, 524,
	525, 526, 527, 528, 529, -390, -390, -384, -553, -390,
	-326, 33, 32, -392, -392, -392, 86, -384, -567, 351,
	350, 352, -208, -357, -390, 86, 86, 86, 101, -392,
	-392, -390, -380, -390, -390, -390, -390, -554, -326, -326,
	-326, -326, 146, -392, -392, -326, -326, -326, -326, 146,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
	-326, 86, 86, 86, 146, -392, -206, -138, -514, -513,
	-384, 41, -139, -207, -610, 630, 85, -333, -598, 91,
	91, 655, 169, 638, 17, 499, -357, 17, 245, -357,
	101, -357, 101, 489, 490, 168, 172, 171, -357, 170,
	-357, -357, 117, -357, -357, 35, 85, -220, -404, -404,
	-404, -575, -357, 92, -425, -422, -419, -357, -357, -415,
	-357, -346, -244, -404, -404, -404, -404, -244, -279, 53,
	54, 55, -419, -176, 56, 57, -571, -558, 35, -209,
	-357, -314, -382, -382, -384, -419, 276, -617, -369, -369,
	-347, -346, -371, -366, -371, -371, -314, -367, -369, -369,
	-384, -371, -367, -314, -357, 463, -314, -314, -459, -369,
	-368, -357, -368, -404, -346, -347, -347, -244, -244, -293,
	-300, -294, -301, 268, 242, 366, 367, 239, 237, 11,
	238, -308, 315, -405, 507, -274, -275, 77, 42, -277,
	266, 408, 401, 278, 282, 95, 283, 441, 284, 247,
	286, 287, 288, 303, 305, 258, 289, 290, 291, 432,
	292, 163, 304, 293, 294, 295, 384, -269, 6, 339,
	549, 41, 51, 52, 455, 454, 552, 279, -357, -575,
	-573, 31, -357, 31, -425, -419, -357, -357, 159, 249,
	-197, -199, -196, -192, -193, -198, -317, -319, -195, 85,
	-244, -186, -357, -436, 159, 487, 489, 490, -603, -437,
	-603, -437, 249, 32, 431, -440, 431, 32, -415, -434,
	483, 485, -430, 91, 432, -420, -439, 82, 155, -513,
	-437, -437, -439, -439, 154, 159, -601, 488, 489, 233,
	-206, 101, -246, -244, -575, -424, -415, -357, -493, -246,
	-246, -246, -359, -359, 85, 158, 36, -357, -357, -357,
	-357, -313, 159, -312, 17, -358, -357, 35, 91, 158,
	-313, -147, -145, 123, -384, -6, 622, -384, -6, -6,
	-384, -6, -384, -491, 405, 101, 101, -336, 91, -336,
	101, 101, 101, 555, 86, 91, -428, 82, -507, -393,
	-551, 611, -213, 86, -208, -549, -550, -208, -212, -357,
	-505, -236, 127, 127, 127, -507, -213, 86, -549, -206,
	612, -139, -203, -202, -384, -357, 24, -118, -99, -561,
	158, 358, 159, -209, -443, -423, -420, -445, 146, -357,
	-431, 159, 549, 658, 89, 249, -588, -587, 423, 86,
	159, -517, 250, 506, 91, 655, 439, 227, 228, 106,
	353, 107, 108, -474, -392, -388, -382, -382, -380, -380,
	-386, 263, -386, 116, -384, 656, -383, -555, 123, -384,
	35, 159, 35, 159, 83, 159, 86, -481, -384, 158,
	86, 86, 17, 17, 86, -384, 86, 86, 86, 86,
	17, 17, -384, 86, 158, 86, 86, 86, 86, 83,
	86, 159, 86, 86, 86, 86, 159, -392, -392, -384,
	-392, 86, 86, 86, -384, -384, -384, -392, 86, -384,
	-384, -384, -384, -384, -384, -384, -384, -384, -384, -209,
	-453, 458, -453, -453, 159, 159, 159, 86, -139, 85,
	101, 159, 651, -340, -339, 91, -357, -357, 169, 638,
	-357, 91, 638, -357, 91, 169, 173, 173, 172, -357,
	91, 36, 24, 313, 24, -229, -231, -232, -233, -234,
	-235, 137, 160, 161, 85, -244, -244, -244, -577, 409,
	-589, 159, 41, -587, 499, -172, 326, -408, 83, -179,
	17, 549, -244, -244, -244, -244, -258, 35, 17, -191,
	-245, -357, 85, 86, 159, -416, 83, -357, -347, -314,
	-314, -371, -314, -314, 159, 23, -369, -371, -371, -236,
	-367, -236, 158, -236, -346, -480, 35, -210, 159, 21,
	268, -243, -354, -240, -242, 253, -374, -241, 256, -545,
	254, 252, 111, 257, 311, 112, 247, -354, -354, 253,
	-278, 249, 35, -354, -296, 247, 356, 311, 254, 21,
	268, -295, 247, 112, -357, 253, 257, 254, 252, -353,
	127, -345, 154, 249, 43, 384, -353, 553, 268, -353,
	-353, -353, -353, -353, -353, -353, 285, 285, -353, -353,
	-353, -353, -353, -353, -353, -353, -353, -353, -353, 164,
	-353, -353, -353, -353, -353, -353, 85, 331, 280, 281,
	313, -578, 409, 31, 364, 364, 365, -589, 360, 31,
	-180, 358, -299, -297, -368, 31, -320, -321, -322, -323,
	-325, -324, 68, 72, 74, 78, 69, 70, 71, 75,
	80, 73, 31, 159, -355, -360, 35, -357, 91, -355,
	-186, -199, -197, -355, 85, -437, -602, -604, 491, 488,
	494, -439, -439, 101, 249, 85, 127, -439, -439, 41,
	-356, -599, 495, 489, -139, 159, 82, -246, -221, -222,
	-223, -224, -251, -333, 195, 198, 200, 201, 202, 203,
	205, 206, 207, 208, 209, 212, 213, 210, 211, 262,
	190, 191, 192, 193, 214, 176, 196, 547, 177, 178,
	179, 180, 181, 182, 185, 186, 187, 188, 184, -357,
	-230, -314, -189, -199, -357, 91, -357, 146, -314, 124,
	-6, 122, -151, -150, -149, 125, 620, 626, 124, 124,
	124, 86, 86, 86, 159, 86, 86, 86, 159, 86,
	159, 101, -520, 468, 40, 159, 85, 86, 159, 61,
	159, 127, 86, 159, -384, -357, 91, -384, 86, 61,
	-139, 91, 159, -200, 37, 38, 158, 441, -357, -531,
	86, -445, 159, 249, 158, 158, -421, 387, -356, -423,
	21, 549, -333, 39, -340, 127, 655, -357, 86, -386,
	-386, 116, -382, -379, 86, 124, -384, 122, -249, -251,
	403, 404, -384, -249, -250, -256, 155, 194, 262, 193,
	192, 190, 403, 404, -268, -412, 546, -200, 86, -357,
	-384, -384, 86, -384, -384, 17, -357, -268, -380, -384,
	-205, -205, 86, 86, -452, -453, -452, -452, 86, 86,
	86, 86, -452, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 85, 101, 103, 101, 103, -513,
	-611, 63, 628, 62, 431, 106, 316, 159, 101, 91,
	656, 159, 127, 91, -357, -357, 17, 245, -357, 17,
	173, 91, -590, 320, 358, -464, 101, 320, 358, 499,
	395, 86, 159, -333, -221, -210, 85, -210, -580, 470,
	411, 421, -353, -376, -375, 360, 42, -499, 432, 417,
	418, -422, 276, -346, -586, 98, 127, 82, 343, 347,
	348, 344, 345, 346, -402, -403, -401, -405, -573, 85,
	85, -183, 35, 135, -179, 85, 85, 35, -475, 333,
	-251, -244, -191, -357, 17, 159, -572, 158, -1, -357,
	-415, -369, -314, -384, -384, -314, -369, -369, -371, -357,
	-236, -475, -251, 35, -294, 242, 238, -449, 313, 314,
	-450, -465, 316, -467, 85, -248, -333, -241, -544, -545,
	-404, -357, 112, -544, 112, 85, -248, -333, -333, -297,
	-333, -357, -357, -357, -357, -304, -303, -333, -306, 32,
	-307, -357, -357, -357, -357, 112, -357, 112, -273, 41,
	48, 49, 50, -353, -353, 197, -276, 41, 431, 433,
	434, -306, 101, 101, 101, 101, 91, 91, 91, -353,
	-353, 101, 91, -360, 91, -546, 172, 45, 46, 101,
	101, 101, 101, 41, 91, -281, 41, 296, 300, 297,
	298, 299, 91, 101, 41, 101, 41, 101, 41, -357,
	85, -547, -548, 91, 332, -464, -580, -353, 364, -436,
	127, 127, -376, -582, 95, 412, -585, 326, -182, 499,
	32, -214, 242, 238, -573, -427, -426, -333, -196, -196,
	-196, -196, -196, -196, 68, 79, 68, 68, 68, 73,
	68, 73, 68, -322, 68, 79, -427, -198, -210, -360,
	86, -596, -595, -594, -592, 76, 250, 77, -390, -439,
	488, 492, 493, -423, -372, 91, -430, -218, 24, -244,
	-244, -497, 306, 307, 86, 159, -251, -316, 19, 158,
	-316, 120, -6, -147, -149, -384, -6, -384, 622, 377,
	623, 91, 101, 101, -528, 452, 447, 449, 112, -393,
	-515, -514, 61, -183, -208, -507, -550, -513, -357, 656,
	656, 656, 656, 61, -183, -507, -218, -520, -202, -201,
	44, -357, 101, 17, -420, -415, 146, 146, -357, 388,
	-431, 91, 410, 91, 245, 656, 91, -340, -379, -384,
	86, -259, 181, 180, -259, 35, 86, 86, -482, -482,
	-481, -484, -481, -259, -259, 86, 85, -200, 86, 24,
	86, 86, 86, -384, 86, 86, 159, -503, 508, -504,
	582, -452, -452, -452, -452, -452, -452, -452, -452, -452,
	-452, -452, -452, -452, -452, -452, -452, -452, -395, -394,
	268, 453, 635, 635, 453, 635, 635, 86, 159, -553,
	159, -348, 321, -348, -339, 91, 249, 91, 169, -357,
	91, 638, 91, -357, 91, 313, -357, -357, 91, 91,
	-233, -251, 86, 35, -237, -238, -239, -248, -240, -242,
	35, -581, 95, -576, 91, -357, 92, -582, 157, 362,
	41, 413, 414, 429, 357, 101, 101, 419, -574, -357,
	-181, 245, 358, -584, 52, 127, 91, -244, -401, -345,
	154, 287, 336, -311, -310, -357, 91, -237, -183, -244,
	-237, -237, -183, -476, 335, 21, 101, 145, -211, 83,
	158, -199, -245, -357, 146, 86, -314, -236, -314, -314,
	-369, -476, -183, -461, 317, 85, -459, 85, -459, 112,
	344, -468, -466, 268, -302, 45, 47, -251, -542, -357,
	-540, -542, -357, -540, -540, -404, -384, -302, -248, 249,
	31, 238, -305, 341, 342, 347, -432, 312, 117, -432,
	159, -200, 159, -357, -268, -268, 31, 91, 91, -246,
	86, 159, 127, 101, 91, -581, -576, 127, -437, 91,
	91, -582, 91, 91, -586, 127, -247, 245, -346, 159,
	-214, -214, -314, 159, 127, -216, -215, 82, 83, -217,
	82, -215, -215, 68, 68, -314, -594, -593, 24, -545,
	-545, -545, 86, 86, 15, -223, 41, -315, 20, 21,
	146, -315, 124, 122, 124, 124, -357, 86, 86, -488,
	613, -524, -526, 447, 21, 21, 15, 250, 86, -507,
	-507, -528, 45, 46, -415, -431, 432, -244, 159, 656,
	-249, -287, 91, -384, 86, -384, 86, 91, 86, 91,
	-205, 21, 86, 159, 86, 86, 86, 159, 86, 86,
	-384, 86, -553, -349, 191, 91, -349, 358, -358, -357,
	17, -357, 91, -464, 313, 313, 245, 243, -183, 86,
	159, -183, 91, -579, 423, 101, 41, 101, 157, 415,
	-500, -173, 95, -246, 32, -214, -583, 95, 127, 655,
	85, -353, -353, -353, -357, 86, 159, -353, -353, 86,
	86, 86, -266, 549, -477, 267, 101, 145, 101, 145,
	101, -355, -199, -357, -314, -572, 158, -314, -477, -451,
	318, 101, -380, 85, -380, 85, -460, 315, 85, 86,
	159, -357, -333, -263, -262, -260, 106, 117, 41, 401,
	-261, 95, 154, 301, 304, 303, 279, 302, -292, -373,
	82, 407, 341, 342, -405, 613, 537, 252, 111, 112,
	389, -374, 85, 85, 83, 321, 85, 85, -542, 86,
	-302, -333, 41, -305, 41, 354, 312, -303, -357, 154,
	-268, 86, -548, 91, -553, -579, 91, -439, -584, 91,
	-173, -246, -573, -205, -426, -513, -384, 85, -384, 85,
	68, 11, 19, -377, -384, -392, 640, 642, 643, 251,
	-6, 623, 377, -283, 614, 91, 21, 91, -522, 91,
	-427, -488, -142, -280, -345, 284, 86, -286, 137, 549,
	86, 86, -452, -452, -455, -454, -458, 453, 313, 461,
	-392, 91, 91, 86, 86, 91, -357, 169, 91, 655,
	91, -464, -464, -357, -225, -251, -177, 549, -266, -239,
	-177, 21, 549, 361, 41, 101, 41, 416, 91, -181,
	127, 107, 108, -341, -342, 91, -410, -268, -270, 91,
	-310, -377, -377, -264, -183, 35, -265, -308, -405, 549,
	-141, -140, -264, 549, 85, -478, 163, 101, 145, 101,
	101, -314, -314, -478, -467, 21, 86, -446, 86, -446,
	85, 127, -380, -466, -469, 61, -260, 106, -380, 91,
	-270, -271, 41, 300, 296, 127, 127, -272, 41, 280,
	281, -282, 85, 311, 15, 197, 85, 112, 112, -244,
	-410, -410, -543, 343, 344, 345, 349, 347, 348, 346,
	-543, -410, -410, 85, -433, -432, -380, -353, -353, 154,
	-583, -206, -209, -541, -357, 252, 21, 21, -498, 549,
	641, 85, 85, -357, -357, -337, 615, 101, 91, 449,
	-283, -489, 616, -518, -459, -268, 127, 86, 75, 547,
	550, 86, -457, 119, 415, 419, -378, -381, 101, 103,
	189, 157, 86, 86, -357, -344, -343, 91, 91, 91,
	313, 548, -178, 60, 495, 91, 92, 410, 91, 92,
	361, -173, 91, 656, 159, 127, 86, -447, 268, -183,
	159, -308, -345, -142, -447, -267, -309, -357, 91, -496,
	172, 334, 549, 101, 145, 101, -205, -479, 172, 334,
	-450, 86, 86, 86, -446, 101, 86, -473, -470, 85,
	-308, 270, 137, 91, 91, 101, 85, -508, 31, 91,
	-411, 85, 86, 86, 86, 86, -410, 101, -268, -353,
	86, 86, 159, 643, 85, -392, -392, 85, 21, -337,
	-490, 617, 91, -527, 452, -521, -519, 447, 448, 449,
	450, 91, 548, 65, 551, -456, -457, 419, -378, -381,
	611, 459, 459, 459, 656, 159, 127, -464, -227, -357,
	311, 432, -342, 91, -413, -448, 320, 21, -308, -353,
	-448, 86, 159, -353, -353, 334, 101, 145, 101, -206,
	334, -462, 319, 86, -473, -308, -472, -471, 318, 271,
	85, 86, -384, -396, -353, 86, -285, -284, 545, -410,
	-413, 83, -413, 83, -413, 83, -413, 83, 86, -268,
	-357, 252, -137, 85, 86, 86, -338, -357, -522, 91,
	-529, 250, -525, -526, 451, -519, 21, 449, 21, 21,
	-143, 159, 65, 116, 460, 460, 460, -343, 91, 91,
	-226, 35, 454, 388, -414, 258, 354, 355, 95, 549,
	341, 342, 21, -449, -268, -309, -377, -377, 101, 101,
	86, 159, -357, 267, 85, -391, -385, -384, 267, 86,
	-357, -291, -289, -290, 82, 466, 309, 310, 86, -543,
	-543, -543, -543, -292, 86, 159, -390, 86, 159, -536,
	85, 101, -524, -523, -525, 21, -522, 21, -522, -522,
	456, 549, -456, 91, -353, -353, 91, 91, 340, -333,
	85, -461, -471, -470, -391, 86, 159, -432, -290, 82,
	-289, 82, 16, 15, -413, -413, -413, -413, 85, 86,
	-357, -539, 31, 86, -535, -534, -334, -530, -357, 452,
	453, 91, -522, 127, 550, -614, -613, 634, 101, 101,
	-357, -446, -451, 86, -385, -288, 306, 307, 31, 172,
	-288, -390, -538, -537, -335, 86, 159, 158, 91, 551,
	91, 86, -467, 106, 41, 308, 86, 159, 127, -534,
	-357, -537, 41, -384, 158, -357,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 314,
	315, 316, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 0, 0, 0, 0, 0, 709, 710, 0, 673,
	0, 0, 0, 0, 0, 0, 550, 551, 552, 553,
	554, 555, 556, 557, 558, 559, 560, 561, 562, 563,
	564, 565, 566, 567, 568, 569, 570, 571, 572, 573,
	574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
	584, 585, 586, 425, 426, 427, 428, 429, 430, 431,
	432, 433, 434, 0, 345, 341, 253, 254, 255, 256,
	257, 258, 259, 352, 353, 527, 0, 0, 0, 0,
	792, -2, 97, 0, 0, 0, 0, 334, 0, 325,
	325, 0, 0, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, -2, 722, 0, 674,
	675, 676, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 687, 688, 689, 690, 409, 410, 411, 405,
	406, 408, 407, -2, 0, 0, 722, 0, 0, 0,
	800, 0, 0, 0, 843, 871, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1395, 1396, 1397,
	1398, 2195, 2165, -2, 1930, 1907, 2089, 2090, 1986, 1998,
	2232, 2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241,
	2242, 2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251,
	2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261,
	2262, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271,
	2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965,
	1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975,
	1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
	2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018,
	2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028,
	2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, -2, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160,
	2161, 2162, 2163, 2164, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, -2,
	-2, -2, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2193, 2194, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 0,
	309, 307, 1877, 1907, 1930, 1986, 1998, 1999, 2037, 2089,
	2090, 2122, 2165, 2181, 2182, 2183, 2195, 0, 0, 997,
	0, 770, 0, 0, 775, 1344, 770, 346, 711, 712,
	800, 826, 671, 0, 383, 0, 1921, 387, 2172, 0,
	0, 0, 0, 668, 377, 378, 379, 380, 381, 382,
	0, 0, 970, 0, 0, 373, 0, 340, 1988, 2194,
	1399, 0, 0, 0, 0, 0, 196, 1121, 198, 1123,
	202, 210, 0, 0, 0, 215, 216, 219, 220, 221,
	222, 223, 0, 227, 0, 229, 232, 0, 234, 235,
	0, 238, 239, 240, 0, 250, 251, 252, 1124, 1125,
	1126, -2, 125, 995, 1835, 1721, 0, 1728, 1741, 1752,
	1481, 1482, 1483, 1484, 0, 0, 0, 0, 0, 0,
	1492, 1493, 0, 1523, 2236, 2277, 2278, 0, 1501, 1502,
	1503, 1504, 1505, 1506, 0, 136, 148, 149, 1774, 1775,
	1776, 1777, 1778, 1779, 1780, 0, 1782, 1783, 1784, 1692,
	1468, 1395, 0, 2245, 0, 2267, 2272, 2273, 2274, 2275,
	2266, 0, 0, 1676, 0, 1666, 0, 0, -2, -2,
	0, 0, 2062, -2, 2279, 2280, 2281, 2242, 2263, 2271,
	2246, 2247, 2270, 2238, 2239, 2240, 2233, 2234, 2235, 2237,
	2249, 2251, 2262, 0, 2258, 2268, 2269, 2170, 0, 0,
	2217, 0, 0, 0, 2212, 150, 151, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1687, -2, 1689, -2, 1691, -2,
	1694, -2, -2, -2, -2, 1699, 1700, -2, 1702, -2,
	-2, -2, -2, -2, -2, -2, 1678, 1679, 1680, 1681,
	1670, 1671, 1672, 1673, 1674, 1675, -2, -2, -2, 826,
	920, 0, 826, 0, 801, 848, 851, 854, 857, 804,
	0, 0, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 335, 336, 324, 326, 0, 330, 0,
	0, 326, 323, 317, 0, 1157, 1157, 1157, 0, 0,
	0, 0, 1157, 1157, 1157, 1157, 1157, 0, 1157, 0,
	0, 0, 0, 0, 1157, 0, 1030, 1128, 1129, 1130,
	1155, 1156, 1229, 0, 0, 0, 727, 723, 724, 725,
	726, 814, 0, 816, 819, 0, 0, 648, 648, 887,
	887, 594, 0, 0, 0, 648, 0, 608, 600, 0,
	0, 0, 648, 0, 0, 821, 821, 0, 651, 658,
	648, 648, -2, 648, 648, 645, 648, 0, 0, 1169,
	614, 615, 616, 600, 600, 619, 620, 621, 631, 632,
	659, 1859, 0, 0, 527, 527, 0, 527, 527, 0,
	527, 527, 527, 0, 729, 1946, 2032, 1928, 2004, 1887,
	1988, 2194, 0, 282, 2062, 287, 0, 1929, 1949, 0,
	0, 1967, 0, -2, 0, 362, 826, 0, 0, 800,
	0, 0, 0, 0, 527, 527, 527, 527, 527, 1228,
	527, 527, 527, 527, 527, 0, 0, 0, 527, 527,
	527, 527, 0, 0, 872, 873, 862, 874, 875, 864,
	865, 866, 867, 868, 869, 870, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 104, 103, 0, 1836, 1854,
	1787, 1788, 1789, 1841, 1791, 1845, 1845, 1845, 1845, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1845,
	1845, 0, 0, 1834, 1811, 1843, 1843, 1843, 1841, 1838,
	1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
	1802, 1803, 1804, 1805, 1848, 1848, 1851, 1851, 1848, 0,
	423, 421, 422, 1717, 0, 0, 0, 0, 770, 774,
	1342, 0, 0, 0, 826, -2, 0, 0, 672, 384,
	1400, 0, 0, 388, 0, 389, 0, 0, 391, 0,
	0, 0, 412, 0, 415, 399, 400, 401, 402, 395,
	0, 176, 0, 375, 376, 0, 0, 342, 0, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 207, 203,
	211, 214, 224, 231, 0, 243, 245, 248, 204, 212,
	217, 218, 225, 246, 205, 208, 209, 213, 247, 249,
	206, 226, 230, 244, 228, 233, 236, 237, 242, 0,
	177, 0, 0, 0, 0, 0, 1727, 0, 0, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -2, 1721, 0, 0, 1487,
	1488, 1489, 1490, 0, 1494, 0, 1524, 0, 0, 0,
	0, 0, 0, 1781, 1785, 0, 1717, 1717, 0, 1717,
	1713, 0, 0, 0, 0, 0, 0, 1717, 1649, 0,
	0, 1651, 1667, 0, 0, 1653, 1654, 0, 1657, 1658,
	1717, 0, 1717, 1662, 1717, 1717, 1717, 1645, 1646, 0,
	1713, 1713, 1713, 1713, 0, 0, 1713, 1713, 1713, 1713,
	1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
	1713, 0, 0, 0, 0, 821, 0, 827, 0, -2,
	0, 845, 847, 849, 850, 852, 853, 855, 856, 858,
	859, 806, 0, 0, 100, 0, 0, 0, 0, 0,
	0, 71, 73, 0, 0, 0, 0, 0, 0, 328,
	0, 333, 319, 2024, 0, 318, 0, 0, 0, 0,
	0, 994, 0, 0, 1157, 1157, 1157, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 1157, 1157, 1157, 1157,
	0, 1175, 0, 0, 0, 729, 728, 0, 815, 0,
	0, 70, 587, 588, 589, 887, 0, 0, 591, 592,
	0, 593, 0, 600, 648, 648, 606, 607, 602, 601,
	654, 655, 651, 0, 651, 651, 887, 0, 625, 626,
	627, 648, 648, 633, 822, 0, 634, 635, 651, 0,
	656, 657, 887, 0, 0, 887, 887, 0, 643, 644,
	646, 648, 0, 0, 1157, 0, 664, 602, 602, 1860,
	1861, 0, 0, 1166, 0, 0, 0, 0, 667, 0,
	0, 0, 439, 440, 0, 0, 730, 0, 261, 265,
	0, 268, 0, 2032, 0, 2032, 0, 0, 275, 0,
	0, 0, 0, 0, 0, 305, 306, 0, 0, 0,
	0, 296, 299, 1336, 1337, 1118, 1119, 300, 301, 354,
	355, 0, 821, 844, 846, 840, 841, 842, 0, 72,
	0, 0, 0, 0, 0, 527, 0, 0, 0, 0,
	0, 705, 0, 1010, 707, 0, 0, 0, 0, 0,
	895, 889, 891, 965, 136, 895, 863, -2, -2, 8,
	121, 118, 0, 19, 0, 0, 19, 19, 0, 19,
	310, 0, 1857, 1855, 1856, 1790, 1842, 0, 1816, 0,
	1817, 1818, 1819, 1830, 1831, 0, 0, 1812, 0, 1813,
	1814, 1815, 1806, 0, 1807, 1808, 0, 1809, 1810, 308,
	420, 0, 0, 1718, 998, 0, 748, 762, 743, 0,
	751, 0, 0, 1344, 0, 0, 0, 731, 762, 733,
	0, 751, 821, 798, 0, 776, 0, 0, 385, 0,
	396, 390, 0, 397, 392, 393, 0, 0, 414, 416,
	417, 418, 403, 404, 669, 371, 372, 363, 364, 365,
	366, 367, 368, 369, 370, 0, 0, 0, 374, 146,
	0, 343, 344, 0, 0, 0, 190, 191, 192, 193,
	194, 195, 197, 181, 694, 696, 1110, 1122, 0, 1113,
	0, 200, 241, 173, 0, 0, 0, 1722, 1723, 1724,
	1725, 1726, 1731, 0, 1733, 1735, 1737, 1739, 0, 1757,
	-2, -2, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1742, 1755, 1756, 0, 0, 0,
	0, 0, 0, 1753, 1753, 1748, 0, 1507, 1338, 1339,
	1485, 0, 0, 1521, 1525, 0, 0, 0, 0, 0,
	0, 1141, 1841, 0, 137, 1712, 1616, 1617, 1618, 1619,
	1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
	1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
	1640, 1641, 1642, 1643, 1644, 0, 0, 1721, 0, 0,
	0, 1714, 1715, 0, 0, 0, 1604, 0, 0, 1610,
	1611, 1612, 0, 757, 0, 1677, 1650, 1668, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 921, 0, 766,
	768, 769, 795, 776, 802, 0, 0, 0, 96, 101,
	0, 1196, 0, 0, 0, 0, 0, 0, 0, 74,
	1170, 75, 1172, 337, 338, 0, 0, 332, 320, 2024,
	322, 0, 0, 0, 0, 0, -2, 0, 0, 0,
	0, 0, 1046, 1047, 525, 1104, 0, 0, 0, 1120,
	1145, 1153, 0, 0, 0, 0, 0, 1202, 1032, 1037,
	1038, 1039, 1033, 1034, 1040, 1041, 0, 817, 0, 0,
	934, 590, 649, 650, 888, 597, 1988, 602, 887, 887,
	609, 603, 610, 653, 611, 612, 613, 651, 887, 887,
	823, 648, 651, 636, 652, 651, 1344, 640, 0, 647,
	1344, 665, 1344, 0, 663, 617, 618, 1204, 819, 437,
	438, 443, 445, 0, 494, 494, 494, 477, 494, 0,
	0, 465, 1862, 0, 0, 0, 0, 474, 1862, 0,
	0, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 0, 0,
	1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862,
	1862, 0, 1862, 1862, 1862, 1862, 1862, 1321, 1862, 0,
	493, 1167, 484, 485, 486, 487, 492, 0, 0, 521,
	0, 0, 1045, 0, 525, 0, 0, 1087, 0, 0,
	900, 0, 901, 902, 903, 898, 936, 960, 960, 0,
	960, 940, 1344, 0, 0, 0, 273, 274, 262, 0,
	263, 0, 0, 276, 277, 0, 279, 280, 281, 288,
	1928, 2004, 283, 285, 0, 0, 289, 302, 303, 304,
	0, 0, 294, 295, 0, 0, 357, 358, 360, 0,
	776, 1171, 691, 1340, 692, 693, 697, 0, 0, 700,
	701, 702, 703, 704, 1012, 0, 0, 1096, 1097, 1098,
	1099, 887, 0, 896, 0, 892, 966, 0, 968, 0,
	887, 0, 119, 19, 0, 112, 109, 0, 0, 0,
	0, 0, 1837, 1786, 1858, 0, 0, 0, 1839, 0,
	0, 0, 0, 0, 102, 778, 738, 0, 742, 759,
	0, 763, 0, 0, 755, 747, 752, 0, 0, 772,
	739, 1343, 0, 0, 0, 732, 0, 0, 737, 776,
	0, 799, 828, 829, 832, 1401, 0, 398, 394, 413,
	0, 527, 0, 0, 0, 184, 1107, 0, 185, 189,
	179, 0, 0, 0, 1112, 0, 1109, 1114, 0, 199,
	0, 0, 174, 175, 1187, 1196, 0, 0, 0, 1732,
	1734, 1736, 1738, 1740, 0, 1743, 1753, 1753, 1749, 0,
	1744, 0, 1746, 0, 1722, 1491, 0, 1526, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	1594, 1595, 0, 0, 1599, 0, 1601, 1602, 1603, 1605,
	0, 0, 0, 1609, 0, 1648, 1669, 1652, 1655, 0,
	1659, 0, 1661, 1663, 1664, 1665, 0, 826, 826, 0,
	0, 1565, 1565, 1565, 0, 0, 0, 0, 1565, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1510, 0, 1511, 1512, 0, 0, 0, 922, 796, 0,
	0, 0, 0, 0, 1194, 0, 86, 0, 0, 0,
	0, 91, 0, 0, 76, 339, 327, 329, 0, 321,
	0, 1158, 0, 0, 0, 0, 0, 1000, 1001, 1003,
	0, 1006, 1007, 1008, 1012, 819, 0, 819, 1057, 1862,
	529, 0, 0, 1106, 0, 1076, 0, 0, 0, -2,
	0, 0, 1153, 0, 0, 0, 1206, 0, 0, 0,
	716, 720, 23, 820, 0, 595, 0, 596, 648, 604,
	605, 887, 628, 629, 0, 0, 887, 648, 648, 639,
	651, 660, 0, 661, 1344, 1206, 0, 0, 1166, 1272,
	1240, 455, 0, 1356, 1357, 495, 0, 1363, 1372, 1157,
	1433, 0, 1372, 0, 0, 1374, 1375, 0, 0, 0,
	0, 478, 479, 0, 464, 0, 0, 0, 0, 0,
	0, 463, 0, 0, 505, 0, 0, 0, 0, 0,
	1863, 1862, 1862, 0, 472, 473, 0, 476, 0, 0,
	0, 0, 0, 0, 0, 0, 1862, 1862, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 0, 0, 0, 0, 0, 1328, 1329,
	0, 1057, 1862, 0, 0, 0, 0, 529, 1101, 1074,
	1092, 0, 441, 442, 502, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 925, 0, 0, 0,
	0, 0, 0, 0, 819, 961, 0, 963, 964, 938,
	-2, 0, 900, 943, 1717, 0, 266, 267, 0, 0,
	272, 290, 292, 264, 0, 0, 0, 291, 293, 297,
	298, 356, 359, 361, 838, 0, 0, 1230, 0, 1013,
	1014, 1016, 1017, 0, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1912, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1011,
	708, 878, 890, 897, 967, 969, 137, 893, 878, 0,
	122, 19, 121, 113, 114, 0, 19, 0, 0, 0,
	0, 1847, 1846, 1832, 0, 1833, 1844, 1849, 0, 1852,
	0, 424, 782, 0, 0, 762, 764, 0, 0, 762,
	0, 0, 771, 0, 0, 0, 0, 0, 0, 762,
	838, 778, 0, 835, 833, 834, 0, 0, 670, 147,
	419, 0, 0, 0, 0, 0, 695, 0, 1111, 181,
	0, 0, 201, 0, 0, 0, 1196, 1191, 1716, 1745,
	1747, 0, 1754, 1750, 1486, 1495, 1522, 0, 0, 1528,
	1540, 1540, 0, 0, 0, 1531, 1845, 1845, 1534, 1841,
	1843, 1841, 1540, 1540, 0, 1142, 0, 1143, 832, 138,
	0, 0, 1600, 0, 0, 0, 758, 0, 0, 0,
	1561, 1563, 1565, 1565, 1572, 1566, 1573, 1574, 1565, 1565,
	1565, 1565, 1579, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
	1565, 1565, 1565, 1565, 1559, 0, 0, 1775, 1776, 767,
	0, 0, 809, 810, 811, 812, 813, 0, 0, 61,
	61, 1196, 0, 95, 87, 0, 0, 0, 0, 0,
	331, 0, 77, 78, 0, 0, 85, 0, 0, 0,
	0, 0, 1005, 0, 0, 0, 1349, 0, 1061, 1058,
	1059, 1060, 0, 1101, 530, 531, 532, 533, 0, 0,
	0, 1105, 0, 0, 1069, 0, 0, 0, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, -2, 1161, 0, 0, 0,
	1349, 1180, 0, 0, 1185, 1349, 1349, 0, 1214, 0,
	1203, 770, 0, -2, 0, 0, 718, 0, 0, 935,
	598, 887, 622, 824, 825, 1344, 887, 887, 648, 666,
	662, 1214, 1205, 0, 444, 494, 0, 1260, 0, 0,
	1266, 0, 1273, 448, 0, 496, 0, 1362, 1389, 1373,
	1389, 1434, 1389, 1389, 1157, 0, 496, 0, 0, 466,
	0, 0, 0, 0, 0, 462, 499, 832, 449, 451,
	452, 453, 503, 504, 506, 0, 508, 509, 468, 480,
	481, 482, 483, 0, 0, 0, 475, 488, 489, 490,
	491, 450, 1289, 1290, 1291, 1294, 1295, 1296, 1297, 0,
	0, 1300, 1301, 1302, 1303, 1304, 1386, 1387, 1388, 1305,
	1306, 1307, 1308, 1309, 1310, 1311, 1330, 1331, 1332, 1333,
	1334, 1335, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	0, 0, 1325, 0, 0, 0, 1061, 0, 0, 0,
	0, 0, 1101, 524, 0, 0, 1076, 0, 1094, 0,
	1088, 1089, 0, 0, 740, 887, 349, 0, 930, 923,
	0, 907, 0, 909, 927, 910, 928, 929, 914, 0,
	916, 0, 912, 913, 918, 911, 887, 899, 937, 962,
	939, 942, 944, 945, 951, 0, 0, 0, 0, 260,
	269, 270, 271, 278, 0, 549, 284, 794, 0, 1341,
	698, 699, 1231, 1232, 706, 0, 1018, 876, 0, 0,
	876, 117, 120, 0, 115, 0, 0, 0, 0, 107,
	105, 1840, 0, 0, 784, 161, 0, 0, 0, 760,
	0, 765, 762, 746, 756, 745, 753, 754, 773, 1345,
	1346, 1347, 1348, 762, 736, 735, 797, 782, 830, 831,
	0, 1402, 386, 0, 1108, 181, 186, 187, 188, 182,
	180, 1115, 0, 1117, 0, 1189, 0, 0, 1751, 1527,
	1496, 1529, 1541, 1542, 1530, 0, 1498, 1499, 1532, 1533,
	1535, 1536, 1537, 1538, 1539, 1500, 0, 1144, 1596, 0,
	1598, 1606, 1607, 0, 1656, 1660, 0, 0, 0, 0,
	0, 1570, 1571, 1575, 1576, 1577, 1578, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 826, 1560,
	0, 0, 0, 0, 0, 0, 0, 807, 0, 0,
	0, 63, 0, 63, 1195, 1197, 0, 965, 0, 0,
	92, 0, 0, 79, 80, 0, 0, 0, 993, 996,
	1002, 1004, 0, 0, 0, 1350, 1351, 1353, 1354, 1355,
	0, 1029, 0, 0, 1049, 1050, 1051, 1063, 0, 535,
	536, 0, 0, 0, 548, 544, 545, 546, 526, 1100,
	1083, 0, 0, 1072, 0, 0, 1082, 0, 1162, 1862,
	1862, 1862, 0, 0, 1274, 1862, 1862, 0, 1182, 1184,
	0, 0, 1278, 1217, 0, 0, 1208, 0, 960, 0,
	0, 887, 717, 720, 721, 818, 599, 637, 641, 638,
	887, 1217, 436, 1238, 0, 0, 0, 0, 0, 1270,
	0, 0, 1242, 0, 467, 497, 0, -2, 0, 1390,
	0, 1376, 1390, 0, 0, 1389, 0, 456, 496, 0,
	0, 0, 510, 514, 515, 0, 512, 1429, 0, 513,
	0, 501, 0, 507, 1292, 1293, 0, 1298, 1299, 0,
	1323, 0, 0, 0, 447, 516, 0, 0, 0, 517,
	518, 523, 1102, 1103, 1069, 0, 1083, 0, 1093, 0,
	1090, 1091, 826, 0, 0, 904, 931, 0, 0, 905,
	0, 906, 908, 915, 917, 348, 946, 0, 0, 948,
	949, 950, 941, 286, 839, 1015, 0, 860, 0, 0,
	894, 861, 0, 19, 0, 0, 110, 1850, 1853, 786,
	0, 783, 162, 0, 0, 0, 0, 750, 761, 744,
	734, 784, 836, 837, 183, 178, 1116, 1199, 0, 1190,
	0, 1453, 1509, 0, 1608, 0, 1565, 1562, 1565, 1564,
	1556, 0, 1513, 0, 1515, 1516, 1517, 0, 1519, 1520,
	0, 805, 0, 59, 0, 62, 60, 0, 94, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 1035, 1278,
	0, 1035, 1062, 1048, 0, 0, 537, 538, 0, 541,
	547, 1064, 0, 0, 1066, 1067, 1068, 0, 0, 1080,
	0, 0, 0, 0, 1154, 1168, 0, 0, 0, -2,
	0, -2, 1179, 0, 1223, 0, 1215, 0, 1207, 0,
	1210, 887, 887, -2, 714, 719, 0, 642, 1223, 1240,
	0, 1261, 0, 0, 0, 0, 0, 0, 0, 1241,
	0, 1254, 498, 1391, -2, 1405, 1407, 0, 1167, 1410,
	1411, 0, 0, 0, 0, 0, 0, 1460, 1419, 0,
	0, 1423, 1424, 1425, 0, 0, 1428, 0, 1769, 1770,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1370,
	457, 458, 0, 460, 461, 1862, 1430, 500, 454, 1862,
	470, 1322, 1326, 1327, 1324, 522, 519, 520, 1072, 1075,
	1086, 1095, 741, 821, 350, 351, 932, 0, 924, 955,
	952, 0, 0, 1019, 877, 885, 2217, 2219, 2216, 111,
	116, 0, 0, 788, 0, 785, 0, 779, 781, 172,
	749, 786, 132, 164, 0, 0, 1497, 0, 0, 0,
	1597, 1647, 1568, 1569, 0, 1557, 0, 1551, 1552, 1553,
	1558, 0, 0, 808, 803, 64, 90, 0, 93, 68,
	81, 0, 0, 0, 0, 1021, 1028, 1042, 1173, 1352,
	1027, 0, 0, 534, 539, 0, 542, 543, 1084, 1083,
	0, 1070, 1071, 0, 1078, 0, 0, 1163, 1164, 1165,
	1275, 1276, 1277, 1233, 1181, 0, -2, 1286, 0, 0,
	1177, 1199, 1233, 0, 0, 1211, 0, 1218, 0, 1216,
	1209, 826, 715, 1220, 446, 1272, 1262, 0, 1264, 0,
	0, 0, 0, 1243, -2, 0, 1406, 1408, 1409, 1412,
	1413, 1414, 1465, 1466, 1467, 0, 0, 1417, 1462, 1463,
	1464, 1418, 0, 0, 0, 0, 0, 1767, 1768, 1458,
	0, 0, 1377, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1378, 0, 0, 0, 1369, 1371, 459, 0, 0, 1862,
	1085, 347, 0, 0, 956, 958, 953, 954, 879, 0,
	0, 0, 0, 106, 108, 123, 0, 787, 163, 0,
	788, 134, 0, 155, 0, 1200, 0, 1508, 0, 0,
	0, 1567, 1554, 0, 0, 0, 0, 0, 1771, 1772,
	1773, 0, 1514, 1518, 89, 0, 66, 0, 82, 83,
	0, 0, 0, 1043, 1044, 1052, 1053, 0, 1055, 1056,
	540, 1065, 1073, 1077, 1080, 0, 1132, 1235, 0, 1183,
	1166, 1288, 1862, 1186, 1235, 0, 1280, 1862, 1862, 1201,
	0, 1213, 0, 1225, 0, 1219, 821, 435, 0, 1222,
	1258, 1263, 1265, 1267, 0, 1271, 1269, 1244, -2, 0,
	1252, 0, 0, 1415, 1416, 0, 0, 1666, 1862, 0,
	1448, 0, 1132, 1132, 1132, 1132, 0, 511, 469, 0,
	933, 947, 0, 886, 0, 0, 0, 0, 0, 777,
	124, 0, 133, 152, 0, 165, 166, 0, 0, 0,
	0, 1192, 0, 1456, 1457, 0, 1543, 0, 0, 0,
	1547, 1548, 1549, 1550, 65, 68, 0, 0, 0, 1020,
	0, 1054, 1079, 1081, 1131, 1176, 0, 1272, 1287, 0,
	1178, 1279, 0, 0, 0, 1212, 1224, 0, 1227, 713,
	1221, 1239, 0, 1268, 1245, 1253, 0, 1248, 0, 0,
	0, 1461, 0, 1422, 0, 1427, 1436, 1449, 0, 0,
	1358, 0, 1360, 0, 1364, 0, 1366, 0, 0, 471,
	957, 959, 0, 1717, 881, 882, 0, 790, 780, 135,
	139, 0, 161, 158, 0, 167, 0, 0, 0, 0,
	1188, 0, 1454, 0, 1544, 1545, 1546, 67, 69, 84,
	0, 1022, 1023, 1036, 1133, 1862, 1862, 0, 0, 0,
	1139, 1140, 0, 1260, 1292, 1281, 1282, 1283, 1226, 1259,
	1247, 0, -2, 1255, 0, 0, 1719, 1729, 1730, 1420,
	1426, 1435, 1437, 1438, 0, 1450, 1451, 1452, 1459, 1132,
	1132, 1132, 1132, 1368, 880, 0, 0, 789, 0, 126,
	0, 0, 156, 157, 159, 0, 168, 0, 170, 171,
	0, 0, 1555, 1024, 0, 0, 1136, 1137, 0, 1236,
	0, 1238, 1249, -2, 0, 1257, 0, 1421, 1439, 0,
	1440, 0, 0, 0, 1359, 1361, 1365, 1367, 1717, 883,
	791, 1198, 0, 140, 0, 142, 144, 145, 1392, 153,
	154, 160, 169, 0, 0, 1009, 1025, 0, 1134, 1135,
	1138, 0, 1240, 1256, 1720, 1441, 1443, 1444, 0, 0,
	1442, 0, 127, 128, 0, 141, 0, 0, 1193, 1455,
	1026, 1237, 1234, 1445, 1447, 1446, 884, 0, 0, 143,
	1393, 129, 130, 131, 0, 1394,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 118, 3, 3, 3, 149, 141, 3,
	85, 86, 146, 144, 159, 145, 158, 147, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 657, 654,
	128, 127, 129, 3, 658, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 151, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 655, 140, 656, 152,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 119, 120, 121, 122, 123, 124,
	125, 126, 130, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 142, 143, 148, 150, 153, 154, 155, 156,
	157, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:843
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:850
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:856
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:864
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:870
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:889
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:899
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:904
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:908
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:941
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:955
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:966
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:978
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:987
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:991
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:997
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1011
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1015
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1019
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1023
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1030
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1038
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1046
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1052
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1059
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1068
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1076
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1084
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1094
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1104
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1116
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1126
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1136
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1147
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1158
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1172
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1180
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1188
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1196
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1205
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1215
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1227
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1235
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1244
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1254
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1264
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1274
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1294
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1300
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1307
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1315
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1321
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1330
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1340
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1348
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1356
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1364
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1374
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1382
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1392
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1399
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1408
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1422
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1428
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1432
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1438
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1447
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1457
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1461
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1467
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1476
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1480
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1486
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1521
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1528
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1532
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1538
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1542
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1548
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1555
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1563
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1567
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1579
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1583
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1597
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1601
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1606
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1613
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1617
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1621
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1627
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1636
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1647
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1651
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1657
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1661
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1667
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1671
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1677
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1697
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1716
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1720
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1724
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1729
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1733
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1742
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1752
		{
			yyVAL.str = ""
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1759
		{
			yyVAL.str = yyDollar[3].str
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1764
		{
			yyVAL.str = "\n"
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1771
		{
			yyVAL.str = yyDollar[3].str
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1776
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1780
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1808
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1812
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1818
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1826
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1846
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1865
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1890
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1894
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1898
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1903
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1907
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1913
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1926
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1937
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1950
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1954
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1964
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1977
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1990
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1996
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2002
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2010
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2020
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2030
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2034
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2038
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2042
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2046
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2050
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2057
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2061
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2067
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2074
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2083
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2087
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2093
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2097
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2101
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2105
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2109
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2113
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2117
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2121
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2125
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2129
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2133
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2137
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2141
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2145
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2149
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2153
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2157
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2161
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2165
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2169
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2173
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2177
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2181
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2185
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2189
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2193
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2197
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2201
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2205
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2209
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2213
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2217
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2229
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2233
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2237
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2241
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2245
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2249
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2253
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2257
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2261
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2265
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2269
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2273
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2277
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2308
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2317
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2324
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2340
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2358
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2362
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2368
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2375
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2383
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2387
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2391
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2395
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2401
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2405
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2411
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2418
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2425
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2434
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2472
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2478
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2484
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2488
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2495
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2501
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2505
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2511
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2519
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2528
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2537
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2545
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2553
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2576
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2595
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2640
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2644
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2648
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2654
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2658
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2664
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2674
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2678
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2698
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2704
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2709
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2714
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2719
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2725
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2731
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2736
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2740
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2744
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2748
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2752
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2756
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2760
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2764
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2768
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2774
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2778
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2786
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2791
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2796
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2802
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2815
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2828
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2854
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2870
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2877
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2888
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2903
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2909
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2919
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2925
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2929
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2935
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2941
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2945
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2949
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2953
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2959
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2972
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2978
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2982
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2988
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2992
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2998
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3004
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3015
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3021
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3025
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3029
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3033
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3037
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3041
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3049
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3057
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3067
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3075
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3085
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3095
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3111
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3115
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3123
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3131
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 412:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3171
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3175
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3181
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3187
		{
			yyVAL.str = yyDollar[1].str
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3192
		{
			yyVAL.str = "true"
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3193
		{
			yyVAL.str = "false"
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3194
		{
			yyVAL.str = yyDollar[1].str
		}
	case 419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3199
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3205
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3214
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3221
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3229
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3233
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3258
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3281
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3291
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3298
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3307
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3315
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3319
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3325
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3336
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3340
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3346
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3350
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3374
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3384
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3394
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3410
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3428
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3432
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3438
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3442
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3448
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3454
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3462
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3472
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3480
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3490
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3500
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3510
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3517
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3521
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3525
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3529
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3533
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3540
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3546
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3550
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3554
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3558
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3562
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3570
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3574
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3579
		{
			yyVAL.str = ""
		}
	case 494:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3610
		{
			yyVAL.str = ""
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3614
		{
			yyVAL.str = string("COLUMN")
		}
	case 496:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3619
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3625
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3631
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3639
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3643
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3649
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3657
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3664
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3670
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3676
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3682
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3688
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3695
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3702
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3710
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3716
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3728
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3734
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3742
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3746
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3753
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3771
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3786
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3801
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3816
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3829
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3835
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3846
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3858
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3871
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3875
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3883
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3887
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3892
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3896
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3912
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3916
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3920
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3924
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3931
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3935
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3939
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3943
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3950
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3954
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3961
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3965
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3969
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3973
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3980
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3987
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3993
		{
			yyVAL.item = nil
		}
	case 548:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3998
		{
			yyVAL.item = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4046
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4052
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4058
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4064
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4073
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4081
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4120
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4126
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4131
		{
		}
	case 602:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4135
		{
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4140
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4150
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4160
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4168
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4174
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4180
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4186
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4192
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4198
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4204
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4213
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4217
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4221
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4225
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4229
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4233
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4237
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4241
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4247
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4256
		{
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4258
		{
		}
	case 628:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4267
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4277
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4286
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4290
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4294
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4300
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4306
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4312
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4318
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4338
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4358
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4364
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4376
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4390
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4396
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4402
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4409
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4418
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4422
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4426
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4431
		{
			yyVAL.str = ""
		}
	case 652:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4435
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4441
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4456
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4460
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4466
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4474
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4481
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4489
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4495
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4501
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 666:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4506
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4514
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4520
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4525
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4531
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4537
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4541
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4569
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4577
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4585
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4593
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4597
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4603
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4616
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4624
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4633
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4639
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4647
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4655
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4663
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4669
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4677
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4683
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4691
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4697
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4707
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4712
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4719
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4735
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4748
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4759
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4763
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4769
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4775
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4784
		{
		}
	case 721:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4786
		{
		}
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4789
		{
		}
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4798
		{
		}
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4802
		{
		}
	case 731:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4807
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4816
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4823
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4829
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4837
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4844
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4851
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4871
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4879
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4889
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4893
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4899
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4906
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4912
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4920
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4927
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4934
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4953
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4957
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4961
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4970
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4974
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4980
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4989
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4993
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4999
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 758:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5003
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5009
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5013
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5019
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5024
		{
		}
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5028
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5035
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5039
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5046
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5051
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5055
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5061
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5065
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5071
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5075
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5080
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5084
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5097
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5108
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5119
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5141
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5164
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5181
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5185
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5198
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5202
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5207
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5211
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5218
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5223
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5230
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5236
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5240
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5244
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5248
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5252
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5256
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5261
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5265
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5271
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5281
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5300
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5314
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5318
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5324
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5333
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5337
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5341
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5355
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5371
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5375
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5381
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5389
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5393
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5398
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5402
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5408
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5412
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5416
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5421
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5425
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5431
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5437
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5441
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5447
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5452
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5456
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5460
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5465
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5469
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5473
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5482
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5490
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5494
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5498
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5512
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5516
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5526
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5536
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5546
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5558
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5566
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5574
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5583
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5591
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5599
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5607
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5615
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5623
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5631
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5639
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5647
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5657
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5668
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL string
//line mysql_sql.y:5682
		{
			yyLOCAL = yyDollar[1].str
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL string
//line mysql_sql.y:5686
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() + " " + yyDollar[2].str
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5692
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5696
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 866:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5700
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5704
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 868:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5708
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 869:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5712
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5716
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 871:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5722
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5726
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5730
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5739
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5743
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5748
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5752
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5762
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5771
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5780
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5791
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5795
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5800
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5804
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5809
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5813
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5819
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5823
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5829
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5833
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5837
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5841
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5846
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5854
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5860
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5868
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5878
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5888
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5892
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5898
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5907
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5916
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5925
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5933
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:5944
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5954
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5958
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 912:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5964
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 913:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5968
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 914:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5978
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 915:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5982
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 916:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5986
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 917:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5990
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 918:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5996
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 919:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6002
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6013
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6017
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6023
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6029
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6033
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6039
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 926:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6045
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 927:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6049
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6053
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 929:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6057
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 930:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6067
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6073
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6077
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6083
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6087
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6093
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6097
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6107
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6120
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6126
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6132
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6146
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6164
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6168
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6174
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6184
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6188
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6192
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6197
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6201
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6205
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6209
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6214
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6218
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6222
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6226
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6230
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6235
		{
			yyVAL.str = ""
		}
	case 961:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6243
		{
			yyVAL.str = yyDollar[2].str
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6249
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6253
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6258
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6262
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6266
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6270
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6274
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6280
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 993:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6322
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6335
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6341
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 996:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6347
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6360
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6365
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6372
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6379
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6383
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6389
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6395
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6400
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6404
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6408
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6412
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6419
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6452
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6457
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6464
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6471
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6475
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6481
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6487
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6491
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6495
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6501
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6507
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6513
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6517
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6523
		{
			yyVAL.str = ""
		}
	case 1026:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6530
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1027:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6536
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6551
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6568
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6585
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1031:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6589
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6595
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1033:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6599
		{
			yyVAL.str = "DEFINER = "
		}
	case 1034:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6603
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1035:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6608
		{
			yyVAL.str = ""
		}
	case 1036:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6612
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1042:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6626
		{
			yyVAL.str = ""
		}
	case 1045:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6634
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1046:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6640
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6645
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6651
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6664
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6669
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6674
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6680
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6687
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6694
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6701
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6708
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6716
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6722
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6729
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6736
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6744
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6750
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6759
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6776
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6792
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6811
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6817
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6826
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6844
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6850
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6857
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6865
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6871
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6879
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6885
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6893
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6899
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6908
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6912
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6917
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6921
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6928
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6933
		{
			yyVAL.str = ""
		}
	case 1084:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6937
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1085:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6943
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6956
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6967
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6971
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6977
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6989
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6996
		{
			yyVAL.str = ""
		}
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7000
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7005
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7009
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7015
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7023
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7031
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7039
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7047
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7052
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7064
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7075
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7184
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7188
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7194
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7207
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7211
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7217
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7230
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7234
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7238
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7243
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7247
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7253
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7260
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7266
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7275
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7282
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7293
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7297
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7303
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7312
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7316
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7320
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7325
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7329
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7333
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7337
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7343
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7374
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7378
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7404
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7410
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7422
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7428
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7434
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7440
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7446
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7454
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7458
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7464
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7478
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7492
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7496
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7500
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7504
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7508
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7512
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7516
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7522
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7537
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7541
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7552
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7556
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7561
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7565
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7571
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7575
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7581
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7590
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7599
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7605
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7609
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7615
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7626
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7632
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7650
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7668
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7686
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7702
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7706
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7715
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7727
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7736
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7748
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7758
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7768
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7779
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7789
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7800
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7808
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7819
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7826
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7836
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7849
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7857
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7866
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7875
		{
			yyVAL.str = ""
		}
	case 1193:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7879
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7885
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7889
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7894
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7898
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7905
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7917
		{
			yyVAL.str = ""
		}
	case 1200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7921
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1201:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7927
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7948
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7962
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7966
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7970
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7980
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7987
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7994
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8001
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8008
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8012
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8016
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8020
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8024
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8031
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8038
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8042
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8049
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8056
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8060
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8066
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8072
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8076
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8083
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8090
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8097
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8104
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8108
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8113
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8117
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8121
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8126
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8130
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8143
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8147
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8155
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8163
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8167
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8179
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8183
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8189
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8193
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8199
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8212
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8226
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8230
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8236
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8240
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8246
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8255
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8266
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8270
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8279
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8285
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8290
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8298
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8302
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8312
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8316
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8327
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8335
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8343
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8351
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8362
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8371
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8381
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8391
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8395
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8400
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8404
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8410
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8414
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8420
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8429
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8439
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8443
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8449
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8453
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8459
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8468
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8482
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8488
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8492
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8496
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8502
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8506
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8510
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8514
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8518
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8522
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8526
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8531
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8535
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8539
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8543
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8547
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8551
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8555
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8559
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8563
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8567
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8575
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8579
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8585
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8591
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8595
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8599
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8603
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8607
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8613
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8619
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8625
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8631
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8637
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8643
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8647
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8651
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8655
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8660
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8671
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8675
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8681
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8692
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8696
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8706
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8710
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8736
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8740
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8749
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8755
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8763
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8767
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8774
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8783
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8791
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8799
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8806
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8810
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8816
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8820
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8824
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8830
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8834
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8840
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8853
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8866
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8905
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8945
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8959
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8965
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8978
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8991
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9004
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9017
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9032
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9042
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9048
		{
			yyVAL.str = ""
		}
	case 1373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9052
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9062
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9068
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9074
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9095
		{
			yyVAL.str = ""
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9099
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1391:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9105
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9111
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9115
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9120
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9128
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9132
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9136
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9140
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9146
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9152
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9156
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9161
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9172
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9178
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9182
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9188
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9192
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9196
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9200
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9204
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9208
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9213
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9217
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9221
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9225
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9229
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9233
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9237
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9241
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9245
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9249
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9263
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9267
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9271
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9275
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9279
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9283
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9289
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9293
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9298
		{
			yyVAL.str = ""
		}
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9302
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9308
		{
			yyVAL.str = ""
		}
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9312
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1435:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9318
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9335
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9342
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9349
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9356
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9363
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9372
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9378
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9384
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9388
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9392
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9396
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9400
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9405
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9416
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9420
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9433
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9437
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9446
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9450
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9455
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9459
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9475
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9481
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9485
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9489
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9501
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9505
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9509
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9513
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9517
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9525
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9529
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9539
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9543
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9547
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9551
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9555
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9559
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9563
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9567
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9571
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9613
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9617
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9621
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9626
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9634
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9638
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9642
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9646
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9650
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9660
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9664
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9668
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9672
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9676
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9680
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9684
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9688
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9701
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1510:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9707
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9716
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9725
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9736
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9746
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9756
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9765
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9775
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9785
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9795
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9804
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9814
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9818
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9823
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9827
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9833
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9837
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9843
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9852
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1529:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9864
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9881
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9898
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9911
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9924
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9936
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9950
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9965
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9980
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9997
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10012
		{
		}
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10019
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10023
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10027
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10033
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10037
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10041
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10045
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10051
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10055
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10059
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10065
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10073
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10083
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10087
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10094
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10099
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10103
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10108
		{
			yyVAL.str = ","
		}
	case 1562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10112
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1563:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10117
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10121
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10126
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10133
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10159
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10171
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10183
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10194
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10205
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10216
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10226
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10236
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10247
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10258
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10269
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10280
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10291
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10302
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10313
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10324
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10335
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10346
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10357
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10368
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10379
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10390
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10401
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10425
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10434
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10443
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10452
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10461
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10472
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10500
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10509
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10518
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10527
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10539
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10550
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10563
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10575
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10598
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10634
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10647
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10660
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10672
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10681
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10689
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10697
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10710
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10719
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10730
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10741
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10750
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10762
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10772
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10782
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10791
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10802
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10811
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10821
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10830
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10839
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10849
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10853
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10863
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10882
		{
		}
	case 1677:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10884
		{
		}
	case 1712:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10926
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10938
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10942
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10946
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10952
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10957
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10961
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10967
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10971
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10977
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10981
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10988
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10992
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10996
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11005
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11009
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11013
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11018
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11022
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11028
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11032
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11036
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11040
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11044
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11048
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11052
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11056
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11060
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11064
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11072
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11076
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11080
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11084
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11088
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11092
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11096
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11100
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11104
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11108
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11114
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11118
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11124
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11128
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11135
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11139
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11143
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11149
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11153
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11157
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11161
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11165
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11169
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11173
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11179
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11183
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11187
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11191
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11197
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11210
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11215
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11221
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11225
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11238
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11243
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11247
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11251
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11255
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11259
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11266
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11270
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11274
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11278
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11285
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11296
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11301
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11307
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11319
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11331
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11343
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11356
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11369
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11382
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11395
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11408
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11421
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11434
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11447
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11460
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11473
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11488
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11515
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11557
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1809:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11593
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11629
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11658
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11678
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11698
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11718
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11734
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11747
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11760
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11773
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11786
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11798
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11810
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11822
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11834
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11846
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11870
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11882
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11894
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11906
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11919
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11932
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11958
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11973
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11981
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11990
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12000
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12023
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12028
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12034
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12041
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12045
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12050
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12054
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12060
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12066
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12073
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12080
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12089
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12096
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12103
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12112
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12116
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12120
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12126
		{
		}
	case 1858:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12128
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12138
		{
			yyVAL.str = ""
		}
	case 1863:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12142
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
