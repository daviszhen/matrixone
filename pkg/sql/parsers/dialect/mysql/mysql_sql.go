// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const CROSS_L2 = 57420
const LOWER_THAN_ON = 57421
const ON = 57422
const USING = 57423
const SUBQUERY_AS_EXPR = 57424
const LOWER_THAN_STRING = 57425
const ID = 57426
const AT_ID = 57427
const AT_AT_ID = 57428
const STRING = 57429
const VALUE_ARG = 57430
const LIST_ARG = 57431
const COMMENT = 57432
const COMMENT_KEYWORD = 57433
const QUOTE_ID = 57434
const STAGE = 57435
const CREDENTIALS = 57436
const STAGES = 57437
const SNAPSHOTS = 57438
const INTEGRAL = 57439
const HEX = 57440
const FLOAT = 57441
const HEXNUM = 57442
const BIT_LITERAL = 57443
const NULL = 57444
const TRUE = 57445
const FALSE = 57446
const LOWER_THAN_CHARSET = 57447
const CHARSET = 57448
const UNIQUE = 57449
const KEY = 57450
const OR = 57451
const PIPE_CONCAT = 57452
const XOR = 57453
const AND = 57454
const NOT = 57455
const BETWEEN = 57456
const CASE = 57457
const WHEN = 57458
const THEN = 57459
const ELSE = 57460
const END = 57461
const ELSEIF = 57462
const LOWER_THAN_EQ = 57463
const LE = 57464
const GE = 57465
const NE = 57466
const NULL_SAFE_EQUAL = 57467
const IS = 57468
const LIKE = 57469
const REGEXP = 57470
const IN = 57471
const ASSIGNMENT = 57472
const ILIKE = 57473
const SHIFT_LEFT = 57474
const SHIFT_RIGHT = 57475
const DIV = 57476
const MOD = 57477
const UNARY = 57478
const COLLATE = 57479
const BINARY = 57480
const UNDERSCORE_BINARY = 57481
const INTERVAL = 57482
const OUT = 57483
const INOUT = 57484
const BEGIN = 57485
const START = 57486
const TRANSACTION = 57487
const COMMIT = 57488
const ROLLBACK = 57489
const WORK = 57490
const CONSISTENT = 57491
const SNAPSHOT = 57492
const CHAIN = 57493
const NO = 57494
const RELEASE = 57495
const PRIORITY = 57496
const QUICK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const DECIMAL_VALUE = 57511
const TIME = 57512
const TIMESTAMP = 57513
const DATETIME = 57514
const YEAR = 57515
const CHAR = 57516
const VARCHAR = 57517
const BOOL = 57518
const CHARACTER = 57519
const VARBINARY = 57520
const NCHAR = 57521
const TEXT = 57522
const TINYTEXT = 57523
const MEDIUMTEXT = 57524
const LONGTEXT = 57525
const DATALINK = 57526
const BLOB = 57527
const TINYBLOB = 57528
const MEDIUMBLOB = 57529
const LONGBLOB = 57530
const JSON = 57531
const ENUM = 57532
const UUID = 57533
const VECF32 = 57534
const VECF64 = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const INT1 = 57544
const INT2 = 57545
const INT3 = 57546
const INT4 = 57547
const INT8 = 57548
const S3OPTION = 57549
const STAGEOPTION = 57550
const SQL_SMALL_RESULT = 57551
const SQL_BIG_RESULT = 57552
const SQL_BUFFER_RESULT = 57553
const LOW_PRIORITY = 57554
const HIGH_PRIORITY = 57555
const DELAYED = 57556
const CREATE = 57557
const ALTER = 57558
const DROP = 57559
const RENAME = 57560
const ANALYZE = 57561
const ADD = 57562
const RETURNS = 57563
const SCHEMA = 57564
const TABLE = 57565
const SEQUENCE = 57566
const INDEX = 57567
const VIEW = 57568
const TO = 57569
const IGNORE = 57570
const IF = 57571
const PRIMARY = 57572
const COLUMN = 57573
const CONSTRAINT = 57574
const SPATIAL = 57575
const FULLTEXT = 57576
const FOREIGN = 57577
const KEY_BLOCK_SIZE = 57578
const SHOW = 57579
const DESCRIBE = 57580
const EXPLAIN = 57581
const DATE = 57582
const ESCAPE = 57583
const REPAIR = 57584
const OPTIMIZE = 57585
const TRUNCATE = 57586
const MAXVALUE = 57587
const PARTITION = 57588
const REORGANIZE = 57589
const LESS = 57590
const THAN = 57591
const PROCEDURE = 57592
const TRIGGER = 57593
const STATUS = 57594
const VARIABLES = 57595
const ROLE = 57596
const PROXY = 57597
const AVG_ROW_LENGTH = 57598
const STORAGE = 57599
const DISK = 57600
const MEMORY = 57601
const CHECKSUM = 57602
const COMPRESSION = 57603
const DATA = 57604
const DIRECTORY = 57605
const DELAY_KEY_WRITE = 57606
const ENCRYPTION = 57607
const ENGINE = 57608
const MAX_ROWS = 57609
const MIN_ROWS = 57610
const PACK_KEYS = 57611
const ROW_FORMAT = 57612
const STATS_AUTO_RECALC = 57613
const STATS_PERSISTENT = 57614
const STATS_SAMPLE_PAGES = 57615
const DYNAMIC = 57616
const COMPRESSED = 57617
const REDUNDANT = 57618
const COMPACT = 57619
const FIXED = 57620
const COLUMN_FORMAT = 57621
const AUTO_RANDOM = 57622
const ENGINE_ATTRIBUTE = 57623
const SECONDARY_ENGINE_ATTRIBUTE = 57624
const INSERT_METHOD = 57625
const RESTRICT = 57626
const CASCADE = 57627
const ACTION = 57628
const PARTIAL = 57629
const SIMPLE = 57630
const CHECK = 57631
const ENFORCED = 57632
const RANGE = 57633
const LIST = 57634
const ALGORITHM = 57635
const LINEAR = 57636
const PARTITIONS = 57637
const SUBPARTITION = 57638
const SUBPARTITIONS = 57639
const CLUSTER = 57640
const TYPE = 57641
const ANY = 57642
const SOME = 57643
const EXTERNAL = 57644
const LOCALFILE = 57645
const URL = 57646
const PREPARE = 57647
const DEALLOCATE = 57648
const RESET = 57649
const EXTENSION = 57650
const RETENTION = 57651
const PERIOD = 57652
const INCREMENT = 57653
const CYCLE = 57654
const MINVALUE = 57655
const PUBLICATION = 57656
const SUBSCRIPTIONS = 57657
const PUBLICATIONS = 57658
const PROPERTIES = 57659
const PARSER = 57660
const VISIBLE = 57661
const INVISIBLE = 57662
const BTREE = 57663
const HASH = 57664
const RTREE = 57665
const BSI = 57666
const IVFFLAT = 57667
const MASTER = 57668
const ZONEMAP = 57669
const LEADING = 57670
const BOTH = 57671
const TRAILING = 57672
const UNKNOWN = 57673
const LISTS = 57674
const OP_TYPE = 57675
const REINDEX = 57676
const EXPIRE = 57677
const ACCOUNT = 57678
const ACCOUNTS = 57679
const UNLOCK = 57680
const DAY = 57681
const NEVER = 57682
const PUMP = 57683
const MYSQL_COMPATIBILITY_MODE = 57684
const UNIQUE_CHECK_ON_AUTOINCR = 57685
const MODIFY = 57686
const CHANGE = 57687
const SECOND = 57688
const ASCII = 57689
const COALESCE = 57690
const COLLATION = 57691
const HOUR = 57692
const MICROSECOND = 57693
const MINUTE = 57694
const MONTH = 57695
const QUARTER = 57696
const REPEAT = 57697
const REVERSE = 57698
const ROW_COUNT = 57699
const WEEK = 57700
const REVOKE = 57701
const FUNCTION = 57702
const PRIVILEGES = 57703
const TABLESPACE = 57704
const EXECUTE = 57705
const SUPER = 57706
const GRANT = 57707
const OPTION = 57708
const REFERENCES = 57709
const REPLICATION = 57710
const SLAVE = 57711
const CLIENT = 57712
const USAGE = 57713
const RELOAD = 57714
const FILE = 57715
const TEMPORARY = 57716
const ROUTINE = 57717
const EVENT = 57718
const SHUTDOWN = 57719
const NULLX = 57720
const AUTO_INCREMENT = 57721
const APPROXNUM = 57722
const SIGNED = 57723
const UNSIGNED = 57724
const ZEROFILL = 57725
const ENGINES = 57726
const LOW_CARDINALITY = 57727
const AUTOEXTEND_SIZE = 57728
const ADMIN_NAME = 57729
const RANDOM = 57730
const SUSPEND = 57731
const ATTRIBUTE = 57732
const HISTORY = 57733
const REUSE = 57734
const CURRENT = 57735
const OPTIONAL = 57736
const FAILED_LOGIN_ATTEMPTS = 57737
const PASSWORD_LOCK_TIME = 57738
const UNBOUNDED = 57739
const SECONDARY = 57740
const RESTRICTED = 57741
const USER = 57742
const IDENTIFIED = 57743
const CIPHER = 57744
const ISSUER = 57745
const X509 = 57746
const SUBJECT = 57747
const SAN = 57748
const REQUIRE = 57749
const SSL = 57750
const NONE = 57751
const PASSWORD = 57752
const SHARED = 57753
const EXCLUSIVE = 57754
const MAX_QUERIES_PER_HOUR = 57755
const MAX_UPDATES_PER_HOUR = 57756
const MAX_CONNECTIONS_PER_HOUR = 57757
const MAX_USER_CONNECTIONS = 57758
const FORMAT = 57759
const VERBOSE = 57760
const CONNECTION = 57761
const TRIGGERS = 57762
const PROFILES = 57763
const LOAD = 57764
const INLINE = 57765
const INFILE = 57766
const TERMINATED = 57767
const OPTIONALLY = 57768
const ENCLOSED = 57769
const ESCAPED = 57770
const STARTING = 57771
const LINES = 57772
const ROWS = 57773
const IMPORT = 57774
const DISCARD = 57775
const JSONTYPE = 57776
const MODUMP = 57777
const OVER = 57778
const PRECEDING = 57779
const FOLLOWING = 57780
const GROUPS = 57781
const DATABASES = 57782
const TABLES = 57783
const SEQUENCES = 57784
const EXTENDED = 57785
const FULL = 57786
const PROCESSLIST = 57787
const FIELDS = 57788
const COLUMNS = 57789
const OPEN = 57790
const ERRORS = 57791
const WARNINGS = 57792
const INDEXES = 57793
const SCHEMAS = 57794
const NODE = 57795
const LOCKS = 57796
const ROLES = 57797
const TABLE_NUMBER = 57798
const COLUMN_NUMBER = 57799
const TABLE_VALUES = 57800
const TABLE_SIZE = 57801
const NAMES = 57802
const GLOBAL = 57803
const PERSIST = 57804
const SESSION = 57805
const ISOLATION = 57806
const LEVEL = 57807
const READ = 57808
const WRITE = 57809
const ONLY = 57810
const REPEATABLE = 57811
const COMMITTED = 57812
const UNCOMMITTED = 57813
const SERIALIZABLE = 57814
const LOCAL = 57815
const EVENTS = 57816
const PLUGINS = 57817
const CURRENT_TIMESTAMP = 57818
const DATABASE = 57819
const CURRENT_TIME = 57820
const LOCALTIME = 57821
const LOCALTIMESTAMP = 57822
const UTC_DATE = 57823
const UTC_TIME = 57824
const UTC_TIMESTAMP = 57825
const REPLACE = 57826
const CONVERT = 57827
const SEPARATOR = 57828
const TIMESTAMPDIFF = 57829
const CURRENT_DATE = 57830
const CURRENT_USER = 57831
const CURRENT_ROLE = 57832
const SECOND_MICROSECOND = 57833
const MINUTE_MICROSECOND = 57834
const MINUTE_SECOND = 57835
const HOUR_MICROSECOND = 57836
const HOUR_SECOND = 57837
const HOUR_MINUTE = 57838
const DAY_MICROSECOND = 57839
const DAY_SECOND = 57840
const DAY_MINUTE = 57841
const DAY_HOUR = 57842
const YEAR_MONTH = 57843
const SQL_TSI_HOUR = 57844
const SQL_TSI_DAY = 57845
const SQL_TSI_WEEK = 57846
const SQL_TSI_MONTH = 57847
const SQL_TSI_QUARTER = 57848
const SQL_TSI_YEAR = 57849
const SQL_TSI_SECOND = 57850
const SQL_TSI_MINUTE = 57851
const RECURSIVE = 57852
const CONFIG = 57853
const DRAINER = 57854
const SOURCE = 57855
const STREAM = 57856
const HEADERS = 57857
const CONNECTOR = 57858
const CONNECTORS = 57859
const DAEMON = 57860
const PAUSE = 57861
const CANCEL = 57862
const TASK = 57863
const RESUME = 57864
const MATCH = 57865
const AGAINST = 57866
const BOOLEAN = 57867
const LANGUAGE = 57868
const WITH = 57869
const QUERY = 57870
const EXPANSION = 57871
const WITHOUT = 57872
const VALIDATION = 57873
const UPGRADE = 57874
const RETRY = 57875
const ADDDATE = 57876
const BIT_AND = 57877
const BIT_OR = 57878
const BIT_XOR = 57879
const CAST = 57880
const COUNT = 57881
const APPROX_COUNT = 57882
const APPROX_COUNT_DISTINCT = 57883
const SERIAL_EXTRACT = 57884
const APPROX_PERCENTILE = 57885
const CURDATE = 57886
const CURTIME = 57887
const DATE_ADD = 57888
const DATE_SUB = 57889
const EXTRACT = 57890
const GROUP_CONCAT = 57891
const MAX = 57892
const MID = 57893
const MIN = 57894
const NOW = 57895
const POSITION = 57896
const SESSION_USER = 57897
const STD = 57898
const STDDEV = 57899
const MEDIAN = 57900
const CLUSTER_CENTERS = 57901
const KMEANS = 57902
const STDDEV_POP = 57903
const STDDEV_SAMP = 57904
const SUBDATE = 57905
const SUBSTR = 57906
const SUBSTRING = 57907
const SUM = 57908
const SYSDATE = 57909
const SYSTEM_USER = 57910
const TRANSLATE = 57911
const TRIM = 57912
const VARIANCE = 57913
const VAR_POP = 57914
const VAR_SAMP = 57915
const AVG = 57916
const RANK = 57917
const ROW_NUMBER = 57918
const DENSE_RANK = 57919
const BIT_CAST = 57920
const BITMAP_BIT_POSITION = 57921
const BITMAP_BUCKET_NUMBER = 57922
const BITMAP_COUNT = 57923
const BITMAP_CONSTRUCT_AGG = 57924
const BITMAP_OR_AGG = 57925
const NEXTVAL = 57926
const SETVAL = 57927
const CURRVAL = 57928
const LASTVAL = 57929
const ARROW = 57930
const ROW = 57931
const OUTFILE = 57932
const HEADER = 57933
const MAX_FILE_SIZE = 57934
const FORCE_QUOTE = 57935
const PARALLEL = 57936
const STRICT = 57937
const UNUSED = 57938
const BINDINGS = 57939
const DO = 57940
const DECLARE = 57941
const LOOP = 57942
const WHILE = 57943
const LEAVE = 57944
const ITERATE = 57945
const UNTIL = 57946
const CALL = 57947
const PREV = 57948
const SLIDING = 57949
const FILL = 57950
const SPBEGIN = 57951
const BACKEND = 57952
const SERVERS = 57953
const HANDLER = 57954
const PERCENT = 57955
const SAMPLE = 57956
const MO_TS = 57957
const PITR = 57958
const CDC = 57959
const KILL = 57960
const BACKUP = 57961
const FILESYSTEM = 57962
const PARALLELISM = 57963
const RESTORE = 57964
const QUERY_RESULT = 57965

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CROSS_L2",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"CDC",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12454

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 133,
	11, 776,
	22, 776,
	-2, 769,
	-1, 156,
	240, 1185,
	242, 1084,
	-2, 1131,
	-1, 183,
	43, 599,
	242, 599,
	269, 606,
	270, 606,
	468, 599,
	-2, 634,
	-1, 223,
	644, 1944,
	-2, 509,
	-1, 525,
	644, 2064,
	-2, 394,
	-1, 583,
	644, 2123,
	-2, 392,
	-1, 584,
	644, 2124,
	-2, 393,
	-1, 585,
	644, 2125,
	-2, 395,
	-1, 718,
	321, 178,
	440, 178,
	441, 178,
	-2, 1849,
	-1, 784,
	83, 1635,
	-2, 2000,
	-1, 785,
	83, 1653,
	-2, 1971,
	-1, 789,
	83, 1654,
	-2, 1999,
	-1, 822,
	83, 1562,
	-2, 2197,
	-1, 823,
	83, 1563,
	-2, 2196,
	-1, 824,
	83, 1564,
	-2, 2186,
	-1, 825,
	83, 2158,
	-2, 2179,
	-1, 826,
	83, 2159,
	-2, 2180,
	-1, 827,
	83, 2160,
	-2, 2188,
	-1, 828,
	83, 2161,
	-2, 2168,
	-1, 829,
	83, 2162,
	-2, 2177,
	-1, 830,
	83, 2163,
	-2, 2189,
	-1, 831,
	83, 2164,
	-2, 2190,
	-1, 832,
	83, 2165,
	-2, 2195,
	-1, 833,
	83, 2166,
	-2, 2200,
	-1, 834,
	83, 2167,
	-2, 2201,
	-1, 835,
	83, 1631,
	-2, 2038,
	-1, 836,
	83, 1632,
	-2, 1833,
	-1, 837,
	83, 1633,
	-2, 2047,
	-1, 838,
	83, 1634,
	-2, 1842,
	-1, 840,
	83, 1637,
	-2, 1850,
	-1, 841,
	83, 1638,
	-2, 2071,
	-1, 843,
	83, 1641,
	-2, 1869,
	-1, 845,
	83, 1643,
	-2, 2083,
	-1, 846,
	83, 1644,
	-2, 2082,
	-1, 847,
	83, 1645,
	-2, 1913,
	-1, 848,
	83, 1646,
	-2, 1995,
	-1, 851,
	83, 1649,
	-2, 2094,
	-1, 853,
	83, 1651,
	-2, 2097,
	-1, 854,
	83, 1652,
	-2, 2099,
	-1, 855,
	83, 1655,
	-2, 2107,
	-1, 856,
	83, 1656,
	-2, 1980,
	-1, 857,
	83, 1657,
	-2, 2025,
	-1, 858,
	83, 1658,
	-2, 1990,
	-1, 859,
	83, 1659,
	-2, 2015,
	-1, 870,
	83, 1540,
	-2, 2191,
	-1, 871,
	83, 1541,
	-2, 2192,
	-1, 872,
	83, 1542,
	-2, 2193,
	-1, 971,
	463, 634,
	464, 634,
	-2, 600,
	-1, 1021,
	125, 1833,
	136, 1833,
	156, 1833,
	-2, 1807,
	-1, 1138,
	22, 803,
	-2, 752,
	-1, 1244,
	11, 776,
	22, 776,
	-2, 1420,
	-1, 1326,
	22, 803,
	-2, 752,
	-1, 1672,
	83, 1706,
	-2, 1997,
	-1, 1673,
	83, 1707,
	-2, 1998,
	-1, 1840,
	84, 956,
	-2, 962,
	-1, 2283,
	108, 1123,
	152, 1123,
	191, 1123,
	194, 1123,
	282, 1123,
	-2, 1116,
	-1, 2438,
	11, 776,
	22, 776,
	-2, 897,
	-1, 2471,
	84, 1793,
	157, 1793,
	-2, 1982,
	-1, 2472,
	84, 1793,
	157, 1793,
	-2, 1981,
	-1, 2473,
	84, 1769,
	157, 1769,
	-2, 1968,
	-1, 2474,
	84, 1770,
	157, 1770,
	-2, 1973,
	-1, 2475,
	84, 1771,
	157, 1771,
	-2, 1901,
	-1, 2476,
	84, 1772,
	157, 1772,
	-2, 1895,
	-1, 2477,
	84, 1773,
	157, 1773,
	-2, 1823,
	-1, 2478,
	84, 1774,
	157, 1774,
	-2, 1970,
	-1, 2479,
	84, 1775,
	157, 1775,
	-2, 1899,
	-1, 2480,
	84, 1776,
	157, 1776,
	-2, 1894,
	-1, 2481,
	84, 1777,
	157, 1777,
	-2, 1883,
	-1, 2482,
	84, 1793,
	157, 1793,
	-2, 1884,
	-1, 2483,
	84, 1793,
	157, 1793,
	-2, 1885,
	-1, 2485,
	84, 1782,
	157, 1782,
	-2, 2015,
	-1, 2486,
	84, 1759,
	157, 1759,
	-2, 2000,
	-1, 2487,
	84, 1791,
	157, 1791,
	-2, 1971,
	-1, 2488,
	84, 1791,
	157, 1791,
	-2, 1999,
	-1, 2489,
	84, 1791,
	157, 1791,
	-2, 1851,
	-1, 2490,
	84, 1789,
	157, 1789,
	-2, 1990,
	-1, 2491,
	84, 1786,
	157, 1786,
	-2, 1874,
	-1, 2492,
	83, 1740,
	84, 1740,
	157, 1740,
	398, 1740,
	399, 1740,
	400, 1740,
	-2, 1822,
	-1, 2493,
	83, 1741,
	84, 1741,
	157, 1741,
	398, 1741,
	399, 1741,
	400, 1741,
	-2, 1824,
	-1, 2494,
	83, 1742,
	84, 1742,
	157, 1742,
	398, 1742,
	399, 1742,
	400, 1742,
	-2, 2043,
	-1, 2495,
	83, 1744,
	84, 1744,
	157, 1744,
	398, 1744,
	399, 1744,
	400, 1744,
	-2, 1972,
	-1, 2496,
	83, 1746,
	84, 1746,
	157, 1746,
	398, 1746,
	399, 1746,
	400, 1746,
	-2, 1953,
	-1, 2497,
	83, 1748,
	84, 1748,
	157, 1748,
	398, 1748,
	399, 1748,
	400, 1748,
	-2, 1900,
	-1, 2498,
	83, 1750,
	84, 1750,
	157, 1750,
	398, 1750,
	399, 1750,
	400, 1750,
	-2, 1879,
	-1, 2499,
	83, 1751,
	84, 1751,
	157, 1751,
	398, 1751,
	399, 1751,
	400, 1751,
	-2, 1880,
	-1, 2500,
	83, 1753,
	84, 1753,
	157, 1753,
	398, 1753,
	399, 1753,
	400, 1753,
	-2, 1821,
	-1, 2501,
	84, 1796,
	157, 1796,
	398, 1796,
	399, 1796,
	400, 1796,
	-2, 1856,
	-1, 2502,
	84, 1796,
	157, 1796,
	398, 1796,
	399, 1796,
	400, 1796,
	-2, 1870,
	-1, 2503,
	84, 1799,
	157, 1799,
	398, 1799,
	399, 1799,
	400, 1799,
	-2, 1852,
	-1, 2504,
	84, 1799,
	157, 1799,
	398, 1799,
	399, 1799,
	400, 1799,
	-2, 1916,
	-1, 2505,
	84, 1796,
	157, 1796,
	398, 1796,
	399, 1796,
	400, 1796,
	-2, 1937,
	-1, 2717,
	108, 1123,
	152, 1123,
	191, 1123,
	194, 1123,
	282, 1123,
	-2, 1117,
	-1, 2735,
	81, 696,
	157, 696,
	-2, 1301,
	-1, 3149,
	194, 1123,
	306, 1388,
	-2, 1360,
	-1, 3328,
	108, 1123,
	152, 1123,
	191, 1123,
	194, 1123,
	-2, 1241,
	-1, 3330,
	108, 1123,
	152, 1123,
	191, 1123,
	194, 1123,
	-2, 1241,
	-1, 3342,
	81, 696,
	157, 696,
	-2, 1301,
	-1, 3363,
	194, 1123,
	306, 1388,
	-2, 1361,
	-1, 3513,
	108, 1123,
	152, 1123,
	191, 1123,
	194, 1123,
	-2, 1242,
	-1, 3541,
	84, 1203,
	157, 1203,
	-2, 1123,
	-1, 3680,
	84, 1203,
	157, 1203,
	-2, 1123,
	-1, 3839,
	84, 1207,
	157, 1207,
	-2, 1123,
	-1, 3887,
	84, 1208,
	157, 1208,
	-2, 1123,
}

const yyPrivate = 57344

const yyLast = 51335

var yyAct = [...]int{
	751, 728, 3933, 753, 3907, 2765, 212, 3926, 3843, 1925,
	1652, 3849, 3348, 3741, 3444, 3842, 2363, 3850, 3680, 3135,
	3767, 3798, 737, 3720, 3240, 3658, 3377, 3168, 3569, 1648,
	730, 2560, 2759, 3625, 3714, 1279, 3241, 3501, 1488, 3500,
	3745, 3679, 3498, 1423, 781, 3597, 619, 2762, 3448, 1139,
	2677, 3310, 1020, 3649, 1565, 3721, 3723, 2768, 3439, 3144,
	637, 1429, 643, 643, 2330, 1873, 3315, 3522, 643, 660,
	669, 2738, 1699, 669, 65, 726, 3364, 3510, 3106, 1655,
	3480, 3331, 3092, 3066, 3238, 2874, 197, 2019, 1713, 2875,
	2788, 3515, 2032, 3095, 1133, 2873, 3164, 3300, 3333, 3146,
	3153, 37, 1983, 2854, 2432, 2016, 2055, 2870, 3280, 2595,
	2130, 2937, 3226, 2897, 2467, 3206, 2333, 2706, 1577, 677,
	3077, 3073, 1359, 3071, 3069, 2469, 3115, 2088, 1885, 1481,
	720, 2718, 2294, 3068, 3067, 681, 3064, 2239, 725, 2262,
	3152, 2238, 1129, 2984, 132, 3041, 2910, 2113, 1561, 1805,
	2126, 36, 2539, 2089, 2521, 2096, 2097, 2920, 2061, 944,
	2012, 1554, 1566, 1986, 1569, 2125, 1984, 2433, 2420, 2695,
	666, 1392, 2690, 2415, 1014, 2770, 2790, 2331, 2730, 1915,
	208, 8, 207, 7, 6, 2465, 1849, 2293, 619, 1077,
	1528, 1646, 1466, 2127, 1497, 2283, 2326, 2137, 2274, 1884,
	636, 719, 1597, 2628, 1706, 1152, 1432, 1651, 1686, 2160,
	1637, 729, 212, 738, 212, 2095, 1068, 1069, 2092, 1580,
	618, 27, 2077, 643, 1535, 2051, 674, 1645, 727, 1013,
	16, 1465, 2416, 1845, 1848, 1433, 980, 652, 943, 2440,
	108, 1412, 1519, 14, 874, 1408, 15, 1463, 1714, 721,
	1395, 684, 683, 24, 17, 10, 33, 198, 655, 23,
	1424, 1527, 920, 2627, 1348, 190, 1029, 194, 876, 1280,
	941, 926, 1324, 680, 3732, 3643, 668, 2663, 966, 2134,
	877, 2663, 1047, 1212, 1213, 1214, 1211, 2663, 1576, 2442,
	665, 1065, 3345, 934, 3122, 935, 2954, 2953, 1064, 661,
	1066, 2144, 1212, 1213, 1214, 1211, 1212, 1213, 1214, 1211,
	1134, 3473, 663, 3318, 1135, 664, 2583, 2524, 1818, 1542,
	3233, 1061, 2527, 2525, 1538, 662, 2522, 1060, 639, 1000,
	196, 648, 915, 638, 1343, 2237, 1026, 1061, 896, 1061,
	894, 2243, 3051, 1028, 721, 1819, 929, 1589, 925, 672,
	2247, 1346, 3034, 3031, 1048, 3036, 3033, 3918, 1446, 2655,
	2653, 1812, 1134, 1339, 1540, 3437, 2933, 2931, 1588, 1212,
	1213, 1214, 1211, 1212, 1213, 1214, 1211, 8, 2066, 7,
	3709, 1059, 3604, 3598, 3440, 3239, 2110, 3725, 1274, 2091,
	875, 644, 3011, 195, 61, 186, 157, 2083, 2371, 1174,
	3824, 2657, 195, 886, 906, 3485, 2284, 2569, 2131, 2577,
	195, 61, 186, 157, 3481, 195, 3665, 3332, 2285, 195,
	61, 186, 157, 1575, 2724, 1354, 1042, 1037, 1032, 1036,
	1040, 3630, 3778, 1349, 1505, 1353, 1352, 895, 1351, 893,
	1367, 896, 894, 195, 61, 186, 157, 1030, 3009, 195,
	61, 186, 157, 195, 1045, 1384, 679, 1606, 1035, 1024,
	3666, 2679, 2142, 191, 2868, 1821, 195, 61, 186, 157,
	1991, 1025, 2722, 195, 995, 993, 931, 994, 924, 1748,
	191, 2278, 3632, 1147, 187, 191, 1355, 928, 927, 191,
	891, 178, 2459, 195, 1209, 188, 195, 195, 2460, 2680,
	195, 131, 2903, 1442, 909, 1995, 1443, 1150, 916, 1043,
	2029, 1584, 887, 191, 131, 1595, 2904, 2905, 1046, 191,
	1420, 2956, 2725, 191, 2446, 1618, 2540, 2445, 923, 118,
	2447, 989, 642, 642, 3035, 3032, 191, 1467, 650, 1469,
	1033, 1581, 1899, 191, 2945, 1592, 1638, 933, 131, 1642,
	1654, 865, 922, 864, 866, 867, 921, 868, 869, 1207,
	3821, 2692, 908, 1583, 1044, 1001, 191, 1594, 914, 1189,
	191, 2693, 1190, 1641, 1366, 1996, 1997, 1830, 1831, 1428,
	1023, 3461, 2226, 1427, 1430, 1431, 1022, 997, 1430, 1431,
	912, 3853, 3854, 3728, 1445, 3727, 3139, 3726, 3137, 3874,
	1192, 3817, 1182, 1202, 1034, 1184, 3728, 3811, 2658, 1541,
	1539, 3727, 3810, 139, 140, 3712, 141, 142, 3726, 3809,
	2691, 3803, 3911, 3912, 3715, 3716, 3717, 3718, 932, 3800,
	3242, 2938, 1658, 1185, 3800, 2939, 3301, 2940, 3601, 2003,
	2681, 643, 643, 3826, 3827, 2564, 3242, 1144, 2146, 2013,
	3738, 999, 643, 1143, 913, 2809, 3822, 3823, 3255, 1643,
	1155, 1633, 2138, 3308, 3490, 2406, 3088, 2974, 156, 1627,
	193, 669, 669, 2273, 643, 2074, 1155, 3078, 2007, 3634,
	3635, 1041, 1187, 1640, 2682, 156, 184, 193, 185, 116,
	183, 1548, 1547, 650, 932, 2698, 1205, 1206, 3389, 3086,
	182, 3819, 2972, 1194, 1204, 2574, 1195, 183, 177, 176,
	1142, 2369, 1177, 3438, 67, 1178, 2932, 1038, 2143, 1418,
	1039, 3460, 2860, 2656, 2409, 2410, 2408, 1368, 998, 3462,
	3639, 930, 715, 1029, 1197, 717, 2675, 1252, 1456, 3487,
	716, 1180, 2462, 1071, 3093, 3812, 1188, 1342, 3852, 3622,
	3167, 1657, 1656, 1183, 1186, 3083, 3084, 1444, 666, 666,
	3731, 3642, 3284, 3258, 2027, 2028, 3616, 2978, 3617, 2414,
	919, 3085, 2121, 2662, 2676, 179, 180, 181, 1135, 1179,
	1135, 3082, 1199, 1143, 3611, 2349, 2132, 1136, 889, 3141,
	635, 2329, 2352, 3404, 2132, 2132, 1135, 3882, 3401, 3104,
	1639, 3165, 3166, 1026, 3116, 3670, 1029, 2244, 189, 2731,
	1028, 1820, 1590, 1283, 1169, 2955, 1193, 1200, 1201, 667,
	1049, 1031, 3619, 1191, 3760, 1399, 890, 3755, 3662, 127,
	2856, 2401, 671, 182, 2952, 128, 667, 2133, 2165, 1061,
	1284, 1061, 1061, 1061, 1061, 667, 1061, 670, 1135, 2351,
	1246, 3825, 2866, 3618, 2145, 1198, 1181, 3094, 1157, 1156,
	2280, 3664, 2149, 2151, 2152, 1149, 3394, 996, 3042, 667,
	907, 905, 3746, 2523, 1157, 1156, 1026, 1543, 665, 665,
	1196, 62, 3762, 1028, 3349, 3768, 3136, 661, 661, 2258,
	2764, 1345, 129, 1347, 2350, 3080, 2760, 2761, 62, 2764,
	663, 663, 3356, 664, 664, 60, 1407, 62, 3170, 1364,
	637, 875, 3633, 662, 662, 1146, 1148, 1137, 3293, 1158,
	2654, 3629, 1138, 1322, 158, 3291, 1327, 1166, 3486, 1025,
	3055, 62, 2578, 158, 2404, 2336, 1734, 3405, 3094, 1350,
	3737, 158, 1822, 944, 3560, 1419, 158, 1162, 1163, 934,
	158, 935, 1168, 1253, 62, 1664, 1667, 1668, 3944, 2462,
	2381, 1248, 1249, 1250, 1251, 3671, 1665, 892, 2380, 1131,
	3451, 1160, 1628, 192, 158, 1629, 1430, 1431, 1430, 1431,
	158, 3089, 3929, 2975, 158, 3549, 3292, 2014, 3663, 137,
	192, 3079, 138, 2402, 2403, 3636, 643, 158, 3555, 1458,
	2704, 1477, 58, 643, 158, 1476, 619, 619, 2697, 1426,
	1422, 1421, 990, 1167, 1405, 3818, 619, 619, 3142, 1404,
	1492, 1492, 1403, 643, 158, 3769, 3650, 158, 158, 1361,
	1362, 158, 3145, 2004, 3491, 1371, 1372, 1373, 1374, 1375,
	2810, 1377, 2811, 2812, 669, 1520, 637, 1383, 3684, 1490,
	1490, 1531, 1531, 1130, 3030, 1634, 3102, 3841, 2372, 1494,
	3334, 1243, 212, 1295, 1296, 2701, 2702, 2346, 130, 45,
	2329, 619, 2006, 2335, 1499, 59, 3435, 3612, 2337, 5,
	2700, 3613, 2838, 1360, 3616, 3245, 3617, 679, 134, 135,
	2899, 2901, 136, 3165, 3166, 992, 3730, 3081, 991, 3797,
	3169, 1464, 1730, 2915, 2916, 1174, 2150, 3470, 3161, 1727,
	1365, 642, 1132, 1729, 1726, 1728, 1732, 1733, 3046, 2570,
	3930, 1731, 1141, 1573, 2451, 2367, 2135, 1457, 1578, 2002,
	1981, 1549, 2338, 1376, 2668, 1587, 1369, 3197, 1824, 2977,
	3619, 1382, 1381, 1380, 1165, 1328, 2339, 1486, 1487, 1326,
	3570, 3571, 3572, 3576, 3574, 3575, 3573, 1379, 1002, 673,
	1616, 2710, 2713, 2714, 2715, 2711, 2712, 2161, 3294, 2147,
	2148, 3618, 3562, 2257, 1492, 2807, 1492, 1143, 3683, 3162,
	1471, 1473, 3281, 1370, 2986, 2985, 3103, 1596, 1389, 2672,
	1484, 1485, 1173, 1409, 1413, 1413, 1413, 2251, 1398, 1666,
	990, 1414, 1415, 933, 1029, 1406, 938, 939, 940, 1358,
	1394, 1029, 1416, 1391, 1833, 2829, 2830, 1834, 1409, 1409,
	1435, 1436, 3471, 1438, 1439, 936, 1440, 3048, 1447, 1448,
	2250, 1582, 3556, 3557, 1653, 3551, 3840, 1832, 1593, 3550,
	1552, 897, 1555, 1556, 1492, 1544, 1521, 1434, 1563, 1564,
	1437, 666, 3927, 3928, 1557, 1558, 2393, 1611, 1612, 2900,
	1475, 1712, 898, 1626, 3523, 1737, 1738, 1739, 1740, 1741,
	1742, 1735, 1736, 1700, 1586, 1761, 2345, 3940, 2340, 3935,
	2343, 1568, 3945, 992, 1572, 1571, 991, 901, 2253, 2252,
	2336, 2339, 2174, 1500, 3121, 648, 1506, 1356, 1357, 1140,
	1512, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1532, 2736, 3246, 3807, 1697, 1698, 1533,
	1518, 2265, 1212, 1213, 1214, 1211, 1650, 1052, 1057, 1058,
	3952, 1400, 2839, 2841, 2842, 2843, 2840, 1210, 900, 2828,
	3203, 1143, 903, 902, 2266, 2267, 3924, 1823, 2309, 1615,
	2140, 1826, 3936, 1828, 2462, 1746, 1669, 2669, 1614, 2430,
	1835, 1825, 1837, 1838, 3199, 1770, 1803, 1520, 2173, 3889,
	2737, 665, 1846, 1492, 1851, 1852, 1631, 1854, 1458, 643,
	661, 1647, 3163, 1624, 643, 3861, 3855, 1492, 1751, 1752,
	1753, 944, 1621, 663, 1874, 3612, 664, 990, 1814, 3722,
	1599, 1767, 1625, 1492, 1768, 1620, 662, 1604, 1605, 1458,
	1607, 3837, 1003, 1806, 660, 1623, 1622, 1619, 1400, 3890,
	1174, 1781, 1782, 2340, 2195, 1644, 1649, 2194, 2335, 2329,
	2334, 1760, 2332, 2337, 1898, 2054, 1212, 1213, 1214, 1211,
	1802, 2366, 3890, 1905, 1905, 1210, 1458, 3788, 1458, 1458,
	2276, 1688, 643, 643, 2737, 1972, 1846, 1976, 3862, 3646,
	1492, 1979, 1980, 3763, 1993, 1636, 1453, 2542, 1695, 1696,
	2431, 766, 133, 1462, 3751, 3703, 3702, 133, 3697, 619,
	992, 1492, 2308, 991, 3838, 2431, 722, 2338, 1635, 3696,
	1842, 1843, 1844, 1498, 879, 880, 881, 882, 3695, 1902,
	1210, 3297, 1857, 1858, 1859, 1860, 1855, 3257, 643, 1846,
	1492, 1853, 2037, 1171, 643, 643, 643, 677, 677, 2231,
	3646, 1054, 1055, 1056, 2047, 2048, 2049, 2050, 1140, 1809,
	2569, 2056, 1212, 1213, 1214, 1211, 2140, 649, 212, 3694,
	133, 212, 212, 2030, 212, 1927, 1775, 3752, 3704, 2298,
	3674, 3646, 1974, 1743, 1744, 3174, 1747, 3203, 1212, 1213,
	1214, 1211, 3646, 3172, 1762, 1172, 2275, 1907, 1804, 3673,
	3040, 3646, 1503, 3038, 1908, 2052, 2431, 1769, 3007, 1771,
	1850, 1772, 1773, 1774, 1761, 1761, 2099, 3645, 1810, 3410,
	1172, 3358, 2022, 2023, 1866, 1761, 1761, 3324, 2918, 2684,
	2659, 1999, 2115, 2001, 2171, 1174, 2039, 2040, 2041, 1841,
	1879, 3273, 3646, 2008, 2020, 2021, 2559, 3269, 3182, 1886,
	2894, 1888, 1889, 2140, 2065, 1876, 1877, 2068, 2069, 1871,
	2071, 2015, 2634, 1874, 2626, 1895, 1870, 1492, 2129, 1409,
	2109, 2585, 2140, 884, 2547, 2567, 2036, 1909, 1910, 1881,
	2131, 1887, 1994, 1413, 2322, 1882, 1883, 2555, 1029, 1891,
	3646, 1029, 2462, 1027, 3359, 1413, 2236, 1850, 133, 1029,
	3325, 1896, 1892, 1893, 1323, 1904, 1906, 2549, 879, 880,
	881, 882, 2101, 133, 3274, 133, 2230, 2544, 1582, 1973,
	3270, 3183, 1903, 2431, 1978, 2603, 1062, 1063, 2123, 2536,
	2534, 1067, 1998, 1982, 2000, 1210, 2229, 1210, 2009, 2532,
	666, 2202, 2122, 2025, 1210, 1390, 1703, 1647, 2298, 1478,
	2105, 3937, 3345, 1121, 1117, 1118, 1119, 1120, 1026, 2608,
	2545, 2607, 2606, 2604, 2530, 1028, 2297, 2035, 2922, 1026,
	2094, 2232, 2034, 2042, 2043, 2209, 1028, 2336, 2339, 2208,
	2550, 2094, 2193, 2739, 2572, 2184, 2571, 2563, 2060, 2062,
	2545, 2316, 2183, 2182, 1029, 2139, 2190, 2175, 2120, 2158,
	2159, 3586, 2537, 2535, 1608, 1401, 2059, 2045, 1776, 1777,
	1778, 1779, 2531, 2079, 1783, 1784, 1785, 1786, 1788, 1789,
	1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1601, 2605,
	1260, 1159, 2111, 1127, 1122, 3408, 2100, 2531, 2154, 2298,
	3307, 2108, 1243, 2106, 2231, 2119, 2024, 3126, 1210, 1227,
	2241, 2242, 1210, 2245, 3117, 1210, 2248, 884, 1210, 3756,
	665, 1750, 1749, 2969, 1026, 1210, 1210, 3946, 2140, 661,
	720, 1028, 1410, 643, 643, 643, 2124, 1609, 3524, 1856,
	3337, 899, 663, 3335, 1861, 664, 2522, 3915, 643, 643,
	643, 643, 754, 764, 1396, 662, 2117, 2118, 1397, 1750,
	1749, 2295, 755, 3757, 756, 760, 763, 759, 757, 758,
	2340, 2301, 1458, 2364, 2153, 2335, 2329, 2334, 3733, 2332,
	2337, 3644, 3525, 3608, 3338, 2203, 2204, 3336, 2206, 2155,
	3553, 2324, 3118, 3552, 1688, 2213, 2162, 3538, 1458, 3494,
	2167, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227, 1441,
	2156, 2157, 1911, 1912, 3231, 2358, 3317, 761, 1226, 1225,
	1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227,
	2609, 2610, 3204, 1787, 2338, 3195, 3119, 2197, 3189, 2370,
	2592, 3184, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 762,
	1411, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
	2391, 2392, 1482, 2394, 2395, 2396, 2397, 2398, 2033, 2399,
	2365, 1780, 1905, 1483, 2033, 2033, 2033, 3097, 2863, 2435,
	2435, 1993, 2435, 2862, 904, 2313, 1480, 2708, 1694, 2315,
	2664, 2317, 2225, 2227, 2228, 1230, 1231, 1232, 1233, 1234,
	1227, 619, 619, 2233, 1691, 1693, 1690, 2582, 1692, 1143,
	1396, 2548, 2453, 2104, 1397, 1492, 643, 1218, 1219, 1220,
	1221, 1222, 1223, 1224, 1216, 2103, 2318, 2102, 1386, 643,
	1385, 2259, 1145, 2328, 2516, 1143, 2506, 637, 2277, 1283,
	2063, 1707, 2327, 1531, 2457, 1993, 1836, 1707, 2511, 2168,
	2513, 1536, 2924, 2063, 212, 1029, 1235, 1236, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1227, 1284, 1212, 1213, 1214,
	1211, 2302, 1214, 1211, 2321, 3808, 3565, 1211, 3234, 1212,
	1213, 1214, 1211, 2439, 2437, 3564, 2441, 1479, 2305, 2941,
	2526, 2799, 2470, 2311, 2552, 2448, 2312, 2449, 3920, 1212,
	1213, 1214, 1211, 2797, 2776, 2774, 2341, 2342, 3232, 2347,
	3943, 2565, 3495, 3496, 3544, 2129, 2454, 2455, 133, 133,
	1027, 2464, 1492, 1765, 1492, 1026, 1492, 2647, 1413, 2648,
	3919, 1143, 1028, 3865, 2314, 1262, 2310, 3488, 1766, 2584,
	2517, 1212, 1213, 1214, 1211, 2561, 2562, 2510, 1261, 3836,
	2594, 3305, 3835, 2575, 1225, 1235, 1236, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1227, 1492, 2612, 2411, 2850, 1212,
	1213, 1214, 1211, 3942, 3758, 1471, 1473, 2443, 2518, 2678,
	3699, 2619, 1212, 1213, 1214, 1211, 1492, 2848, 2579, 2846,
	3687, 1537, 2835, 1244, 1490, 3489, 1212, 1213, 1214, 1211,
	1215, 3846, 3677, 2611, 1536, 3667, 3599, 3000, 1245, 3306,
	2458, 1875, 3527, 3526, 3350, 1490, 2707, 1255, 3339, 1212,
	1213, 1214, 1211, 2461, 2620, 3304, 2849, 3185, 1212, 1213,
	1214, 1211, 1890, 2509, 2666, 2667, 3087, 2507, 2670, 2965,
	2936, 2935, 1263, 2623, 2624, 2847, 2833, 2845, 1897, 2832,
	2834, 1900, 1901, 2831, 2823, 1143, 2817, 2816, 2815, 1143,
	2814, 2660, 2538, 2621, 2186, 2450, 1492, 2999, 2235, 1458,
	2082, 3744, 2600, 2081, 2080, 1976, 2076, 2581, 2075, 2031,
	2694, 1829, 3311, 2735, 1827, 1602, 2596, 1341, 2596, 2741,
	2988, 2576, 2590, 3316, 1212, 1213, 1214, 1211, 1212, 1213,
	1214, 1211, 2557, 2269, 2270, 2271, 3072, 2751, 2568, 2651,
	3637, 3638, 2685, 2573, 3939, 3938, 2470, 1143, 2286, 2287,
	2288, 2289, 2618, 3445, 2566, 2773, 3913, 3881, 1125, 1647,
	3880, 2185, 1143, 1143, 1143, 1905, 1474, 3877, 1143, 1329,
	2783, 2784, 2785, 2786, 1143, 2793, 3815, 2794, 2795, 3814,
	2796, 1029, 2798, 2602, 3466, 3626, 2586, 2587, 1212, 1213,
	1214, 1211, 2178, 2793, 3795, 2719, 1212, 1213, 1214, 1211,
	2720, 715, 2805, 2806, 717, 2435, 3740, 3499, 2723, 716,
	2589, 1212, 1213, 1214, 1211, 1124, 3719, 2821, 2822, 2851,
	2779, 2780, 3710, 3691, 3775, 2782, 3686, 2705, 2172, 619,
	3454, 2789, 3685, 2752, 1927, 1976, 3641, 2732, 1143, 1993,
	1993, 1993, 1993, 2859, 3628, 3627, 1212, 1213, 1214, 1211,
	3453, 1143, 1993, 3600, 3546, 2435, 2742, 1212, 1213, 1214,
	1211, 2687, 3506, 2689, 3771, 3492, 2754, 3474, 3472, 2771,
	3468, 3465, 1492, 2771, 2686, 2857, 2772, 1212, 1213, 1214,
	1211, 2767, 2703, 643, 643, 3398, 1212, 1213, 1214, 1211,
	3621, 3464, 2629, 2630, 3443, 2876, 2778, 8, 2635, 7,
	2734, 2740, 2726, 1850, 1212, 1213, 1214, 1211, 2876, 3441,
	3418, 3415, 1212, 1213, 1214, 1211, 1498, 1501, 2753, 3261,
	3412, 649, 2756, 1212, 1213, 1214, 1211, 2855, 2769, 2033,
	3303, 3302, 2775, 3003, 2170, 3299, 2890, 3289, 2781, 212,
	3282, 2750, 3266, 3264, 212, 3192, 1212, 1213, 1214, 1211,
	3002, 3191, 3186, 133, 3180, 3620, 3179, 1530, 1530, 3001,
	1212, 1213, 1214, 1211, 3609, 3098, 1761, 2645, 1761, 2813,
	3059, 2951, 2825, 2743, 3058, 3054, 3052, 1212, 1213, 1214,
	1211, 3050, 2748, 2749, 2964, 3047, 1212, 1213, 1214, 1211,
	1492, 3045, 2240, 2971, 1212, 1213, 1214, 1211, 2858, 2979,
	2976, 2864, 2934, 2861, 2908, 2877, 2878, 2879, 2880, 2844,
	1212, 1213, 1214, 1211, 2836, 2891, 2919, 2644, 2889, 2826,
	2824, 133, 2893, 2820, 2892, 2925, 2819, 2818, 133, 2673,
	2929, 2665, 2643, 2661, 2909, 2558, 2254, 2906, 2249, 1029,
	2642, 133, 821, 820, 1212, 1213, 1214, 1211, 2246, 2085,
	1029, 1806, 2078, 133, 1556, 1817, 2950, 1563, 1564, 1212,
	1213, 1214, 1211, 1816, 1557, 1558, 2946, 1212, 1213, 1214,
	1211, 1603, 1291, 1287, 1286, 1128, 888, 2957, 3467, 3452,
	3330, 2993, 3329, 2995, 195, 1568, 186, 157, 1572, 1571,
	3049, 3328, 3296, 2923, 2948, 2927, 3278, 3053, 2926, 3276,
	3275, 3056, 3057, 3272, 2958, 2641, 3271, 2973, 3265, 1143,
	3263, 3247, 3237, 2944, 3236, 3075, 2942, 1659, 1660, 1661,
	1662, 1663, 2947, 2949, 2959, 3091, 2968, 2961, 2303, 2304,
	643, 2960, 1212, 1213, 1214, 1211, 3222, 3221, 2306, 2307,
	2967, 3127, 3107, 1143, 3062, 2980, 643, 2981, 1143, 1143,
	3678, 2902, 3037, 3005, 191, 3787, 2998, 1993, 2295, 1704,
	3125, 2990, 2987, 1708, 1709, 1710, 1711, 2989, 3039, 2983,
	2917, 2683, 1745, 2996, 2997, 2533, 2994, 2529, 2528, 2358,
	1755, 2214, 2207, 2733, 2201, 2991, 2992, 2200, 2199, 2198,
	2196, 3151, 3101, 3154, 2192, 3154, 3154, 2191, 2189, 2180,
	1143, 2177, 2176, 2084, 1226, 1225, 1235, 1236, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1227, 1800, 1029, 3175, 1029,
	1799, 3044, 1798, 1764, 1029, 1763, 1492, 1492, 3043, 2719,
	1754, 3061, 1807, 195, 3171, 1504, 1502, 2766, 3864, 1281,
	3770, 3173, 3138, 3140, 3060, 3705, 3110, 3693, 3688, 1551,
	1029, 3114, 3580, 3563, 3559, 1490, 1490, 3537, 3521, 3123,
	3428, 3426, 3129, 3396, 3176, 3177, 3395, 3392, 3391, 3100,
	3357, 3354, 3352, 643, 3319, 1562, 1553, 3134, 1567, 3109,
	3075, 1570, 1559, 1393, 3112, 3113, 2852, 1026, 2777, 1458,
	3124, 3150, 1976, 1976, 1028, 2728, 3120, 2508, 3159, 2727,
	3133, 2721, 2328, 191, 2688, 2646, 2515, 1878, 2543, 3012,
	3013, 2327, 2452, 2400, 3149, 3014, 3015, 3016, 3017, 3157,
	3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027,
	2640, 2296, 1894, 2268, 3160, 3155, 3156, 2234, 1689, 1143,
	191, 2044, 1840, 2612, 1813, 1632, 678, 1585, 1238, 1560,
	1242, 1340, 3235, 2912, 2913, 1992, 2639, 1212, 1213, 1214,
	1211, 3213, 2638, 1325, 1321, 3181, 1239, 1241, 1237, 1320,
	1240, 1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231, 1232,
	1233, 1234, 1227, 1212, 1213, 1214, 1211, 1319, 1807, 1212,
	1213, 1214, 1211, 1807, 1807, 2637, 2470, 1318, 643, 3200,
	3201, 3188, 3187, 3194, 1317, 3193, 1316, 1315, 1314, 1313,
	1312, 3190, 2636, 1311, 1310, 3211, 1309, 3198, 1308, 1307,
	1306, 3132, 1212, 1213, 1214, 1211, 1305, 1304, 1303, 133,
	3215, 2633, 133, 133, 1302, 133, 3218, 3219, 3220, 1212,
	1213, 1214, 1211, 2064, 1301, 1300, 2067, 1299, 1298, 2070,
	1297, 1294, 2072, 3224, 2632, 1293, 3230, 1292, 1212, 1213,
	1214, 1211, 1290, 1289, 1288, 1285, 3785, 2631, 2056, 3286,
	1278, 1277, 3288, 1275, 1274, 1027, 1273, 1272, 133, 1271,
	1270, 1212, 1213, 1214, 1211, 1269, 1027, 1268, 1267, 1266,
	1265, 1264, 3250, 3248, 1212, 1213, 1214, 1211, 3267, 3254,
	133, 2625, 1259, 1258, 3249, 1257, 1256, 2114, 1176, 1126,
	3207, 3208, 3783, 3781, 643, 1976, 3393, 2300, 3259, 2282,
	1164, 3895, 3253, 3893, 3851, 3323, 3290, 3210, 1212, 1213,
	1214, 1211, 2615, 2709, 2596, 2463, 2087, 1175, 3320, 3321,
	3322, 2435, 1993, 3342, 3326, 3327, 3212, 2886, 2884, 3279,
	2883, 2744, 2887, 2885, 2882, 3430, 2747, 2881, 1029, 1212,
	1213, 1214, 1211, 3431, 117, 1029, 3360, 3542, 2888, 1143,
	2427, 2428, 3283, 2556, 3285, 2591, 2546, 1387, 3151, 3096,
	64, 1244, 1143, 63, 2963, 3295, 1868, 1869, 1863, 1864,
	1865, 2368, 3298, 1143, 3147, 3407, 3148, 3251, 3252, 1492,
	3099, 3403, 1212, 1213, 1214, 1211, 3312, 3225, 1965, 1545,
	2164, 2541, 3429, 1702, 2169, 2580, 3111, 3344, 643, 1598,
	1976, 1579, 3314, 2255, 1143, 2046, 3361, 1170, 1490, 3904,
	645, 2561, 2562, 3351, 3390, 3353, 3070, 3409, 3063, 3400,
	1212, 1213, 1214, 1211, 3341, 3340, 646, 2755, 2729, 647,
	2789, 2801, 3347, 212, 2320, 2181, 2291, 1872, 2802, 2803,
	2804, 3383, 1839, 2188, 1750, 1749, 1143, 3690, 3419, 1336,
	1337, 3178, 3422, 1334, 1335, 2412, 3432, 2407, 3397, 3402,
	3399, 2876, 1977, 3406, 1450, 2205, 1449, 2417, 1203, 3217,
	2210, 2211, 2212, 2911, 3413, 2215, 2216, 2217, 2218, 2219,
	2220, 2221, 2222, 2223, 2224, 3469, 3414, 3411, 3417, 2256,
	3420, 3871, 3424, 3423, 3477, 3421, 3416, 2116, 1143, 1332,
	1333, 1330, 1331, 2876, 2422, 2426, 2427, 2428, 2423, 3450,
	2424, 2429, 1402, 1378, 2425, 1425, 3869, 3829, 3805, 3436,
	1143, 1492, 1492, 2033, 3804, 3802, 3107, 3747, 3706, 3594,
	3593, 3446, 3532, 3442, 3268, 3447, 3244, 3243, 3514, 3228,
	3514, 2353, 3475, 3476, 2323, 1600, 3227, 3434, 2921, 1400,
	1490, 1700, 3287, 1143, 3531, 1143, 2966, 3508, 3509, 3504,
	3897, 3896, 3896, 3534, 2671, 3536, 2284, 2179, 1344, 1161,
	1417, 3897, 1492, 3561, 3223, 1140, 72, 3502, 3482, 3484,
	2, 3483, 3916, 879, 880, 881, 882, 3463, 1140, 3917,
	643, 1, 1143, 1143, 3505, 3493, 1143, 1143, 199, 3,
	2652, 1700, 1811, 1029, 3507, 1338, 883, 878, 3519, 3518,
	1653, 1468, 1653, 2444, 3344, 3530, 2026, 1496, 1815, 3540,
	3479, 3584, 885, 3577, 2895, 3585, 3582, 1874, 3390, 3591,
	3511, 3567, 3568, 3539, 2896, 3578, 3579, 2101, 3595, 3596,
	3543, 3216, 2898, 3545, 3547, 2674, 2136, 2865, 3256, 3502,
	3502, 1492, 2405, 3502, 3502, 3383, 2272, 2422, 2426, 2427,
	2428, 2423, 2438, 2424, 2429, 3090, 3588, 2425, 1388, 2588,
	937, 1756, 3623, 1613, 1051, 1154, 1610, 3583, 1153, 1151,
	1490, 1705, 3615, 768, 3587, 2090, 1807, 2853, 1807, 3607,
	2827, 3590, 3589, 1226, 1225, 1235, 1236, 1228, 1229, 1230,
	1231, 1232, 1233, 1234, 1227, 3903, 3602, 1807, 1807, 3932,
	3863, 3606, 3906, 1630, 752, 3610, 3614, 944, 3796, 3711,
	3867, 3713, 3659, 3653, 3605, 2141, 1992, 3455, 1208, 3456,
	2943, 962, 809, 779, 1276, 133, 1591, 3010, 1143, 1530,
	3008, 1053, 778, 3309, 2699, 3640, 2914, 3661, 3676, 1050,
	963, 3682, 2073, 3708, 3603, 1546, 1550, 3647, 2319, 3669,
	3766, 3541, 3143, 2763, 2033, 1574, 3761, 3655, 3654, 3128,
	3355, 3450, 3459, 3656, 3130, 3131, 3457, 3458, 3668, 685,
	3672, 1143, 2005, 617, 1011, 3581, 1492, 1029, 2086, 2551,
	686, 2554, 2299, 3820, 3692, 1653, 917, 2281, 918, 910,
	2717, 2716, 1670, 3701, 1217, 1687, 3689, 3028, 3029, 1254,
	724, 2166, 2696, 3378, 3651, 1490, 2907, 71, 70, 69,
	3698, 68, 220, 3729, 3700, 770, 219, 3624, 3497, 3792,
	3908, 3736, 750, 749, 3724, 748, 747, 746, 3502, 745,
	2421, 2419, 2418, 1988, 1987, 2053, 3105, 1143, 3707, 2792,
	2787, 1916, 1914, 2348, 2355, 2593, 1913, 3848, 2599, 3776,
	3777, 3558, 3748, 2837, 3449, 2613, 2614, 1862, 2033, 2344,
	1933, 3749, 2808, 2616, 2617, 1930, 3753, 3754, 1929, 3743,
	3734, 2800, 3554, 3548, 3742, 1961, 3739, 3657, 3513, 2622,
	3765, 3362, 3363, 3369, 1143, 2290, 1076, 3750, 1072, 1074,
	3202, 1075, 1492, 1073, 3502, 3790, 3793, 3774, 3780, 3782,
	3784, 3786, 3759, 2601, 3196, 2325, 3214, 1659, 1807, 3065,
	2264, 3794, 3764, 2263, 2261, 3773, 2260, 1363, 3735, 3816,
	3478, 1490, 2468, 3779, 2466, 1123, 3209, 3205, 2098, 2112,
	3789, 2962, 1989, 3535, 1985, 2867, 2413, 3631, 3801, 3799,
	1492, 3502, 1867, 3659, 911, 2279, 41, 115, 133, 105,
	174, 56, 173, 55, 113, 171, 3813, 54, 133, 3839,
	100, 99, 112, 169, 53, 3847, 3828, 204, 3832, 1490,
	3830, 203, 206, 205, 3833, 3834, 202, 2519, 3831, 2520,
	201, 1534, 200, 3806, 3517, 2745, 2746, 1226, 1225, 1235,
	1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227, 873,
	3856, 44, 3857, 3876, 3858, 3860, 3859, 3870, 43, 3872,
	3873, 3868, 175, 3866, 42, 106, 57, 40, 39, 38,
	1143, 3724, 3875, 34, 13, 12, 35, 22, 3878, 3879,
	21, 1617, 20, 26, 32, 31, 126, 125, 30, 3682,
	3885, 124, 123, 122, 121, 120, 119, 3888, 3887, 3886,
	3566, 29, 3894, 3902, 19, 3910, 48, 3892, 3909, 47,
	3898, 3899, 3900, 3901, 3891, 46, 9, 111, 109, 28,
	110, 107, 103, 3921, 101, 1143, 3914, 3883, 83, 82,
	1992, 1992, 1992, 1992, 81, 3922, 96, 3765, 3923, 3925,
	95, 94, 93, 1992, 92, 3931, 3934, 195, 61, 186,
	157, 91, 89, 90, 961, 80, 79, 78, 77, 76,
	1451, 1452, 98, 1454, 1455, 187, 1459, 1460, 1461, 3941,
	104, 102, 178, 87, 950, 97, 188, 3910, 3948, 88,
	3909, 3947, 1653, 86, 85, 84, 75, 3934, 3949, 3343,
	74, 73, 155, 3953, 2163, 131, 154, 153, 3346, 1507,
	1508, 1509, 1510, 1511, 152, 1513, 1514, 1515, 1516, 1517,
	118, 151, 149, 1523, 1524, 1525, 1526, 191, 1226, 1225,
	1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1227,
	133, 150, 148, 147, 146, 133, 145, 3367, 144, 143,
	49, 50, 51, 52, 947, 948, 165, 164, 166, 2928,
	168, 2930, 170, 167, 172, 990, 133, 162, 160, 163,
	161, 159, 66, 11, 114, 18, 25, 133, 3533, 4,
	1807, 0, 0, 0, 0, 1807, 3379, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2114, 0, 0, 3370,
	0, 0, 0, 0, 139, 140, 3006, 141, 142, 0,
	3365, 0, 0, 0, 0, 3387, 3388, 0, 0, 0,
	0, 3366, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2982, 1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231,
	1232, 1233, 1234, 1227, 0, 0, 0, 0, 992, 0,
	0, 991, 0, 0, 0, 3004, 0, 0, 3371, 0,
	1226, 1225, 1235, 1236, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1227, 0, 0, 0, 0, 156, 184, 193, 185,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 976,
	0, 0, 0, 0, 0, 0, 0, 951, 183, 177,
	176, 0, 0, 0, 0, 67, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3528, 3529, 0, 0,
	0, 0, 0, 0, 953, 1226, 1225, 1235, 1236, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1227, 0, 0, 0,
	0, 0, 0, 0, 1027, 0, 133, 0, 0, 0,
	0, 133, 0, 3386, 0, 2334, 0, 0, 1992, 0,
	0, 0, 0, 0, 0, 0, 179, 180, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
	3375, 697, 696, 703, 693, 0, 0, 0, 0, 975,
	973, 0, 0, 700, 701, 0, 702, 706, 0, 189,
	687, 0, 3372, 3376, 3374, 3373, 0, 0, 0, 0,
	711, 972, 0, 0, 3158, 0, 0, 0, 0, 0,
	127, 0, 0, 946, 182, 0, 128, 0, 0, 0,
	0, 0, 0, 0, 952, 985, 0, 0, 0, 0,
	0, 0, 3381, 3382, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 715, 0, 0, 717, 981, 0,
	0, 0, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	3389, 0, 0, 0, 982, 986, 60, 0, 0, 0,
	0, 0, 3368, 0, 0, 0, 0, 0, 3380, 0,
	0, 0, 0, 0, 969, 0, 967, 971, 989, 0,
	0, 0, 968, 965, 964, 0, 970, 955, 956, 954,
	957, 958, 959, 960, 0, 987, 0, 988, 0, 0,
	0, 1962, 0, 0, 0, 62, 1923, 0, 983, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1965, 1932, 0, 0,
	137, 192, 0, 138, 0, 979, 1966, 1967, 158, 2038,
	0, 978, 0, 58, 0, 0, 0, 0, 0, 0,
	688, 690, 689, 0, 0, 0, 974, 0, 0, 0,
	695, 0, 1931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 699, 0, 0, 0, 0, 0, 1939, 714,
	0, 0, 0, 0, 0, 0, 692, 3260, 3385, 0,
	682, 0, 0, 0, 3262, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	45, 0, 0, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 3277, 1962, 0, 0, 134,
	135, 1923, 0, 136, 977, 133, 0, 0, 0, 0,
	949, 945, 133, 0, 0, 0, 1955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1965, 1932, 0, 3384, 0, 0, 0, 0, 0,
	0, 1966, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1992, 0, 0, 0, 1931, 694, 698,
	704, 0, 705, 707, 0, 0, 708, 709, 710, 0,
	0, 712, 713, 1939, 0, 0, 0, 0, 1922, 1924,
	1921, 0, 1918, 0, 0, 0, 0, 1943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1949, 0,
	0, 0, 0, 0, 0, 0, 1934, 0, 1917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1937, 1971,
	0, 0, 1938, 1940, 1942, 0, 1944, 1945, 1946, 1950,
	1951, 1952, 1954, 1957, 1958, 1959, 0, 1807, 0, 0,
	0, 1955, 0, 1947, 1956, 1948, 0, 0, 0, 0,
	0, 1807, 0, 0, 3425, 1926, 0, 3427, 0, 0,
	0, 0, 0, 0, 133, 697, 696, 703, 693, 0,
	0, 0, 0, 0, 3433, 0, 0, 700, 701, 1963,
	702, 706, 0, 0, 687, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 711, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1919, 1920, 0, 0,
	0, 0, 0, 1922, 2758, 1921, 0, 2757, 0, 0,
	0, 0, 1943, 0, 1960, 0, 0, 691, 0, 0,
	0, 0, 0, 1949, 0, 0, 0, 0, 0, 0,
	0, 1936, 0, 0, 0, 0, 0, 0, 1935, 0,
	0, 0, 0, 1937, 1971, 0, 0, 1938, 1940, 1942,
	133, 1944, 1945, 1946, 1950, 1951, 1952, 1954, 1957, 1958,
	1959, 0, 1953, 0, 0, 0, 0, 0, 1947, 1956,
	1948, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	1926, 0, 0, 0, 1969, 1968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1919, 1920, 0, 0, 0, 0, 1928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1936, 0, 0, 0,
	0, 0, 0, 1935, 688, 690, 689, 0, 0, 1964,
	0, 0, 1970, 0, 695, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 699, 1953, 0, 0,
	0, 0, 0, 714, 0, 0, 1941, 0, 0, 0,
	692, 0, 0, 0, 0, 1095, 0, 0, 0, 1969,
	1968, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 1080,
	3648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1107, 1109, 1111, 1113, 1114, 1116, 0, 1121, 1117, 1118,
	1119, 1120, 1928, 1098, 1099, 1100, 1101, 1078, 1079, 1104,
	0, 1081, 0, 1083, 1084, 1085, 1086, 1082, 1087, 1088,
	1089, 1090, 1091, 1094, 1096, 1092, 1093, 1102, 1455, 0,
	0, 0, 0, 0, 0, 1106, 1108, 1110, 1112, 1115,
	0, 0, 0, 0, 1964, 0, 0, 1970, 0, 0,
	0, 0, 694, 698, 704, 0, 705, 707, 0, 0,
	708, 709, 710, 0, 0, 712, 713, 1080, 0, 0,
	0, 1070, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1263, 1103, 1107, 1109,
	1111, 1113, 1114, 1116, 0, 1121, 1117, 1118, 1119, 1120,
	0, 1098, 1099, 1100, 1101, 1078, 1079, 1104, 0, 1081,
	0, 1083, 1084, 1085, 1086, 1082, 1087, 1088, 1089, 1090,
	1091, 1094, 1096, 1092, 1093, 1102, 0, 0, 0, 0,
	0, 0, 0, 1106, 1108, 1110, 1112, 1115, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3772, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2597, 2598, 0, 0, 0, 0,
	0, 691, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3844, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 786, 0, 0,
	0, 0, 0, 0, 0, 0, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 777, 545, 496, 414, 369, 563,
	562, 0, 0, 844, 852, 0, 0, 0, 3844, 0,
	0, 0, 0, 0, 0, 0, 731, 0, 0, 767,
	821, 820, 754, 764, 0, 0, 298, 218, 491, 611,
	493, 492, 755, 0, 756, 760, 763, 759, 757, 758,
	0, 836, 0, 0, 0, 0, 0, 0, 723, 735,
	0, 740, 0, 0, 0, 0, 0, 3844, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 733, 0, 0, 0,
	0, 787, 0, 734, 0, 0, 782, 761, 765, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 3951, 402, 323, 337, 320, 382, 762,
	785, 789, 319, 858, 783, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 859, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 1105, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 780, 0, 608, 0, 447, 0, 0, 842,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	784, 0, 405, 387, 855, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 1758, 1757,
	1759, 459, 353, 354, 0, 332, 280, 281, 626, 840,
	383, 573, 606, 607, 498, 0, 854, 835, 837, 838,
	841, 845, 846, 847, 848, 849, 851, 853, 857, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	856, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	788, 548, 549, 373, 374, 375, 376, 843, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 865, 839, 864, 866,
	867, 863, 868, 869, 850, 744, 0, 795, 861, 860,
	862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 828, 802, 803, 804, 741, 805,
	799, 800, 742, 801, 829, 793, 825, 826, 769, 796,
	806, 824, 807, 827, 830, 831, 870, 871, 813, 797,
	246, 872, 810, 832, 823, 822, 808, 794, 833, 834,
	776, 771, 811, 812, 798, 816, 817, 818, 743, 790,
	791, 792, 814, 815, 772, 773, 774, 775, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 819, 616, 418, 786, 0, 627,
	494, 495, 628, 605, 0, 736, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 739,
	0, 0, 0, 325, 1808, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 777, 545, 496, 414, 369, 563,
	562, 0, 0, 844, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 2017, 0, 0, 731, 0, 0, 767,
	821, 820, 754, 764, 0, 0, 298, 218, 491, 611,
	493, 492, 755, 0, 756, 760, 763, 759, 757, 758,
	0, 836, 0, 0, 0, 0, 0, 0, 723, 735,
	0, 740, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 732, 733, 0, 0, 0,
	0, 787, 0, 734, 0, 0, 2018, 761, 765, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 762,
	785, 789, 319, 858, 783, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 859, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 780, 0, 608, 0, 447, 0, 0, 842,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	784, 0, 405, 387, 855, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 840,
	383, 573, 606, 607, 498, 0, 854, 835, 837, 838,
	841, 845, 846, 847, 848, 849, 851, 853, 857, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	856, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	788, 548, 549, 373, 374, 375, 376, 843, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 865, 839, 864, 866,
	867, 863, 868, 869, 850, 744, 0, 795, 861, 860,
	862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 828, 802, 803, 804, 741, 805,
	799, 800, 742, 801, 829, 793, 825, 826, 769, 796,
	806, 824, 807, 827, 830, 831, 870, 871, 813, 797,
	246, 872, 810, 832, 823, 822, 808, 794, 833, 834,
	776, 771, 811, 812, 798, 816, 817, 818, 743, 790,
	791, 792, 814, 815, 772, 773, 774, 775, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 819, 616, 418, 195, 786, 627,
	494, 495, 628, 605, 0, 736, 0, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 1247, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 158, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 3950, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 3845, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 1808, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 0, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 786, 0,
	627, 494, 495, 628, 605, 0, 736, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 777, 545, 496, 414, 369,
	563, 562, 0, 0, 844, 852, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	767, 821, 820, 754, 764, 0, 0, 298, 218, 491,
	611, 493, 492, 755, 0, 756, 760, 763, 759, 757,
	758, 0, 836, 0, 0, 0, 0, 0, 0, 723,
	735, 0, 740, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 732, 733, 1529, 0,
	0, 0, 787, 0, 734, 0, 0, 782, 761, 765,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	762, 785, 789, 319, 858, 783, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 859, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 780, 0, 608, 0, 447, 0, 0,
	842, 0, 0, 0, 419, 0, 0, 352, 0, 0,
	0, 784, 0, 405, 387, 855, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	0, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	840, 383, 573, 606, 607, 498, 0, 854, 835, 837,
	838, 841, 845, 846, 847, 848, 849, 851, 853, 857,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 856, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 788, 548, 549, 373, 374, 375, 376, 843, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 865, 839, 864,
	866, 867, 863, 868, 869, 850, 744, 0, 795, 861,
	860, 862, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 828, 802, 803, 804, 741,
	805, 799, 800, 742, 801, 829, 793, 825, 826, 769,
	796, 806, 824, 807, 827, 830, 831, 870, 871, 813,
	797, 246, 872, 810, 832, 823, 822, 808, 794, 833,
	834, 776, 771, 811, 812, 798, 816, 817, 818, 743,
	790, 791, 792, 814, 815, 772, 773, 774, 775, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 819, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 786, 736, 0, 2187, 0,
	0, 0, 0, 0, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 723, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 723, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 1801, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 723, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	2649, 0, 2650, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 723, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 1671, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 1672, 1673,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 0, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 786, 0, 627, 494, 495,
	628, 605, 0, 736, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 739, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 777, 545, 496, 414, 369, 563, 562, 0,
	0, 844, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 767, 821, 820,
	754, 764, 0, 0, 298, 218, 491, 611, 493, 492,
	755, 0, 756, 760, 763, 759, 757, 758, 0, 836,
	0, 0, 0, 0, 0, 0, 723, 735, 0, 740,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 732, 733, 0, 0, 0, 0, 787,
	0, 734, 0, 0, 782, 761, 765, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 762, 785, 789,
	319, 858, 783, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 859,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	780, 0, 608, 0, 447, 0, 0, 842, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 784, 0,
	405, 387, 855, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 840, 383, 573,
	606, 607, 498, 0, 854, 835, 837, 838, 841, 845,
	846, 847, 848, 849, 851, 853, 857, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 856, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 788, 548,
	549, 373, 374, 375, 376, 843, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 865, 839, 864, 866, 867, 863,
	868, 869, 850, 744, 0, 795, 861, 860, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 828, 802, 803, 804, 741, 805, 799, 800,
	742, 801, 829, 793, 825, 826, 769, 796, 806, 824,
	807, 827, 830, 831, 870, 871, 813, 797, 246, 872,
	810, 832, 823, 822, 808, 794, 833, 834, 776, 771,
	811, 812, 798, 816, 817, 818, 743, 790, 791, 792,
	814, 815, 772, 773, 774, 775, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 819, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 0, 736, 195, 61, 186, 157, 0, 0,
	0, 0, 0, 0, 385, 0, 509, 542, 531, 615,
	497, 0, 187, 0, 0, 0, 0, 0, 0, 178,
	0, 325, 0, 188, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 131, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 191, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 209,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 156, 184, 193, 185, 116, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 210, 0, 0,
	0, 419, 0, 0, 352, 183, 177, 176, 463, 0,
	405, 387, 222, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 583, 584, 585, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 442, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 213, 555, 558, 488, 223, 0, 552,
	567, 525, 566, 224, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	129, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 221, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 228, 293, 430,
	229, 0, 282, 504, 356, 158, 397, 330, 569, 570,
	58, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 225, 45, 211, 214,
	216, 215, 0, 59, 553, 565, 599, 5, 609, 610,
	612, 614, 613, 616, 418, 195, 134, 226, 494, 495,
	227, 605, 0, 0, 0, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 131, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 191, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 2336, 2339, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 2340, 447, 0, 0, 0, 2335,
	0, 2334, 419, 2332, 2337, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 0, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 2338, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 158, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 0, 0, 217, 0, 0, 754,
	764, 0, 0, 298, 218, 491, 611, 493, 492, 755,
	0, 756, 760, 763, 759, 757, 758, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 761, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 762, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 195, 61, 186, 157, 0, 0, 0, 0, 0,
	0, 385, 653, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 659, 0, 0, 0, 0,
	0, 658, 0, 0, 217, 0, 0, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 657, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 654, 656, 303, 470, 398, 667, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 158, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 0, 0, 627, 494, 495, 628, 605, 385,
	0, 509, 542, 531, 615, 497, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 325, 0, 0, 355,
	546, 528, 538, 529, 514, 515, 516, 523, 335, 517,
	518, 519, 489, 520, 490, 521, 522, 0, 545, 496,
	414, 369, 563, 562, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 217, 0, 0, 0, 0, 0, 0, 298,
	218, 491, 611, 493, 492, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 301, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 288, 420, 437, 299,
	410, 450, 304, 417, 294, 384, 407, 0, 0, 2492,
	2495, 2496, 2497, 2498, 2499, 2500, 0, 2505, 2501, 2502,
	2503, 2504, 0, 2487, 2488, 2489, 2490, 1078, 2471, 2493,
	0, 2472, 381, 2473, 2474, 2475, 2476, 1082, 2477, 2478,
	2479, 2480, 2481, 2484, 2485, 2482, 2483, 2491, 393, 359,
	394, 342, 371, 370, 372, 1106, 1108, 1110, 1112, 1115,
	473, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 604, 0, 0, 608, 0, 447,
	0, 0, 0, 0, 0, 0, 419, 0, 0, 352,
	0, 0, 0, 2486, 0, 405, 387, 630, 0, 0,
	403, 357, 432, 395, 438, 421, 446, 399, 396, 283,
	422, 322, 368, 295, 297, 317, 324, 326, 328, 329,
	377, 378, 390, 409, 423, 424, 425, 321, 305, 404,
	306, 339, 307, 284, 313, 311, 314, 411, 315, 286,
	391, 429, 0, 334, 400, 364, 287, 363, 392, 428,
	427, 296, 454, 460, 461, 550, 0, 466, 631, 632,
	633, 475, 0, 0, 480, 481, 482, 484, 485, 486,
	487, 551, 568, 535, 505, 468, 559, 502, 506, 507,
	571, 0, 0, 0, 459, 353, 354, 0, 332, 280,
	281, 626, 318, 383, 573, 606, 607, 498, 0, 560,
	499, 508, 310, 532, 544, 543, 379, 458, 0, 555,
	558, 488, 625, 0, 552, 567, 629, 566, 622, 389,
	0, 408, 564, 511, 0, 556, 530, 0, 557, 526,
	561, 0, 500, 0, 415, 440, 452, 469, 472, 501,
	586, 587, 588, 285, 471, 590, 591, 592, 593, 594,
	595, 596, 589, 443, 533, 510, 536, 451, 513, 512,
	0, 0, 547, 467, 548, 549, 373, 374, 375, 376,
	336, 574, 303, 470, 398, 0, 534, 0, 0, 0,
	0, 0, 0, 0, 0, 539, 540, 537, 634, 0,
	597, 598, 0, 0, 464, 465, 331, 338, 483, 340,
	302, 388, 333, 449, 347, 0, 476, 541, 477, 600,
	603, 601, 602, 380, 343, 344, 412, 348, 358, 401,
	448, 386, 406, 300, 439, 413, 362, 527, 554, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 582, 581, 580, 579, 578,
	577, 576, 575, 0, 0, 524, 426, 312, 274, 308,
	309, 316, 623, 620, 430, 624, 0, 282, 2494, 356,
	0, 397, 330, 569, 570, 0, 0, 230, 231, 232,
	233, 234, 235, 236, 237, 275, 238, 239, 240, 241,
	242, 243, 244, 247, 248, 249, 250, 251, 252, 253,
	254, 572, 245, 246, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 0, 0,
	0, 276, 277, 278, 279, 0, 0, 270, 271, 272,
	273, 0, 0, 0, 455, 456, 457, 479, 0, 441,
	503, 621, 0, 0, 0, 0, 0, 0, 0, 553,
	565, 599, 0, 609, 610, 612, 614, 613, 616, 418,
	0, 0, 627, 494, 495, 628, 605, 385, 0, 509,
	542, 531, 615, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 0, 355, 546, 528,
	538, 529, 514, 515, 516, 523, 335, 517, 518, 519,
	489, 520, 490, 521, 522, 0, 545, 496, 414, 369,
	563, 562, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	217, 0, 0, 0, 0, 0, 0, 298, 218, 491,
	611, 493, 492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 2336, 2339, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 288, 420, 437, 299, 410, 450,
	304, 417, 294, 384, 407, 0, 0, 290, 435, 416,
	366, 345, 346, 289, 0, 402, 323, 337, 320, 382,
	0, 434, 462, 319, 453, 0, 445, 292, 0, 444,
	381, 431, 436, 367, 361, 0, 291, 433, 365, 360,
	349, 327, 478, 350, 351, 341, 393, 359, 394, 342,
	371, 370, 372, 0, 0, 0, 0, 0, 473, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 0, 608, 2340, 447, 0, 0,
	0, 2335, 0, 2334, 419, 2332, 2337, 352, 0, 0,
	0, 463, 0, 405, 387, 630, 0, 0, 403, 357,
	432, 395, 438, 421, 446, 399, 396, 283, 422, 322,
	368, 295, 297, 317, 324, 326, 328, 329, 377, 378,
	390, 409, 423, 424, 425, 321, 305, 404, 306, 339,
	307, 284, 313, 311, 314, 411, 315, 286, 391, 429,
	2338, 334, 400, 364, 287, 363, 392, 428, 427, 296,
	454, 460, 461, 550, 0, 466, 631, 632, 633, 475,
	0, 0, 480, 481, 482, 484, 485, 486, 487, 551,
	568, 535, 505, 468, 559, 502, 506, 507, 571, 0,
	0, 0, 459, 353, 354, 0, 332, 280, 281, 626,
	318, 383, 573, 606, 607, 498, 0, 560, 499, 508,
	310, 532, 544, 543, 379, 458, 0, 555, 558, 488,
	625, 0, 552, 567, 629, 566, 622, 389, 0, 408,
	564, 511, 0, 556, 530, 0, 557, 526, 561, 0,
	500, 0, 415, 440, 452, 469, 472, 501, 586, 587,
	588, 285, 471, 590, 591, 592, 593, 594, 595, 596,
	589, 443, 533, 510, 536, 451, 513, 512, 0, 0,
	547, 467, 548, 549, 373, 374, 375, 376, 336, 574,
	303, 470, 398, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 539, 540, 537, 634, 0, 597, 598,
	0, 0, 464, 465, 331, 338, 483, 340, 302, 388,
	333, 449, 347, 0, 476, 541, 477, 600, 603, 601,
	602, 380, 343, 344, 412, 348, 358, 401, 448, 386,
	406, 300, 439, 413, 362, 527, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 582, 581, 580, 579, 578, 577, 576,
	575, 0, 0, 524, 426, 312, 274, 308, 309, 316,
	623, 620, 430, 624, 0, 282, 504, 356, 0, 397,
	330, 569, 570, 0, 0, 230, 231, 232, 233, 234,
	235, 236, 237, 275, 238, 239, 240, 241, 242, 243,
	244, 247, 248, 249, 250, 251, 252, 253, 254, 572,
	245, 246, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 268, 0, 0, 0, 276,
	277, 278, 279, 0, 0, 270, 271, 272, 273, 0,
	0, 0, 455, 456, 457, 479, 0, 441, 503, 621,
	0, 0, 0, 0, 0, 0, 0, 553, 565, 599,
	0, 609, 610, 612, 614, 613, 616, 418, 0, 0,
	627, 494, 495, 628, 605, 385, 0, 509, 542, 531,
	615, 497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 325, 0, 0, 355, 546, 528, 538, 529,
	514, 515, 516, 523, 335, 517, 518, 519, 489, 520,
	490, 521, 522, 0, 545, 496, 414, 369, 563, 562,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 217, 0,
	0, 0, 0, 0, 0, 298, 218, 491, 611, 493,
	492, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 0, 2357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 288, 420, 437, 299, 410, 450, 304, 417,
	294, 384, 407, 0, 0, 290, 435, 416, 366, 345,
	346, 289, 0, 402, 323, 337, 320, 382, 0, 434,
	462, 319, 453, 0, 445, 292, 0, 444, 381, 431,
	436, 367, 361, 0, 291, 433, 365, 360, 349, 327,
	478, 350, 351, 341, 393, 359, 394, 342, 371, 370,
	372, 0, 0, 0, 0, 0, 473, 474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	604, 0, 0, 608, 2356, 447, 0, 0, 0, 2362,
	2359, 2361, 419, 0, 2360, 352, 0, 0, 0, 463,
	0, 405, 387, 630, 0, 2354, 403, 357, 432, 395,
	438, 421, 446, 399, 396, 283, 422, 322, 368, 295,
	297, 317, 324, 326, 328, 329, 377, 378, 390, 409,
	423, 424, 425, 321, 305, 404, 306, 339, 307, 284,
	313, 311, 314, 411, 315, 286, 391, 429, 0, 334,
	400, 364, 287, 363, 392, 428, 427, 296, 454, 460,
	461, 550, 0, 466, 631, 632, 633, 475, 0, 0,
	480, 481, 482, 484, 485, 486, 487, 551, 568, 535,
	505, 468, 559, 502, 506, 507, 571, 0, 0, 0,
	459, 353, 354, 0, 332, 280, 281, 626, 318, 383,
	573, 606, 607, 498, 0, 560, 499, 508, 310, 532,
	544, 543, 379, 458, 0, 555, 558, 488, 625, 0,
	552, 567, 629, 566, 622, 389, 0, 408, 564, 511,
	0, 556, 530, 0, 557, 526, 561, 0, 500, 0,
	415, 440, 452, 469, 472, 501, 586, 587, 588, 285,
	471, 590, 591, 592, 593, 594, 595, 596, 589, 443,
	533, 510, 536, 451, 513, 512, 0, 0, 547, 467,
	548, 549, 373, 374, 375, 376, 336, 574, 303, 470,
	398, 0, 534, 0, 0, 0, 0, 0, 0, 0,
	0, 539, 540, 537, 634, 0, 597, 598, 0, 0,
	464, 465, 331, 338, 483, 340, 302, 388, 333, 449,
	347, 0, 476, 541, 477, 600, 603, 601, 602, 380,
	343, 344, 412, 348, 358, 401, 448, 386, 406, 300,
	439, 413, 362, 527, 554, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 269, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 582, 581, 580, 579, 578, 577, 576, 575, 0,
	0, 524, 426, 312, 274, 308, 309, 316, 623, 620,
	430, 624, 0, 282, 504, 356, 0, 397, 330, 569,
	570, 0, 0, 230, 231, 232, 233, 234, 235, 236,
	237, 275, 238, 239, 240, 241, 242, 243, 244, 247,
	248, 249, 250, 251, 252, 253, 254, 572, 245, 246,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	265, 266, 267, 268, 0, 0, 0, 276, 277, 278,
	279, 0, 0, 270, 271, 272, 273, 0, 0, 0,
	455, 456, 457, 479, 0, 441, 503, 621, 0, 0,
	0, 0, 0, 0, 0, 553, 565, 599, 0, 609,
	610, 612, 614, 613, 616, 418, 0, 0, 627, 494,
	495, 628, 605, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 0, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	2357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 2356, 447, 0, 0, 0, 2362, 2359, 2361,
	419, 0, 2360, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 0, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 2057, 0, 0, 0, 0, 325, 0,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 0, 0, 2058, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 0, 0, 1212,
	1213, 1214, 1211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	437, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 0,
	445, 292, 0, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 399,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 596, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 467, 548, 549, 373, 374,
	375, 376, 336, 574, 303, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 380, 343, 344, 412, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 362, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 195, 0, 627, 494, 495, 628, 605, 0,
	0, 0, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	131, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 191, 2107, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 158, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 195, 0, 627, 494, 495, 628, 605,
	0, 0, 0, 385, 0, 509, 542, 531, 615, 497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	325, 0, 0, 355, 546, 528, 538, 529, 514, 515,
	516, 523, 335, 517, 518, 519, 489, 520, 490, 521,
	522, 131, 545, 496, 414, 369, 563, 562, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 191, 2093, 0, 217, 0, 0, 0,
	0, 0, 0, 298, 218, 491, 611, 493, 492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	288, 420, 437, 299, 410, 450, 304, 417, 294, 384,
	407, 0, 0, 290, 435, 416, 366, 345, 346, 289,
	0, 402, 323, 337, 320, 382, 0, 434, 462, 319,
	453, 0, 445, 292, 0, 444, 381, 431, 436, 367,
	361, 0, 291, 433, 365, 360, 349, 327, 478, 350,
	351, 341, 393, 359, 394, 342, 371, 370, 372, 0,
	0, 0, 0, 0, 473, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 604, 0,
	0, 608, 0, 447, 0, 0, 0, 0, 0, 0,
	419, 0, 0, 352, 0, 0, 0, 463, 0, 405,
	387, 630, 0, 0, 403, 357, 432, 395, 438, 421,
	446, 399, 396, 283, 422, 322, 368, 295, 297, 317,
	324, 326, 328, 329, 377, 378, 390, 409, 423, 424,
	425, 321, 305, 404, 306, 339, 307, 284, 313, 311,
	314, 411, 315, 286, 391, 429, 0, 334, 400, 364,
	287, 363, 392, 428, 427, 296, 454, 460, 461, 550,
	0, 466, 631, 632, 633, 475, 0, 0, 480, 481,
	482, 484, 485, 486, 487, 551, 568, 535, 505, 468,
	559, 502, 506, 507, 571, 0, 0, 0, 459, 353,
	354, 0, 332, 280, 281, 626, 318, 383, 573, 606,
	607, 498, 0, 560, 499, 508, 310, 532, 544, 543,
	379, 458, 0, 555, 558, 488, 625, 0, 552, 567,
	629, 566, 622, 389, 0, 408, 564, 511, 0, 556,
	530, 0, 557, 526, 561, 0, 500, 0, 415, 440,
	452, 469, 472, 501, 586, 587, 588, 285, 471, 590,
	591, 592, 593, 594, 595, 596, 589, 443, 533, 510,
	536, 451, 513, 512, 0, 0, 547, 467, 548, 549,
	373, 374, 375, 376, 336, 574, 303, 470, 398, 0,
	534, 0, 0, 0, 0, 0, 0, 0, 0, 539,
	540, 537, 634, 0, 597, 598, 0, 0, 464, 465,
	331, 338, 483, 340, 302, 388, 333, 449, 347, 0,
	476, 541, 477, 600, 603, 601, 602, 380, 343, 344,
	412, 348, 358, 401, 448, 386, 406, 300, 439, 413,
	362, 527, 554, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 582,
	581, 580, 579, 578, 577, 576, 575, 0, 0, 524,
	426, 312, 274, 308, 309, 316, 623, 620, 430, 624,
	0, 282, 504, 356, 158, 397, 330, 569, 570, 0,
	0, 230, 231, 232, 233, 234, 235, 236, 237, 275,
	238, 239, 240, 241, 242, 243, 244, 247, 248, 249,
	250, 251, 252, 253, 254, 572, 245, 246, 255, 256,
	257, 258, 259, 260, 261, 262, 263, 264, 265, 266,
	267, 268, 0, 0, 0, 276, 277, 278, 279, 0,
	0, 270, 271, 272, 273, 0, 0, 0, 455, 456,
	457, 479, 0, 441, 503, 621, 0, 0, 0, 0,
	0, 0, 0, 553, 565, 599, 0, 609, 610, 612,
	614, 613, 616, 418, 0, 0, 627, 494, 495, 628,
	605, 385, 0, 509, 542, 531, 615, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 325, 1010,
	0, 355, 546, 528, 538, 529, 514, 515, 516, 523,
	335, 517, 518, 519, 489, 520, 490, 521, 522, 0,
	545, 496, 414, 369, 563, 562, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 217, 1017, 1018, 0, 0, 0,
	0, 298, 218, 491, 611, 493, 492, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 288, 420,
	1004, 299, 410, 450, 304, 417, 294, 384, 407, 0,
	0, 290, 435, 416, 366, 345, 346, 289, 0, 402,
	323, 337, 320, 382, 0, 434, 462, 319, 453, 992,
	445, 292, 991, 444, 381, 431, 436, 367, 361, 0,
	291, 433, 365, 360, 349, 327, 478, 350, 351, 341,
	393, 359, 394, 342, 371, 370, 372, 0, 0, 0,
	0, 0, 473, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 604, 0, 0, 608,
	0, 447, 0, 0, 0, 0, 0, 0, 419, 0,
	0, 352, 0, 0, 0, 463, 0, 405, 387, 630,
	0, 0, 403, 357, 432, 395, 438, 421, 446, 1008,
	396, 283, 422, 322, 368, 295, 297, 317, 324, 326,
	328, 329, 377, 378, 390, 409, 423, 424, 425, 321,
	305, 404, 306, 339, 307, 284, 313, 311, 314, 411,
	315, 286, 391, 429, 0, 334, 400, 364, 287, 363,
	392, 428, 427, 296, 454, 460, 461, 550, 0, 466,
	631, 632, 633, 475, 0, 0, 480, 481, 482, 484,
	485, 486, 487, 551, 568, 535, 505, 468, 559, 502,
	506, 507, 571, 0, 0, 0, 459, 353, 354, 0,
	332, 280, 281, 626, 318, 383, 573, 606, 607, 498,
	0, 560, 499, 508, 310, 532, 544, 543, 379, 458,
	0, 555, 558, 488, 625, 0, 552, 567, 629, 566,
	622, 389, 0, 408, 564, 511, 0, 556, 530, 0,
	557, 526, 561, 0, 500, 0, 415, 440, 452, 469,
	472, 501, 586, 587, 588, 285, 471, 590, 591, 592,
	593, 594, 595, 1009, 589, 443, 533, 510, 536, 451,
	513, 512, 0, 0, 547, 1012, 548, 549, 373, 374,
	375, 376, 336, 574, 1007, 470, 398, 0, 534, 0,
	0, 0, 0, 0, 0, 0, 0, 539, 540, 537,
	634, 0, 597, 598, 0, 0, 464, 465, 331, 338,
	483, 340, 302, 388, 333, 449, 347, 0, 476, 541,
	477, 600, 603, 601, 602, 1019, 1005, 1015, 1006, 348,
	358, 401, 448, 386, 406, 300, 439, 413, 1016, 527,
	554, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 581, 580,
	579, 578, 577, 576, 575, 0, 0, 524, 426, 312,
	274, 308, 309, 316, 623, 620, 430, 624, 0, 282,
	504, 356, 0, 397, 330, 569, 570, 0, 0, 230,
	231, 232, 233, 234, 235, 236, 237, 275, 238, 239,
	240, 241, 242, 243, 244, 247, 248, 249, 250, 251,
	252, 253, 254, 572, 245, 246, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	0, 0, 0, 276, 277, 278, 279, 0, 0, 270,
	271, 272, 273, 0, 0, 0, 455, 456, 457, 479,
	0, 441, 503, 621, 0, 0, 0, 0, 0, 0,
	0, 553, 565, 599, 0, 609, 610, 612, 614, 613,
	616, 418, 195, 0, 627, 494, 495, 628, 605, 0,
	0, 0, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	131, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1990, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 158, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 1017, 1018, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1021, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 992, 445,
	292, 991, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 1019, 2010, 1015, 2011, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 1016, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 2869, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 2872,
	0, 0, 2871, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 1495, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 1493, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 1489, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	1493, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3905, 0, 217, 821, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 1493, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 2401, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 942, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 1493, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1701, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 2434, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	2436, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 2057, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 2058, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 3074, 3076, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 2456, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 1493, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 641, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 640, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 821, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3884, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 3660, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 3791, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3503, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3675, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 3592, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 3108, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3126,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1990, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 3313, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 1493, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 2436, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 2791, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 2553, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 2512, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 2292, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 1847,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 1975, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 1493, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 1880, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 437, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 1522,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	641, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 437, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 651,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 317, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 399, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 596, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 942, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 0, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 385, 0,
	509, 542, 531, 615, 497, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 325, 0, 0, 355, 546,
	528, 538, 529, 514, 515, 516, 523, 335, 517, 518,
	519, 489, 520, 490, 521, 522, 0, 545, 496, 414,
	369, 563, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 217, 0, 0, 0, 0, 0, 0, 298, 218,
	491, 611, 493, 492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 301, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 288, 420, 437, 299, 410,
	450, 304, 417, 294, 384, 407, 0, 0, 290, 435,
	416, 366, 345, 346, 289, 0, 402, 323, 337, 320,
	382, 0, 434, 462, 319, 453, 0, 445, 292, 0,
	444, 381, 431, 436, 367, 361, 0, 291, 433, 365,
	360, 349, 327, 478, 350, 351, 341, 393, 359, 394,
	342, 371, 370, 372, 0, 0, 0, 0, 0, 473,
	474, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 608, 0, 447, 0,
	0, 0, 0, 0, 0, 419, 0, 0, 352, 0,
	0, 0, 463, 0, 405, 387, 630, 0, 0, 403,
	357, 432, 395, 438, 421, 446, 399, 396, 283, 422,
	322, 368, 295, 297, 317, 324, 326, 328, 329, 377,
	378, 390, 409, 423, 424, 425, 321, 305, 404, 306,
	339, 307, 284, 313, 311, 314, 411, 315, 286, 391,
	429, 0, 334, 400, 364, 287, 363, 392, 428, 427,
	296, 454, 460, 461, 550, 0, 466, 631, 632, 633,
	475, 0, 0, 480, 481, 482, 484, 485, 486, 487,
	551, 568, 535, 505, 468, 559, 502, 506, 507, 571,
	0, 0, 0, 459, 353, 354, 0, 332, 280, 281,
	626, 318, 383, 573, 606, 607, 498, 0, 560, 499,
	508, 310, 532, 544, 543, 379, 458, 0, 555, 558,
	488, 625, 0, 552, 567, 629, 566, 622, 389, 0,
	408, 564, 511, 0, 556, 530, 0, 557, 526, 561,
	0, 500, 0, 415, 440, 452, 469, 472, 501, 586,
	587, 588, 285, 471, 590, 591, 592, 593, 594, 595,
	596, 589, 443, 533, 510, 536, 451, 513, 512, 0,
	0, 547, 467, 548, 549, 373, 374, 375, 376, 336,
	574, 303, 470, 398, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 540, 537, 634, 0, 597,
	598, 0, 0, 464, 465, 331, 338, 483, 340, 302,
	388, 333, 449, 347, 0, 476, 541, 477, 600, 603,
	601, 602, 380, 343, 344, 412, 348, 358, 401, 448,
	386, 406, 300, 439, 413, 362, 527, 554, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 269,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 582, 581, 580, 579, 578, 577,
	576, 575, 0, 0, 524, 426, 312, 274, 308, 309,
	316, 623, 620, 430, 624, 0, 282, 504, 356, 0,
	397, 330, 569, 570, 0, 0, 230, 231, 232, 233,
	234, 235, 236, 237, 275, 238, 239, 240, 241, 242,
	243, 244, 247, 248, 249, 250, 251, 252, 253, 254,
	572, 245, 246, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 265, 266, 267, 268, 0, 0, 0,
	276, 277, 278, 279, 0, 0, 270, 271, 272, 273,
	0, 0, 0, 455, 456, 457, 479, 0, 441, 503,
	621, 0, 0, 0, 0, 0, 0, 0, 553, 565,
	599, 0, 609, 610, 612, 614, 613, 616, 418, 0,
	0, 627, 494, 495, 628, 605, 385, 0, 509, 542,
	531, 615, 497, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 325, 0, 0, 355, 546, 528, 538,
	529, 514, 515, 516, 523, 335, 517, 518, 519, 489,
	520, 490, 521, 522, 0, 545, 496, 414, 369, 563,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 0, 0, 0, 0, 0, 298, 218, 491, 611,
	493, 492, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 288, 420, 1472, 299, 410, 450, 304,
	417, 294, 384, 407, 0, 0, 290, 435, 416, 366,
	345, 346, 289, 0, 402, 323, 337, 320, 382, 0,
	434, 462, 319, 453, 0, 445, 292, 0, 444, 381,
	431, 436, 367, 361, 0, 291, 433, 365, 360, 349,
	327, 478, 350, 351, 341, 393, 359, 394, 342, 371,
	370, 372, 0, 0, 0, 0, 0, 473, 474, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 604, 0, 0, 608, 0, 447, 0, 0, 0,
	0, 0, 0, 419, 0, 0, 352, 0, 0, 0,
	463, 0, 405, 387, 630, 0, 0, 403, 357, 432,
	395, 438, 421, 446, 399, 396, 283, 422, 322, 368,
	295, 297, 317, 324, 326, 328, 329, 377, 378, 390,
	409, 423, 424, 425, 321, 305, 404, 306, 339, 307,
	284, 313, 311, 314, 411, 315, 286, 391, 429, 0,
	334, 400, 364, 287, 363, 392, 428, 427, 296, 454,
	460, 461, 550, 0, 466, 631, 632, 633, 475, 0,
	0, 480, 481, 482, 484, 485, 486, 487, 551, 568,
	535, 505, 468, 559, 502, 506, 507, 571, 0, 0,
	0, 459, 353, 354, 0, 332, 280, 281, 626, 318,
	383, 573, 606, 607, 498, 0, 560, 499, 508, 310,
	532, 544, 543, 379, 458, 0, 555, 558, 488, 625,
	0, 552, 567, 629, 566, 622, 389, 0, 408, 564,
	511, 0, 556, 530, 0, 557, 526, 561, 0, 500,
	0, 415, 440, 452, 469, 472, 501, 586, 587, 588,
	285, 471, 590, 591, 592, 593, 594, 595, 596, 589,
	443, 533, 510, 536, 451, 513, 512, 0, 0, 547,
	467, 548, 549, 373, 374, 375, 376, 336, 574, 303,
	470, 398, 0, 534, 0, 0, 0, 0, 0, 0,
	0, 0, 539, 540, 537, 634, 0, 597, 598, 0,
	0, 464, 465, 331, 338, 483, 340, 302, 388, 333,
	449, 347, 0, 476, 541, 477, 600, 603, 601, 602,
	380, 343, 344, 412, 348, 358, 401, 448, 386, 406,
	300, 439, 413, 362, 527, 554, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 269, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 582, 581, 580, 579, 578, 577, 576, 575,
	0, 0, 524, 426, 312, 274, 308, 309, 316, 623,
	620, 430, 624, 0, 282, 504, 356, 0, 397, 330,
	569, 570, 0, 0, 230, 231, 232, 233, 234, 235,
	236, 237, 275, 238, 239, 240, 241, 242, 243, 244,
	247, 248, 249, 250, 251, 252, 253, 254, 572, 245,
	246, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 265, 266, 267, 268, 0, 0, 0, 276, 277,
	278, 279, 0, 0, 270, 271, 272, 273, 0, 0,
	0, 455, 456, 457, 479, 0, 441, 503, 621, 0,
	0, 0, 0, 0, 0, 0, 553, 565, 599, 0,
	609, 610, 612, 614, 613, 616, 418, 0, 0, 627,
	494, 495, 628, 605, 385, 0, 509, 542, 531, 615,
	497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 325, 0, 0, 355, 546, 528, 538, 529, 514,
	515, 516, 523, 335, 517, 518, 519, 489, 520, 490,
	521, 522, 0, 545, 496, 414, 369, 563, 562, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 217, 0, 0,
	0, 0, 0, 0, 298, 218, 491, 611, 493, 492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 420, 1470, 299, 410, 450, 304, 417, 294,
	384, 407, 0, 0, 290, 435, 416, 366, 345, 346,
	289, 0, 402, 323, 337, 320, 382, 0, 434, 462,
	319, 453, 0, 445, 292, 0, 444, 381, 431, 436,
	367, 361, 0, 291, 433, 365, 360, 349, 327, 478,
	350, 351, 341, 393, 359, 394, 342, 371, 370, 372,
	0, 0, 0, 0, 0, 473, 474, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 604,
	0, 0, 608, 0, 447, 0, 0, 0, 0, 0,
	0, 419, 0, 0, 352, 0, 0, 0, 463, 0,
	405, 387, 630, 0, 0, 403, 357, 432, 395, 438,
	421, 446, 399, 396, 283, 422, 322, 368, 295, 297,
	317, 324, 326, 328, 329, 377, 378, 390, 409, 423,
	424, 425, 321, 305, 404, 306, 339, 307, 284, 313,
	311, 314, 411, 315, 286, 391, 429, 0, 334, 400,
	364, 287, 363, 392, 428, 427, 296, 454, 460, 461,
	550, 0, 466, 631, 632, 633, 475, 0, 0, 480,
	481, 482, 484, 485, 486, 487, 551, 568, 535, 505,
	468, 559, 502, 506, 507, 571, 0, 0, 0, 459,
	353, 354, 0, 332, 280, 281, 626, 318, 383, 573,
	606, 607, 498, 0, 560, 499, 508, 310, 532, 544,
	543, 379, 458, 0, 555, 558, 488, 625, 0, 552,
	567, 629, 566, 622, 389, 0, 408, 564, 511, 0,
	556, 530, 0, 557, 526, 561, 0, 500, 0, 415,
	440, 452, 469, 472, 501, 586, 587, 588, 285, 471,
	590, 591, 592, 593, 594, 595, 596, 589, 443, 533,
	510, 536, 451, 513, 512, 0, 0, 547, 467, 548,
	549, 373, 374, 375, 376, 336, 574, 303, 470, 398,
	0, 534, 0, 0, 0, 0, 0, 0, 0, 0,
	539, 540, 537, 634, 0, 597, 598, 0, 0, 464,
	465, 331, 338, 483, 340, 302, 388, 333, 449, 347,
	0, 476, 541, 477, 600, 603, 601, 602, 380, 343,
	344, 412, 348, 358, 401, 448, 386, 406, 300, 439,
	413, 362, 527, 554, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	582, 581, 580, 579, 578, 577, 576, 575, 0, 0,
	524, 426, 312, 274, 308, 309, 316, 623, 620, 430,
	624, 0, 282, 504, 356, 0, 397, 330, 569, 570,
	0, 0, 230, 231, 232, 233, 234, 235, 236, 237,
	275, 238, 239, 240, 241, 242, 243, 244, 247, 248,
	249, 250, 251, 252, 253, 254, 572, 245, 246, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 265,
	266, 267, 268, 0, 0, 0, 276, 277, 278, 279,
	0, 0, 270, 271, 272, 273, 0, 0, 0, 455,
	456, 457, 479, 0, 441, 503, 621, 0, 0, 0,
	0, 0, 0, 0, 553, 565, 599, 0, 609, 610,
	612, 614, 613, 616, 418, 0, 0, 627, 494, 495,
	628, 605, 385, 0, 509, 542, 531, 615, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 325,
	0, 0, 355, 546, 528, 538, 529, 514, 515, 516,
	523, 335, 517, 518, 519, 489, 520, 490, 521, 522,
	0, 545, 496, 414, 369, 563, 562, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 217, 0, 0, 0, 0,
	0, 0, 298, 218, 491, 611, 493, 492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 301, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 288,
	420, 437, 299, 410, 450, 304, 417, 294, 384, 407,
	0, 0, 290, 435, 416, 366, 345, 346, 289, 0,
	402, 323, 337, 320, 382, 0, 434, 462, 319, 453,
	0, 445, 292, 0, 444, 381, 431, 436, 367, 361,
	0, 291, 433, 365, 360, 349, 327, 478, 350, 351,
	341, 393, 359, 394, 342, 371, 370, 372, 0, 0,
	0, 0, 0, 473, 474, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 604, 0, 0,
	608, 0, 447, 0, 0, 0, 0, 0, 0, 419,
	0, 0, 352, 0, 0, 0, 463, 0, 405, 387,
	630, 0, 0, 403, 357, 432, 395, 438, 421, 446,
	399, 396, 283, 422, 322, 368, 295, 297, 718, 324,
	326, 328, 329, 377, 378, 390, 409, 423, 424, 425,
	321, 305, 404, 306, 339, 307, 284, 313, 311, 314,
	411, 315, 286, 391, 429, 0, 334, 400, 364, 287,
	363, 392, 428, 427, 296, 454, 460, 461, 550, 0,
	466, 631, 632, 633, 475, 0, 0, 480, 481, 482,
	484, 485, 486, 487, 551, 568, 535, 505, 468, 559,
	502, 506, 507, 571, 0, 0, 0, 459, 353, 354,
	0, 332, 280, 281, 626, 318, 383, 573, 606, 607,
	498, 0, 560, 499, 508, 310, 532, 544, 543, 379,
	458, 0, 555, 558, 488, 625, 0, 552, 567, 629,
	566, 622, 389, 0, 408, 564, 511, 0, 556, 530,
	0, 557, 526, 561, 0, 500, 0, 415, 440, 452,
	469, 472, 501, 586, 587, 588, 285, 471, 590, 591,
	592, 593, 594, 595, 596, 589, 443, 533, 510, 536,
	451, 513, 512, 0, 0, 547, 467, 548, 549, 373,
	374, 375, 376, 336, 574, 303, 470, 398, 0, 534,
	0, 0, 0, 0, 0, 0, 0, 0, 539, 540,
	537, 634, 0, 597, 598, 0, 0, 464, 465, 331,
	338, 483, 340, 302, 388, 333, 449, 347, 0, 476,
	541, 477, 600, 603, 601, 602, 380, 343, 344, 412,
	348, 358, 401, 448, 386, 406, 300, 439, 413, 362,
	527, 554, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 582, 581,
	580, 579, 578, 577, 576, 575, 0, 0, 524, 426,
	312, 274, 308, 309, 316, 623, 620, 430, 624, 0,
	282, 504, 356, 0, 397, 330, 569, 570, 0, 0,
	230, 231, 232, 233, 234, 235, 236, 237, 275, 238,
	239, 240, 241, 242, 243, 244, 247, 248, 249, 250,
	251, 252, 253, 254, 572, 245, 246, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 265, 266, 267,
	268, 0, 0, 0, 276, 277, 278, 279, 0, 0,
	270, 271, 272, 273, 0, 0, 0, 455, 456, 457,
	479, 0, 441, 503, 621, 0, 0, 0, 0, 0,
	0, 0, 553, 565, 599, 0, 609, 610, 612, 614,
	613, 616, 418, 0, 0, 627, 494, 495, 628, 605,
	385, 0, 509, 542, 531, 615, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 325, 0, 0,
	355, 546, 528, 538, 529, 514, 515, 516, 523, 335,
	517, 518, 519, 489, 520, 490, 521, 522, 0, 545,
	496, 414, 369, 563, 562, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 0, 0,
	298, 218, 491, 611, 493, 492, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 301, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 288, 420, 437,
	299, 410, 450, 304, 417, 294, 384, 407, 0, 0,
	290, 435, 416, 366, 345, 346, 289, 0, 402, 323,
	337, 320, 382, 0, 434, 462, 319, 453, 0, 445,
	292, 0, 444, 381, 431, 436, 367, 361, 0, 291,
	433, 365, 360, 349, 327, 478, 350, 351, 341, 393,
	359, 394, 342, 371, 370, 372, 0, 0, 0, 0,
	0, 473, 474, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 604, 0, 0, 608, 0,
	447, 0, 0, 0, 0, 0, 0, 419, 0, 0,
	352, 0, 0, 0, 463, 0, 405, 387, 630, 0,
	0, 403, 357, 432, 395, 438, 421, 446, 675, 396,
	283, 422, 322, 368, 295, 297, 317, 324, 326, 328,
	329, 377, 378, 390, 409, 423, 424, 425, 321, 305,
	404, 306, 339, 307, 284, 313, 311, 314, 411, 315,
	286, 391, 429, 0, 334, 400, 364, 287, 363, 392,
	428, 427, 296, 454, 460, 461, 550, 0, 466, 631,
	632, 633, 475, 0, 0, 480, 481, 482, 484, 485,
	486, 487, 551, 568, 535, 505, 468, 559, 502, 506,
	507, 571, 0, 0, 0, 459, 353, 354, 0, 332,
	280, 281, 626, 318, 383, 573, 606, 607, 498, 0,
	560, 499, 508, 310, 532, 544, 543, 379, 458, 0,
	555, 558, 488, 625, 0, 552, 567, 629, 566, 622,
	389, 0, 408, 564, 511, 0, 556, 530, 0, 557,
	526, 561, 0, 500, 0, 415, 440, 452, 469, 472,
	501, 586, 587, 588, 285, 471, 590, 591, 592, 593,
	594, 595, 676, 589, 443, 533, 510, 536, 451, 513,
	512, 0, 0, 547, 467, 548, 549, 373, 374, 375,
	376, 336, 574, 303, 470, 398, 0, 534, 0, 0,
	0, 0, 0, 0, 0, 0, 539, 540, 537, 634,
	0, 597, 598, 0, 0, 464, 465, 331, 338, 483,
	340, 302, 388, 333, 449, 347, 0, 476, 541, 477,
	600, 603, 601, 602, 380, 343, 344, 412, 348, 358,
	401, 448, 386, 406, 300, 439, 413, 362, 527, 554,
	0, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 269, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 582, 581, 580, 579,
	578, 577, 576, 575, 0, 0, 524, 426, 312, 274,
	308, 309, 316, 623, 620, 430, 624, 0, 282, 504,
	356, 0, 397, 330, 569, 570, 0, 0, 230, 231,
	232, 233, 234, 235, 236, 237, 275, 238, 239, 240,
	241, 242, 243, 244, 247, 248, 249, 250, 251, 252,
	253, 254, 572, 245, 246, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 265, 266, 267, 268, 0,
	0, 0, 276, 277, 278, 279, 0, 0, 270, 271,
	272, 273, 0, 0, 0, 455, 456, 457, 479, 0,
	441, 503, 621, 0, 0, 0, 0, 0, 1080, 0,
	553, 565, 599, 0, 609, 610, 612, 614, 613, 616,
	418, 0, 0, 627, 494, 495, 628, 605, 1103, 1107,
	1109, 1111, 1113, 1114, 1116, 0, 1121, 1117, 1118, 1119,
	1120, 0, 1098, 1099, 1100, 1101, 1078, 1079, 1104, 0,
	1081, 0, 1083, 1084, 1085, 1086, 1082, 1087, 1088, 1089,
	1090, 1091, 1094, 1096, 1092, 1093, 1102, 697, 696, 703,
	693, 0, 0, 0, 1106, 1108, 1110, 1112, 1115, 700,
	701, 1962, 702, 706, 0, 0, 687, 0, 195, 0,
	0, 0, 0, 0, 0, 0, 711, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3512, 0, 1097, 0, 0, 0, 1965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1962, 0, 0, 0, 0,
	715, 0, 0, 717, 0, 0, 0, 0, 716, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 191, 0,
	0, 1734, 0, 0, 0, 0, 0, 0, 1939, 0,
	1965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3681, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1955, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 688, 690, 689, 0,
	1955, 0, 0, 0, 0, 0, 695, 0, 0, 0,
	0, 1962, 1212, 1213, 1214, 1211, 0, 0, 699, 0,
	0, 0, 0, 0, 0, 714, 0, 1943, 0, 0,
	0, 0, 692, 0, 0, 0, 0, 1730, 1949, 0,
	0, 0, 0, 0, 1727, 0, 1965, 0, 1729, 1726,
	1728, 1732, 1733, 0, 0, 0, 1731, 0, 1937, 1971,
	0, 0, 1938, 1940, 1942, 0, 1944, 1945, 1946, 1950,
	1951, 1952, 1954, 1957, 1958, 1959, 1962, 0, 0, 0,
	0, 1943, 0, 1947, 1956, 1948, 0, 0, 0, 0,
	0, 1734, 1949, 0, 0, 0, 0, 0, 1939, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 1965, 1937, 1971, 0, 0, 1938, 1940, 1942, 1963,
	1944, 1945, 1946, 1950, 1951, 1952, 1954, 1957, 1958, 1959,
	0, 0, 0, 0, 0, 0, 0, 1947, 1956, 1948,
	0, 0, 0, 0, 694, 698, 704, 0, 705, 707,
	0, 0, 708, 709, 710, 0, 0, 712, 713, 0,
	0, 0, 3652, 1939, 1960, 0, 1955, 0, 0, 0,
	0, 0, 0, 1963, 0, 0, 0, 0, 0, 0,
	0, 1936, 0, 0, 0, 0, 0, 0, 1935, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1737, 1738, 1739, 1740, 1741, 1742, 1735, 1736, 0, 0,
	0, 0, 1953, 0, 0, 0, 0, 0, 1960, 0,
	0, 1941, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1955, 0, 0, 0, 1936, 0, 0, 0, 0,
	0, 0, 1935, 0, 0, 0, 0, 1943, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1730, 1949, 0,
	0, 0, 0, 0, 1727, 0, 1953, 0, 1729, 1726,
	1728, 1732, 1733, 0, 0, 1941, 1731, 0, 1937, 1971,
	0, 0, 1938, 1940, 1942, 0, 1944, 1945, 1946, 1950,
	1951, 1952, 1954, 1957, 1958, 1959, 0, 0, 0, 0,
	0, 0, 0, 1947, 1956, 1948, 0, 0, 0, 0,
	0, 0, 1943, 691, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1949, 0, 0, 0, 0, 0, 3516,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1963,
	0, 0, 0, 1937, 1971, 0, 0, 1938, 1940, 1942,
	0, 1944, 1945, 1946, 1950, 1951, 1952, 1954, 1957, 1958,
	1959, 0, 0, 0, 0, 0, 0, 0, 1947, 1956,
	1948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3520, 1960, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1936, 0, 0, 1963, 0, 0, 0, 1935, 1715,
	1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
	1737, 1738, 1739, 1740, 1741, 1742, 1735, 1736, 0, 0,
	0, 0, 1953, 0, 0, 0, 0, 0, 0, 0,
	0, 1941, 0, 0, 0, 0, 0, 0, 0, 1960,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1936, 0, 0, 0,
	0, 0, 0, 1935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1953, 0, 0,
	0, 0, 0, 0, 0, 0, 1941, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3520,
}

var yyPact = [...]int{
	453, -1000, -1000, -1000, -311, 13951, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47345, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 437, 47345,
	-307, 29423, 45491, -1000, -1000, 2651, -1000, 46109, 15818, 47345,
	525, 510, 47345, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 919, -1000, 49817, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 841, 4218, 49199,
	10841, -216, -1000, 1672, -33, 2567, 473, -195, -197, 1076,
	1100, 1173, 1173, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 237, 977, 46727, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3907, 234, 918, 977, 20768, 128, 122,
	1672, 487, -88, 187, -1000, 1295, 3894, 205, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10841,
	10841, 13951, -353, 13951, 10841, 47345, 47345, -1000, -1000, -1000,
	-1000, -307, 46109, 841, 4218, 10841, 2567, 473, -195, -197,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -88, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 122, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 4934, -1000, 1648,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2306, 3006, 1647, 2566, 790,
	45491, 47345, -1000, 154, 790, -1000, -1000, -1000, 1672, 3377,
	-1000, 47345, 47345, 211, 1917, -1000, 406, 430, 440, 320,
	1645, -1000, -1000, -1000, -1000, -1000, -1000, 692, 3352, -1000,
	47345, 47345, 3019, 47345, -1000, 2295, 742, -1000, 50484, 3171,
	1433, 948, 3037, -1000, -1000, 3005, -1000, 334, 362, 329,
	463, 429, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 360,
	-1000, 3241, -1000, -1000, 321, -1000, -1000, 310, -1000, -1000,
	-1000, 101, -1000, -1000, -1000, -1000, -1000, -1000, 4, -1000,
	-1000, 1180, 2392, 10841, 1902, -1000, 2813, 1660, -1000, -1000,
	-1000, 6494, 12701, 12701, 12701, 12701, 47345, -1000, -1000, 2837,
	10841, 3003, 3002, 3000, 2999, -1000, -1000, -1000, -1000, -1000,
	-1000, 1644, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2056, -1000, -1000, -1000, 13321, -1000, 2988, 2987, 2986,
	2985, 2984, 2982, 2977, 2976, 2974, 2973, 2971, 2970, 2968,
	2967, 2736, 15190, 2962, 2565, 2564, 2961, 2960, 2959, 2563,
	2954, 2952, 2948, 2736, 2736, 2947, 2945, 2944, 2942, 2941,
	2931, 2925, 2924, 2923, 2917, 2916, 2915, 2913, 2911, 2910,
	2907, 2906, 2905, 2904, 2903, 2901, 2894, 2884, 2866, 2861,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1517, -1000, 2860, 3364, 2800, -1000, 3269,
	3267, 3221, 3217, -261, 2848, 2198, -1000, -1000, 110, 3351,
	47345, -282, 47345, 401, -100, -102, -103, -1000, -58, -1000,
	-1000, 1129, -1000, 1039, -1000, 837, 837, 837, 47345, 47345,
	197, 893, 837, 837, 837, 837, 837, 891, 837, 3289,
	917, 903, 902, 901, 837, -46, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1915, 1913, 3098, 1016, -1000, -1000, -1000,
	-1000, 1558, 47345, -1000, 2780, 401, 1731, 1731, 3331, 3331,
	3288, 753, 750, 745, 1731, 597, -1000, 1825, 1825, 1825,
	1825, 1731, 477, 741, 3293, 3293, 121, 1825, 70, 1731,
	1731, 70, 1731, 1731, -1000, 1887, 263, -270, -1000, -1000,
	-1000, -1000, 1825, 1825, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3235, 3233, 841, 841, 47345, 841, 210, 47345, 841,
	841, 841, 47345, 856, 56, 48581, 47963, 2260, 2295, 734,
	730, 1562, 1972, -1000, 1847, 47345, 47345, 1847, 1847, 23861,
	23243, -1000, 47345, -1000, 3364, 2800, 2732, 1488, 2731, 2800,
	-104, 401, 841, 841, 841, 841, 841, 303, 841, 841,
	841, 841, 841, 47345, 47345, 44873, 841, 841, 841, 841,
	8974, 8974, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 13951, 2095, 2081, 202, -8, -302, 262, -1000, -1000,
	47345, 3148, 293, -1000, -1000, -1000, 2746, -1000, 2773, 2773,
	2773, 2773, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2773, 2773, 2779, 2846, -1000, -1000, 2772, 2772,
	2772, 2746, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2775, 2775, 2778,
	2778, 2775, 47345, -121, -1000, -1000, 10841, 47345, 3162, 480,
	2844, 790, -1000, -1000, 47345, 180, 484, 3364, 3160, 3293,
	3324, -1000, -1000, 1642, 2196, 2562, -1000, 320, -1000, 380,
	320, 1690, -1000, 1152, -1000, -1000, -1000, -1000, -1000, 47345,
	4, 436, -1000, -1000, 2535, 2842, -1000, 629, 1408, 1448,
	-1000, 306, 4692, 38075, 2295, 38075, 47345, -1000, -1000, -1000,
	-1000, -1000, -1000, 92, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 311, -1000,
	10841, 10841, 10841, 10841, 10841, -1000, 851, 12081, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 12701, 12701, 12701, 12701, 12701,
	12701, 12701, 12701, 12701, 12701, 12701, 12701, 2835, 1881, 12701,
	12701, 12701, 12701, 26333, 1488, 3109, 1559, 305, 1660, 1660,
	1660, 1660, 10841, -1000, 1932, 2392, 10841, 10841, 10841, 10841,
	47345, -1000, -1000, 50621, 10841, 10841, 50401, 10841, 3212, 10841,
	10841, 10841, 2726, 5253, 47345, 10841, -1000, 2721, 2719, -1000,
	-1000, 2049, 10841, -1000, -1000, 10841, -1000, -1000, 10841, 12701,
	10841, -1000, 10841, 10841, 10841, -1000, -1000, 746, 3212, 3212,
	3212, 1837, 10841, 10841, 3212, 3212, 3212, 1799, 3212, 3212,
	3212, 3212, 3212, 3212, 3212, 3212, 3212, 3212, 2718, 2716,
	2712, 10221, 3293, -216, -1000, 8354, 3160, 3293, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -264, 2841,
	47345, 2554, 2546, -324, 178, 448, 47345, 1121, -1000, -1000,
	47345, 2195, 47345, 2192, 93, 1071, 1045, 1049, -1000, 47345,
	1941, 47345, 47345, 3207, -1000, 2839, 47345, 837, 837, 837,
	-1000, 43019, 38075, 47345, 47345, 2295, 47345, 47345, 47345, 837,
	837, 837, 837, 47345, -1000, 3115, 38075, 3110, 856, -1000,
	47345, 1558, 3202, 47345, -1000, 3331, 12701, 12701, -1000, -1000,
	10841, -1000, 44255, 1825, 1731, 1731, -1000, -1000, 47345, -1000,
	-1000, -1000, 1825, 47345, 1825, 1825, 3331, 1825, -1000, -1000,
	-1000, 1731, 1731, -1000, -1000, 10841, -1000, -1000, 1825, 1825,
	-1000, -1000, 3331, 47345, 84, 3331, 3331, 125, -1000, -1000,
	-1000, 1731, 47345, 47345, 837, 47345, -1000, 47345, 47345, -1000,
	-1000, 47345, 47345, 4385, 47345, 43019, 43637, 3231, -1000, 38075,
	47345, 47345, 886, 35603, -1000, 1495, -1000, 23, -1000, 91,
	56, 1847, 56, 1847, 885, -1000, 607, 646, 22007, 560,
	38075, 5873, -1000, -1000, 1847, 1847, 5873, 5873, 1664, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1556, -1000, 281, 3293,
	-1000, -1000, -1000, -1000, -1000, 2190, -1000, 47345, 43019, 38075,
	2295, 47345, 841, 47345, 47345, 47345, 47345, 47345, -1000, 2838,
	1621, -1000, 3169, 47345, 47345, 47345, 47345, 1418, -1000, -1000,
	18908, 1620, 1418, -1000, 1942, -1000, 10841, 13951, -239, 10841,
	13951, 13951, 10841, 13951, -1000, 10841, 275, -1000, -1000, -1000,
	-1000, 2189, -1000, 2187, -1000, -1000, -1000, -1000, -1000, 2543,
	2543, -1000, 2185, -1000, -1000, -1000, -1000, 2184, -1000, -1000,
	2181, -1000, -1000, -1000, -1000, -153, 2699, 1180, -1000, 2540,
	3036, -217, -1000, 20150, 47345, 47345, 480, -328, 1912, 1910,
	1898, -1000, -217, -1000, 19529, 47345, 3293, -1000, -221, 3160,
	10841, 47345, -1000, 3273, -1000, -1000, 320, -1000, 397, 424,
	-1000, -1000, -1000, -1000, -1000, -1000, 1612, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 419, -93, -94,
	1555, -1000, 47345, -1000, -1000, 306, 38075, 39929, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 251, -1000, -1000, 192, -1000,
	882, 244, 1681, -1000, -1000, 217, 212, 214, 945, 2392,
	-1000, 1969, 1969, 1973, -1000, 758, -1000, -1000, -1000, -1000,
	2837, -1000, -1000, -1000, 1926, 2025, -1000, 1861, 1861, 1670,
	1670, 1670, 1670, 1670, 1769, 1769, -1000, -1000, -1000, 6494,
	2835, 12701, 12701, 12701, 12701, 909, 909, 4037, 3840, -1000,
	-1000, -1000, -1000, 10841, 195, 1938, -1000, 10841, 2479, 1447,
	2373, 1211, 1611, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2698, 2697, 2355, 3350, 2695, 10841, -1000,
	-1000, 1679, 1678, 1671, -1000, 2257, 9601, -1000, -1000, -1000,
	2694, 1610, 2693, -1000, -1000, -1000, 2690, 1668, 1343, 2686,
	1790, 2685, 2684, 2683, 2680, 1554, 10841, 10841, 10841, 10841,
	2678, 1665, 1661, 10841, 10841, 10841, 10841, 2677, 10841, 10841,
	10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841, 129, 129,
	129, 1549, 1529, -1000, -1000, 1657, -1000, 2392, -1000, -1000,
	3160, -1000, 2834, 2179, 1509, -1000, -1000, -303, 2483, 47345,
	47345, 174, 47345, 2539, -283, 47345, -1000, -1000, 2529, -1000,
	-1000, -1000, 1063, 1027, 1119, 2527, 3167, 3265, 865, 47345,
	1186, 2830, 47345, 47345, 47345, 269, -1000, -1000, 1409, -1000,
	244, -13, 539, 1263, 3018, 3349, -126, 47345, 47345, 47345,
	47345, 3201, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42401, -1000, 2828, 1652, -1000, -1000, 1660, 1660, 2392, 3016,
	47345, 47345, 3331, 3331, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1825, 3331, 3331, 1325, 1731, 1825, -1000, -1000, 1825,
	-328, -1000, 1825, -1000, -328, 1605, -328, 47345, -1000, -1000,
	-1000, 3199, 2780, 1497, -1000, -1000, -1000, 3323, 1638, 822,
	822, 1032, 543, 3320, 17672, -1000, 1758, 1289, 881, 3128,
	332, -1000, 1758, -150, 795, 1758, 1758, 1758, 1758, 1758,
	1758, 1758, 688, 680, 1758, 1758, 1758, 1758, 1758, 1758,
	1758, 1758, 1758, 1758, 1758, 1094, 1758, 1758, 1758, 1758,
	1758, -1000, 1758, 2810, 505, -1000, -1000, -1000, -1000, -1000,
	-1000, 718, 626, 261, 3226, 367, -1000, 365, 1409, 3224,
	416, 47345, 3236, 1328, -1000, -1000, -1000, -1000, 26951, 26951,
	21389, 26951, -1000, 206, 56, 41, -1000, -1000, 1495, 5873,
	1495, 5873, 2176, -1000, -1000, 880, -1000, -1000, 1263, -1000,
	47345, 47345, -1000, -1000, 2809, 1897, -1000, -1000, 15190, -1000,
	5873, 5873, -1000, -1000, 28805, 47345, -1000, 2, -1000, 14,
	3160, -1000, 1197, -1000, -1000, 1493, 1263, 3035, 47345, 1197,
	1197, 1197, -1000, -1000, 16436, 47345, 47345, -1000, -1000, -1000,
	-1000, 3331, 8974, -1000, 35603, -1000, -1000, 41783, -1000, 41165,
	3331, 1922, -1000, 13951, 2068, 203, -1000, 258, -304, 201,
	1978, 200, 2392, -1000, -1000, 2674, 2673, 1650, -1000, 1625,
	2671, 1616, 1615, 2173, -1000, 63, -1000, 3151, 1310, -1000,
	2805, -1000, 1603, 3095, -1000, 1487, -1000, 1896, 1593, -1000,
	-1000, -1000, 10841, 40547, 10841, 1310, 1573, 3092, 1487, 3160,
	2526, -1000, 1459, -1000, 2118, 1601, 209, -1000, -1000, -1000,
	47345, 841, 2535, 1561, 39929, 1373, -1000, 875, 1600, 1598,
	-1000, 38075, 323, 38075, -1000, 38075, -1000, -1000, 388, -1000,
	47345, 3156, -1000, -1000, -1000, 2483, 1892, -326, 47345, -1000,
	-1000, -1000, -1000, -1000, 1557, -1000, 909, 909, 4037, 3355,
	-1000, 12701, -1000, 12701, 3071, -1000, 1828, -1000, 10841, 2040,
	4836, 10841, 4836, 1542, 25097, 47345, -1000, -1000, 10841, 10841,
	-1000, 3028, -1000, -1000, -1000, -1000, 10841, 10841, 2315, -1000,
	47345, -1000, -1000, -1000, -1000, 25097, -1000, 12701, -1000, -1000,
	-1000, -1000, 10841, 1288, 1288, 2997, 1550, 129, 129, 129,
	2963, 2950, 2927, 1548, 129, 2908, 2891, 2858, 2852, 2826,
	2601, 2536, 2528, 2513, 2463, -1000, 2802, -1000, -1000, 2038,
	11461, 8354, -1000, -1000, 297, 1443, 2172, 2524, 130, -1000,
	1875, -1000, 2522, 47345, 47345, 1117, -1000, 47345, 3347, -1000,
	-1000, -1000, -1000, 1019, 2520, -1000, 421, 2090, 146, 294,
	2667, 1442, -1000, -1000, 47345, -1000, -1000, -1000, 16436, 2780,
	2801, 2780, 155, 1758, 653, 38075, 729, -1000, 47345, 2130,
	1872, 3033, 823, 3147, 47345, 2798, 389, 2796, 2792, 3193,
	481, 50285, 47345, 1297, -1000, 1597, 3894, -1000, 47345, -1000,
	2295, -1000, 1731, -1000, -1000, 3331, -1000, -1000, 10841, 10841,
	3331, 1731, 1731, -1000, 1825, -1000, 47345, -1000, -328, 481,
	50285, 3192, 4520, 588, 2734, -1000, 47345, -1000, -1000, -1000,
	826, -1000, 1036, 837, 47345, 2005, 1036, 2004, 2785, -1000,
	-1000, 47345, 47345, 47345, 47345, -1000, -1000, 47345, -1000, 47345,
	47345, 47345, 47345, 47345, 39311, -1000, 47345, 47345, -1000, 47345,
	2003, 47345, 1991, 3190, -1000, 1758, 1758, 981, -1000, -1000,
	614, -1000, 39311, 2171, 2169, 2168, 2167, 2518, 2517, 2514,
	1758, 1758, 2165, 2511, 38693, 2510, 1170, 2164, 2160, 2157,
	2161, 2505, 1041, -1000, 2500, 2158, 2156, 2137, 47345, 2783,
	2418, 503, -1000, -1000, 2090, 155, 1758, 363, 47345, 1868,
	1863, 653, 531, -30, 22625, -1000, -1000, 47345, 35603, 35603,
	35603, 35603, -1000, 3069, 3066, 3062, -1000, 3060, 3059, 3080,
	47345, 35603, 2780, -1000, 38693, -1000, -1000, -1000, 1488, 1536,
	3389, 1014, 10841, -1000, -1000, 19, 29, -1000, -1000, -1000,
	-1000, 38075, 2495, 560, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3249, 47345, 47345, 802, 2666, 1441, -1000, -1000, -1000,
	50285, 2773, 2773, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2773, 2773, 2779, -1000, -1000, 2772, 2772, 2772,
	2746, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2775, 2775, 2778, 2778, 2775, -1000, -1000, 3329, -1000,
	1419, -1000, -1000, 1582, -1000, 3329, 1944, -320, 13951, 1929,
	1733, -1000, 10841, 13951, 10841, -250, 344, -252, -1000, -1000,
	-1000, 2493, -1000, -1000, -1000, 2152, -1000, 2151, -1000, 184,
	193, 1989, -217, 8354, 483, 47345, -217, 47345, 8354, -1000,
	47345, 191, -346, -347, 172, 460, -217, 3249, 63, 10841,
	3120, -1000, -1000, 47345, 2150, -1000, -1000, -1000, 3339, 38075,
	2295, 1689, 37457, -1000, 319, -1000, 250, 578, 2491, -1000,
	899, 124, 2490, 2483, -1000, -1000, -1000, -1000, 12701, 1660,
	-1000, -1000, -1000, 2392, 10841, 2665, -1000, 1007, 1007, 2265,
	2663, 2657, -1000, 2773, 2773, -1000, 2746, 2772, 2746, 1007,
	1007, 2652, -1000, 2193, 2455, -1000, 2446, 2429, 10841, -1000,
	2649, 3972, 1421, -55, -185, 129, 129, -1000, -1000, -1000,
	-1000, 129, 129, 129, 129, -1000, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 791, -95, -274, -96,
	-275, -1000, 2648, 1416, -1000, -1000, -1000, -1000, -1000, 50401,
	1413, 552, 552, 2483, 2482, -1000, 874, 2476, 1060, 47345,
	2472, -291, -1000, 2467, -1000, -1000, 47345, 2466, -1000, 622,
	47345, 47345, 2465, 2461, 1186, 50285, 2640, 3183, 17054, 3181,
	2223, -1000, -1000, -1000, 28187, 584, -1000, -1000, -1000, 740,
	347, 2147, 567, -1000, 47345, 504, 3107, 1862, 2456, 47345,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3147, -1000, 904,
	468, 34367, 14572, -1000, 402, 47345, -1000, 17054, 17054, 402,
	474, 1803, -1000, 790, 1213, 138, 35603, 47345, -1000, 34985,
	2637, -1000, 1263, 3331, -1000, 2392, 2392, -328, 3331, 3331,
	1731, -1000, -1000, 474, -1000, 402, -1000, 1181, 18290, 574,
	515, 513, -1000, 679, -1000, -1000, 769, 3129, 50285, -1000,
	47345, -1000, 47345, -1000, 47345, 47345, 837, 10841, 3129, 47345,
	864, -1000, 1148, 465, 408, 793, 793, 1406, -1000, 3174,
	-1000, -1000, 1398, -1000, -1000, -1000, -1000, 47345, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 25097, 25097, 3220, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2447, 2445, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47345, 1534, -1000, 1826, 2138, 2443, 2223, 28187,
	1823, 1847, 2442, 2436, 584, 2130, 1820, 897, 47345, -1000,
	1207, 47345, 47345, -1000, 1400, -1000, 1817, 3010, 3027, 3010,
	-1000, -1000, -1000, -1000, -1000, 3058, -1000, 2873, -1000, -1000,
	1400, -1000, -1000, -1000, -1000, -1000, 1014, -1000, 3245, 1036,
	1036, 1036, 2633, -1000, -1000, -1000, 1373, 2632, -1000, -1000,
	-1000, 3359, -1000, -1000, -1000, -1000, -1000, -1000, 16436, 3146,
	3326, 3318, 36839, 3326, -1000, -320, 1802, -1000, 1998, 198,
	1966, 47345, -1000, -1000, -1000, 2610, 2608, -223, 204, 3316,
	3315, 1070, -1000, 2607, 1362, -217, -1000, -1000, 1310, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -217, -1000, 1310, -1000,
	184, -1000, -1000, 3132, -1000, -1000, 2295, -1000, 242, -1000,
	-1000, -1000, -1000, -1000, -1000, 231, -1000, 47345, -1000, 1350,
	120, -1000, 2392, -1000, -1000, -1000, -1000, -1000, 4836, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	10841, -1000, -1000, -1000, 2415, -1000, -1000, 10841, 2606, 2434,
	2604, 2433, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3364, -1000,
	3313, 1533, 2602, 2599, 1527, 2596, 2595, -1000, 10841, 2592,
	50401, 994, 2431, 994, -1000, -1000, 409, 27569, 47345, 3335,
	-1000, 47345, 2428, -1000, -1000, 2090, 617, 678, -1000, -1000,
	-1000, -1000, 930, 402, 2588, 1344, -1000, -1000, -1000, -1000,
	402, -1000, 2426, 218, -1000, -1000, -1000, -1000, 2422, 2421,
	2136, -1000, -1000, 2120, 1655, 253, -1000, -1000, -1000, -1000,
	-1000, -1000, 2199, 47345, 36221, 2210, 1801, -329, -1000, 2771,
	-1000, 1758, 1758, 1758, 47345, 1513, -1000, 1758, 1758, 2587,
	-1000, -1000, 2578, 2576, -127, 798, 1754, 1751, -1000, 2129,
	26951, 35603, 34985, 1313, -1000, 1566, -1000, -1000, -1000, -1000,
	-1000, -1000, 3331, 798, -1000, 571, 2125, 12701, 2769, 12701,
	2768, 592, 2767, 1507, -1000, 47345, -1000, -1000, 47345, 3956,
	2765, -1000, 2764, 3015, 550, 2763, 2760, 47345, 2381, -1000,
	3129, 47345, 757, 3140, -1000, -1000, -1000, 444, -1000, -1000,
	630, -1000, 47345, -1000, 47345, -1000, 1653, -1000, 25097, -1000,
	-1000, 1505, -1000, 2418, 2411, 50401, -1000, -1000, 218, 2402,
	5873, -1000, -1000, -1000, 3107, 2401, 2199, 47345, -1000, 47345,
	1207, 1207, 3364, 47345, 8354, -1000, -1000, 10841, 2758, -1000,
	10841, -1000, -1000, -1000, -1000, -1000, 2757, 3124, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1773, -1000, 10841, 10841, -1000,
	-1000, 830, 13951, -253, 341, -1000, -1000, -1000, -225, 2400,
	-1000, -1000, 3312, 2385, 2244, 47345, -1000, -1000, 1310, 1310,
	-223, -1000, -1000, 1263, -1000, -1000, 1092, 691, -1000, 2575,
	2346, -1000, 2326, 129, -1000, 129, -1000, 273, 10841, -1000,
	2382, -1000, -1000, -1000, 2362, -1000, -1000, 2280, -1000, 2574,
	-1000, 2361, -1000, -1000, 47345, -1000, 863, 1055, 2359, -331,
	2358, 2090, 2090, 47345, 50285, -130, -127, 17054, -130, -1000,
	-1000, 384, -1000, -1000, 383, -1000, -1000, 2106, 623, -1000,
	-1000, 2356, 585, -1000, 1207, -1000, 1784, 2017, 2298, 32513,
	25097, 26333, 2353, -1000, -1000, 34367, 1773, 1773, 50505, 311,
	50790, -1000, 2755, 1103, 1749, -1000, 2124, -1000, 2123, -1000,
	3331, 1313, 136, -1000, -1000, 1673, -1000, 1103, 2734, 3311,
	-1000, 3944, 47345, 3659, 47345, 2754, 1782, 12701, -1000, 769,
	3086, -1000, -1000, 3956, -1000, -1000, 2020, 12701, -1000, -1000,
	2345, 26333, 944, 1778, 1775, 957, 2751, -1000, 638, 3358,
	-1000, -1000, -1000, 978, 2750, -1000, 1985, 1976, -1000, 47345,
	-1000, 32513, 32513, 812, 812, 32513, 32513, 2749, 793, -1000,
	-1000, 12701, -1000, -1000, 1758, -1000, -1000, -1000, 1758, 1619,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2210, -1000, -1000,
	1197, -1000, 3293, -1000, -1000, 2392, 47345, 2392, 33749, -1000,
	3309, 3308, -1000, 2392, 1180, -1000, -320, 47345, 47345, -227,
	2117, -1000, 2344, 194, -1000, -1000, 1183, -225, -229, 125,
	25097, 1768, -1000, -1000, -1000, -1000, -1000, 2460, -1000, 667,
	-1000, -1000, -1000, 1180, 2451, 2386, -1000, -1000, -1000, -1000,
	396, 47345, -1000, 2276, -1000, 2336, 2335, 613, -112, -1000,
	-1000, 422, -1000, -1000, -1000, 590, 2231, -1000, -1000, 374,
	-1000, -1000, -1000, 2199, 2327, -1000, -1000, 118, -1000, 1766,
	1503, -1000, 2746, 10841, -1000, -1000, -1000, -1000, -1000, -1000,
	763, -1000, 402, 50725, -1000, 1289, 25715, -1000, 1092, 763,
	505, 31277, 659, 317, -1000, 2116, -1000, -1000, 3364, -1000,
	636, -1000, 579, -1000, 1485, -1000, 1466, 33131, 2113, 2646,
	-1000, 50559, 913, -1000, -1000, 4037, -1000, -1000, -1000, -1000,
	-1000, -1000, 2323, 2317, -1000, -1000, -1000, -1000, -1000, 2101,
	2745, 58, 3216, 2314, -1000, -1000, 2744, 1455, 1414, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1405, 1394,
	32513, -1000, -1000, 4037, 2091, 25097, 1758, -1000, -1000, 1392,
	1391, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2742, -1000,
	-1000, 3307, -227, -232, 2313, 168, 182, -1000, 2307, -1000,
	-1000, 985, -219, 143, 141, 139, -1000, -1000, -1000, 10841,
	-1000, -1000, 47345, 852, 117, -1000, 1763, -1000, -1000, 2090,
	47345, 634, -1000, -1000, -1000, -1000, 223, -1000, -1000, -1000,
	-1000, -1000, -1000, 2298, 2297, -1000, 32513, 3174, 2197, 557,
	3306, -1000, 50790, -1000, 1758, -1000, 557, 1390, -1000, 1758,
	1758, -1000, 498, -1000, 1730, -1000, 2085, -1000, 3293, -1000,
	495, -1000, 568, -1000, -1000, -1000, 1379, -1000, -1000, -1000,
	50559, 572, -1000, 759, 2737, -1000, -1000, 2360, 10841, 2736,
	1758, 2320, -108, 32513, 3012, 3011, 2965, 2654, 1363, -1000,
	-1000, 25097, -1000, -1000, 31895, 47345, 2244, -1000, -1000, 2285,
	-1000, 854, 188, 182, -1000, 3304, 177, 3303, 3297, 1159,
	1971, -1000, 164, 157, 152, -1000, -1000, -1000, -1000, -1000,
	392, -1000, 2276, 2270, 2267, 566, -1000, 318, -1000, -1000,
	-1000, 307, -1000, -1000, 3174, -1000, 3296, 588, -1000, 25097,
	-1000, -1000, 31277, 1773, 1773, -1000, -1000, 2063, -1000, -1000,
	-1000, -1000, 2060, -1000, -1000, -1000, 1327, -1000, 47345, 974,
	7734, -1000, 2127, -1000, 47345, -1000, 3024, -1000, 287, 1302,
	307, 812, 307, 812, 307, 812, 307, 812, 314, -1000,
	-1000, -1000, 1301, -1000, -1000, -1000, 2735, 2044, 204, 183,
	3295, -1000, 2244, 3270, 2244, 2244, -1000, 148, 985, -1000,
	-1000, -1000, 47345, -1000, -1000, -1000, 2258, -1000, -1000, -1000,
	-1000, 1758, 1758, 2251, 2248, 462, -1000, -1000, -1000, 30659,
	574, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 572, 50790,
	-1000, 7734, 1285, -1000, 2392, -1000, 793, -1000, -1000, 3023,
	3021, 3345, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47345, 3178, 24479, 175, -1000, -1000, -1000, 2247,
	-1000, 2244, -1000, -1000, 1732, -1000, -1000, -272, 2041, 2009,
	-1000, -1000, 47345, -1000, 47345, 571, -1000, 50790, 1262, -1000,
	7734, -1000, -1000, 3356, -1000, 3346, 951, 951, 307, 307,
	307, 307, -1000, -1000, 47345, -1000, 1195, -1000, -1000, -1000,
	1565, -1000, -1000, -1000, -1000, 2236, -1000, -1000, 2235, -1000,
	-1000, -1000, 1193, 2734, -1000, -1000, -1000, -1000, -1000, 2079,
	655, -1000, 1125, -1000, 1712, -1000, 30041, 47345, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47345, 7114, -1000, 1174, -1000,
	-1000, 2392, 47345, -1000,
}

var yyPgo = [...]int{
	0, 184, 3398, 257, 182, 4029, 86, 255, 243, 230,
	254, 4026, 4025, 4024, 4023, 3163, 3160, 4022, 4021, 4020,
	4019, 4018, 4017, 4014, 4013, 4012, 4010, 4008, 4007, 4006,
	4003, 4002, 4001, 4000, 3999, 3998, 3996, 3994, 3993, 3992,
	3991, 3972, 3971, 3964, 3957, 3956, 3952, 253, 3951, 3950,
	3946, 3945, 3944, 3943, 3939, 3935, 3933, 3931, 3930, 3922,
	3919, 3918, 3917, 3916, 3915, 3914, 3913, 3912, 3911, 3904,
	3902, 3901, 3900, 3896, 3894, 3889, 3888, 3884, 3882, 240,
	3881, 3880, 221, 3879, 3144, 3878, 3877, 3876, 3875, 3869,
	3866, 3864, 258, 3861, 3856, 3855, 3854, 3853, 3852, 3851,
	3848, 3847, 3846, 3845, 3844, 256, 3843, 3842, 3841, 3840,
	259, 3837, 246, 3836, 180, 151, 3835, 3834, 3833, 3829,
	3828, 3827, 3826, 3825, 3824, 3822, 3818, 3811, 3809, 244,
	202, 79, 3794, 48, 3793, 3792, 224, 3791, 158, 3790,
	154, 3789, 3787, 3786, 3783, 3782, 3781, 3777, 3774, 3773,
	3772, 3771, 3770, 3767, 3765, 3764, 3763, 3762, 3761, 3760,
	3759, 3757, 3756, 3755, 51, 3754, 271, 3752, 80, 3747,
	195, 3746, 82, 3745, 101, 144, 265, 1471, 267, 261,
	190, 187, 102, 3744, 328, 3742, 166, 239, 163, 31,
	3741, 147, 3739, 272, 49, 43, 260, 156, 65, 171,
	142, 3738, 218, 107, 115, 3737, 3736, 146, 3735, 242,
	185, 3734, 114, 3732, 3730, 3729, 3728, 3727, 201, 200,
	3726, 3724, 139, 3723, 3720, 94, 136, 3719, 83, 133,
	177, 124, 3715, 470, 132, 92, 3714, 134, 109, 3713,
	125, 3703, 3701, 3699, 3698, 189, 3696, 3695, 143, 76,
	3693, 3692, 3691, 77, 3688, 81, 3687, 38, 3685, 72,
	3683, 3682, 3681, 3678, 3675, 3672, 3670, 3669, 3667, 3664,
	3663, 3661, 58, 3660, 3659, 7, 11, 17, 3657, 26,
	3656, 179, 3654, 3653, 173, 3652, 3651, 99, 90, 3650,
	96, 176, 3649, 9, 25, 78, 3646, 3645, 225, 825,
	112, 157, 3644, 280, 3643, 3642, 3641, 168, 3640, 479,
	3639, 3637, 3636, 3635, 3633, 3632, 57, 3630, 1, 222,
	45, 3629, 137, 141, 3628, 42, 33, 3627, 52, 128,
	199, 145, 108, 3626, 3625, 3622, 16, 196, 104, 29,
	0, 106, 226, 167, 3621, 3619, 3618, 276, 3617, 237,
	241, 232, 250, 278, 206, 3616, 3613, 64, 3612, 169,
	30, 56, 138, 75, 22, 228, 3611, 1486, 8, 209,
	3610, 208, 3609, 288, 15, 118, 153, 3608, 3607, 35,
	269, 3605, 3604, 3602, 131, 3601, 3600, 122, 91, 3599,
	3598, 3597, 3596, 39, 3594, 37, 13, 3593, 135, 3592,
	251, 3590, 207, 150, 191, 186, 165, 227, 234, 89,
	85, 3588, 1851, 160, 110, 27, 3585, 229, 3584, 174,
	129, 3583, 105, 3582, 252, 273, 210, 3579, 193, 10,
	53, 40, 32, 47, 12, 263, 203, 3577, 3576, 23,
	55, 3572, 61, 3570, 19, 3566, 3565, 50, 3563, 59,
	5, 3562, 3561, 18, 20, 3560, 41, 213, 178, 126,
	98, 67, 3559, 3558, 54, 161, 3556, 148, 162, 164,
	3555, 84, 3554, 3553, 3552, 3550, 2926, 3549, 262, 3547,
	3546, 3544, 3543, 3542, 3541, 3540, 3537, 219, 3536, 127,
	44, 3534, 3533, 3532, 3531, 87, 149, 3530, 3528, 3525,
	3524, 34, 152, 3521, 14, 3520, 24, 21, 36, 3519,
	111, 3518, 3, 211, 3514, 3513, 4, 3512, 3510, 2,
	3509, 3505, 140, 3491, 100, 28, 175, 116, 3490, 3487,
	103, 215, 155, 3485, 3483, 88, 248, 204, 3481, 74,
	238, 270, 3479, 205, 3478, 3476, 3475, 3474, 3473, 3471,
	1225, 3470, 3468, 247, 71, 95, 3465, 233, 121, 3456,
	3452, 97, 172, 123, 120, 66, 93, 3447, 117, 197,
	3446, 198, 3445, 264, 3442, 3441, 113, 3434, 3424, 3422,
	3418, 194, 3417, 3416, 192, 231, 3413, 3411, 268, 3407,
	3406, 3405, 3402, 3400, 3391, 3389, 3382, 3380, 3376, 245,
	235, 3370,
}

//line mysql_sql.y:12454
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 594, 597, 597, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 120,
	120, 331, 331, 332, 332, 122, 327, 327, 326, 326,
	123, 124, 125, 573, 573, 126, 127, 156, 572, 572,
	158, 158, 158, 158, 158, 447, 121, 121, 121, 121,
	121, 121, 121, 162, 162, 162, 162, 162, 119, 579,
	579, 579, 580, 580, 116, 145, 144, 147, 147, 146,
	146, 143, 143, 139, 142, 142, 141, 141, 140, 135,
	137, 137, 136, 138, 138, 117, 105, 118, 521, 521,
	520, 520, 519, 519, 472, 472, 473, 473, 318, 318,
	318, 518, 518, 518, 517, 517, 516, 516, 515, 515,
	513, 513, 514, 512, 511, 511, 511, 509, 509, 509,
	505, 505, 507, 506, 506, 508, 500, 500, 503, 503,
	501, 501, 501, 501, 504, 499, 499, 499, 498, 498,
	104, 104, 104, 414, 414, 103, 103, 428, 428, 428,
	428, 428, 426, 426, 426, 426, 426, 426, 425, 425,
	424, 424, 429, 429, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 427, 427, 427, 427, 427,
	427, 427, 427, 427, 427, 93, 93, 93, 93, 93,
	93, 98, 98, 98, 99, 585, 585, 584, 584, 586,
	586, 586, 586, 587, 587, 96, 96, 96, 97, 423,
	423, 423, 94, 95, 95, 413, 413, 418, 418, 417,
	417, 417, 417, 417, 417, 417, 417, 417, 417, 417,
	417, 417, 422, 422, 422, 420, 420, 419, 419, 421,
	421, 87, 87, 87, 90, 89, 412, 412, 412, 412,
	412, 412, 412, 412, 412, 88, 88, 88, 88, 88,
	88, 83, 83, 83, 83, 83, 82, 82, 84, 84,
	410, 410, 409, 100, 100, 101, 582, 582, 581, 583,
	583, 583, 583, 102, 108, 108, 108, 108, 108, 108,
	108, 108, 107, 107, 110, 110, 109, 111, 92, 92,
	92, 92, 92, 92, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 546, 546, 546,
	548, 548, 345, 346, 598, 348, 344, 344, 344, 542,
	542, 543, 544, 545, 545, 545, 106, 14, 208, 208,
	446, 446, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 13, 81, 86, 86, 86, 280, 280, 285, 285,
	161, 286, 286, 286, 291, 291, 292, 292, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	267, 267, 267, 262, 262, 262, 262, 263, 263, 264,
	264, 265, 265, 265, 265, 266, 266, 337, 337, 287,
	287, 287, 289, 289, 288, 284, 282, 282, 282, 282,
	282, 282, 282, 283, 283, 283, 283, 290, 290, 79,
	85, 85, 85, 85, 560, 560, 80, 571, 571, 476,
	476, 359, 359, 358, 358, 358, 358, 358, 358, 358,
	358, 358, 358, 358, 358, 358, 358, 358, 358, 481,
	482, 355, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 54, 57, 58, 160,
	53, 53, 53, 399, 399, 52, 599, 599, 330, 330,
	67, 66, 56, 68, 69, 70, 71, 72, 73, 51,
	65, 65, 65, 65, 65, 65, 65, 65, 76, 494,
	494, 601, 601, 601, 74, 75, 475, 475, 475, 64,
	63, 62, 61, 60, 60, 50, 50, 49, 49, 55,
	151, 59, 152, 152, 352, 352, 352, 354, 354, 350,
	600, 600, 442, 442, 353, 353, 48, 48, 48, 48,
	77, 351, 351, 329, 349, 349, 349, 12, 12, 10,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 26, 27, 29,
	407, 407, 404, 28, 20, 19, 19, 23, 22, 18,
	18, 21, 24, 25, 25, 9, 9, 9, 9, 15,
	15, 16, 181, 181, 234, 234, 554, 554, 550, 550,
	551, 551, 551, 552, 552, 553, 553, 112, 488, 488,
	488, 488, 488, 488, 8, 8, 203, 203, 487, 487,
	487, 487, 487, 487, 411, 411, 411, 531, 531, 531,
	532, 202, 202, 197, 197, 489, 489, 376, 533, 533,
	497, 497, 496, 496, 495, 495, 200, 200, 201, 201,
	184, 184, 130, 130, 502, 502, 502, 502, 510, 510,
	471, 471, 272, 272, 320, 320, 321, 321, 174, 174,
	175, 175, 175, 175, 175, 175, 588, 588, 589, 590,
	591, 591, 592, 592, 592, 593, 593, 593, 593, 593,
	539, 539, 541, 541, 540, 199, 199, 195, 195, 196,
	196, 196, 194, 194, 193, 192, 192, 191, 189, 189,
	189, 190, 190, 190, 207, 207, 177, 177, 177, 176,
	176, 176, 176, 176, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 178, 178, 547, 547,
	547, 477, 477, 477, 484, 484, 300, 300, 301, 301,
	299, 299, 179, 179, 180, 180, 180, 180, 298, 298,
	297, 182, 182, 188, 187, 187, 183, 183, 183, 183,
	308, 308, 307, 307, 307, 307, 115, 128, 128, 129,
	206, 206, 306, 305, 305, 305, 305, 205, 205, 204,
	204, 198, 198, 186, 186, 186, 186, 304, 185, 302,
	578, 578, 577, 577, 576, 574, 574, 574, 575, 575,
	575, 575, 523, 523, 523, 523, 523, 338, 338, 338,
	343, 343, 341, 341, 341, 341, 341, 347, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	39, 217, 218, 40, 219, 219, 220, 220, 221, 221,
	222, 223, 224, 224, 224, 224, 38, 209, 209, 210,
	210, 211, 211, 212, 213, 213, 213, 216, 214, 215,
	215, 596, 596, 595, 37, 37, 30, 165, 165, 166,
	166, 166, 168, 168, 268, 268, 268, 167, 167, 169,
	169, 169, 555, 557, 557, 559, 558, 558, 558, 561,
	561, 561, 561, 561, 562, 562, 562, 562, 563, 563,
	31, 148, 148, 172, 172, 153, 566, 566, 566, 565,
	565, 567, 567, 568, 568, 324, 324, 325, 325, 163,
	164, 164, 155, 150, 171, 171, 171, 171, 171, 173,
	173, 236, 236, 149, 154, 157, 159, 556, 564, 564,
	564, 408, 408, 405, 406, 406, 403, 402, 402, 402,
	570, 570, 569, 569, 569, 339, 339, 32, 398, 398,
	400, 401, 401, 401, 392, 392, 392, 392, 36, 396,
	396, 397, 397, 397, 397, 397, 397, 397, 393, 393,
	395, 395, 391, 391, 391, 391, 391, 391, 391, 35,
	170, 170, 390, 390, 387, 387, 385, 385, 386, 386,
	384, 384, 384, 388, 388, 43, 78, 44, 45, 46,
	42, 389, 389, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 132, 131, 131, 131, 131, 131, 134,
	134, 323, 323, 322, 322, 133, 269, 269, 41, 247,
	247, 463, 463, 458, 458, 458, 458, 458, 479, 479,
	479, 459, 459, 459, 460, 460, 460, 462, 462, 462,
	461, 461, 461, 461, 461, 478, 478, 480, 480, 480,
	430, 430, 431, 431, 431, 434, 434, 450, 450, 451,
	451, 449, 449, 456, 456, 455, 455, 454, 454, 453,
	453, 452, 452, 452, 452, 445, 445, 444, 444, 432,
	432, 432, 432, 432, 433, 433, 433, 443, 443, 448,
	448, 296, 296, 295, 295, 255, 255, 256, 256, 294,
	294, 253, 253, 254, 254, 254, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 529, 529, 530, 258, 258, 270, 270, 270,
	270, 270, 270, 257, 257, 259, 259, 235, 235, 233,
	233, 225, 225, 225, 225, 225, 226, 226, 227, 227,
	228, 228, 228, 232, 232, 231, 231, 231, 231, 229,
	229, 230, 230, 230, 230, 230, 230, 416, 416, 526,
	526, 527, 527, 522, 522, 522, 525, 525, 525, 525,
	525, 525, 525, 528, 528, 528, 524, 524, 237, 317,
	317, 317, 340, 340, 340, 340, 342, 316, 316, 316,
	252, 252, 251, 251, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 415, 415, 356, 356,
	357, 357, 279, 278, 278, 278, 278, 278, 276, 277,
	275, 275, 275, 275, 275, 274, 274, 273, 273, 273,
	394, 394, 271, 271, 261, 261, 261, 260, 260, 260,
	457, 363, 363, 363, 363, 363, 363, 363, 363, 363,
	363, 363, 363, 363, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	365, 365, 365, 365, 365, 365, 365, 365, 365, 365,
	314, 314, 314, 315, 315, 315, 315, 315, 315, 315,
	315, 366, 366, 372, 372, 538, 538, 537, 238, 238,
	238, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	248, 248, 248, 439, 439, 439, 439, 440, 440, 440,
	440, 441, 441, 441, 437, 437, 438, 438, 377, 378,
	378, 485, 485, 486, 486, 435, 435, 436, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	493, 493, 493, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 549,
	549, 549, 534, 534, 534, 535, 535, 535, 535, 535,
	535, 535, 535, 535, 535, 535, 535, 536, 536, 536,
	536, 536, 536, 536, 536, 536, 536, 536, 536, 536,
	536, 536, 536, 536, 312, 312, 312, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 379, 379, 380, 380, 490,
	490, 490, 490, 490, 490, 491, 491, 492, 492, 492,
	492, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	483, 483, 483, 483, 483, 483, 483, 483, 483, 483,
	364, 309, 309, 309, 381, 373, 373, 374, 374, 375,
	375, 367, 367, 367, 367, 367, 367, 368, 368, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	362, 362, 362, 362, 362, 362, 362, 362, 362, 362,
	362, 369, 369, 371, 371, 383, 383, 383, 382, 382,
	382, 382, 382, 382, 382, 250, 250, 250, 250, 361,
	361, 361, 360, 360, 360, 360, 360, 360, 360, 360,
	360, 360, 360, 360, 240, 240, 240, 240, 244, 244,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 245, 245, 245, 245, 245, 243,
	243, 243, 243, 243, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 113, 114, 114, 242, 319, 319, 464,
	464, 467, 467, 465, 465, 466, 468, 468, 468, 469,
	469, 469, 470, 470, 470, 474, 474, 328, 328, 328,
	336, 336, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 334, 334,
	334, 334, 334, 334, 334, 334, 334, 334, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	7, 9, 10, 10, 12, 1, 5, 6, 8, 10,
	9, 11, 13, 5, 7, 9, 8, 6, 4, 0,
	1, 1, 0, 1, 5, 2, 2, 6, 9, 6,
	9, 4, 7, 8, 0, 1, 1, 2, 4, 6,
	1, 2, 4, 0, 2, 10, 11, 2, 0, 2,
	1, 3, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 2, 3, 1, 3, 1, 1, 1, 3,
	1, 1, 1, 1, 0, 3, 3, 0, 3, 3,
	0, 1, 3, 0, 1, 3, 0, 2, 1, 2,
	3, 4, 3, 3, 1, 0, 1, 1, 0, 1,
	8, 5, 7, 0, 3, 8, 5, 1, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 4, 1, 3, 1, 2, 2, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 2, 2, 2, 1,
	2, 1, 2, 2, 1, 2, 1, 1, 2, 2,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 4, 5, 1, 3, 3, 1, 2,
	2, 2, 1, 2, 2, 3, 4, 4, 6, 1,
	1, 1, 2, 4, 6, 1, 4, 1, 3, 3,
	4, 4, 4, 4, 3, 3, 2, 4, 4, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 2, 2, 0, 1, 4, 2,
	4, 1, 5, 3, 2, 1, 2, 2, 4, 4,
	5, 2, 1, 3, 4, 4, 1, 2, 9, 7,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 1,
	2, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 4, 2, 4, 3, 3, 1, 1,
	1, 1, 1, 1, 2, 3, 4, 7, 2, 3,
	3, 4, 5, 3, 4, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 1, 1, 1, 1, 6, 4, 1, 1,
	0, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 10, 7, 4, 4, 5, 1, 3, 1, 6,
	7, 3, 3, 3, 1, 1, 1, 3, 2, 4,
	5, 5, 6, 5, 5, 3, 2, 2, 1, 3,
	4, 3, 7, 5, 8, 2, 2, 1, 3, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 1, 0,
	1, 2, 1, 3, 2, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 6, 3, 3, 1, 1, 7,
	7, 7, 8, 8, 0, 4, 7, 0, 3, 0,
	2, 0, 1, 1, 1, 1, 4, 2, 2, 3,
	3, 4, 5, 3, 4, 4, 2, 2, 2, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 3, 3,
	2, 5, 5, 0, 2, 7, 0, 1, 0, 1,
	5, 5, 3, 3, 2, 4, 4, 4, 4, 4,
	1, 1, 1, 3, 3, 1, 1, 1, 6, 0,
	1, 1, 1, 1, 5, 5, 0, 1, 1, 3,
	3, 3, 4, 7, 7, 5, 4, 7, 8, 3,
	3, 2, 3, 4, 0, 2, 2, 0, 2, 2,
	1, 1, 1, 1, 0, 1, 5, 5, 6, 4,
	3, 1, 3, 1, 1, 3, 5, 2, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 4, 4, 4,
	1, 3, 1, 4, 6, 6, 4, 4, 4, 4,
	4, 3, 6, 3, 5, 1, 1, 2, 2, 11,
	8, 9, 1, 3, 2, 4, 0, 2, 0, 1,
	1, 1, 1, 0, 1, 0, 1, 4, 2, 1,
	5, 4, 4, 2, 5, 5, 1, 3, 2, 1,
	5, 4, 4, 2, 0, 5, 4, 0, 1, 3,
	3, 1, 3, 1, 3, 1, 3, 4, 0, 1,
	0, 1, 1, 3, 1, 1, 0, 4, 1, 3,
	2, 1, 0, 8, 0, 4, 7, 4, 0, 2,
	0, 2, 0, 2, 0, 4, 1, 3, 1, 1,
	6, 4, 5, 7, 4, 5, 0, 1, 3, 8,
	0, 6, 0, 4, 6, 1, 1, 1, 1, 1,
	2, 3, 1, 3, 6, 0, 3, 0, 1, 2,
	4, 4, 0, 1, 3, 1, 3, 3, 0, 1,
	1, 0, 2, 2, 0, 2, 3, 3, 3, 1,
	3, 3, 3, 3, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 1, 2, 2, 7, 7, 1, 1,
	1, 0, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 2, 1, 3, 1, 2, 3, 5, 0, 1,
	2, 1, 3, 1, 1, 1, 4, 4, 4, 3,
	2, 2, 2, 3, 2, 3, 4, 1, 3, 4,
	0, 2, 1, 1, 2, 2, 2, 0, 1, 2,
	4, 1, 3, 1, 3, 2, 3, 1, 4, 3,
	0, 1, 1, 2, 5, 2, 2, 2, 0, 2,
	3, 3, 0, 1, 3, 1, 3, 0, 1, 2,
	1, 1, 0, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	7, 1, 1, 7, 1, 3, 0, 1, 1, 3,
	1, 3, 0, 1, 1, 1, 14, 1, 3, 0,
	1, 1, 3, 1, 1, 2, 4, 1, 1, 1,
	1, 0, 1, 2, 9, 9, 7, 1, 2, 3,
	3, 3, 0, 4, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 1, 1, 4, 1, 1, 1, 3,
	3, 4, 3, 3, 0, 1, 1, 1, 0, 2,
	7, 8, 10, 2, 2, 8, 0, 3, 3, 0,
	3, 0, 3, 0, 5, 1, 3, 0, 3, 3,
	0, 2, 9, 8, 0, 2, 2, 3, 3, 0,
	2, 0, 2, 4, 4, 4, 4, 1, 0, 2,
	2, 1, 3, 2, 1, 3, 2, 1, 3, 2,
	0, 1, 3, 4, 3, 1, 1, 4, 1, 3,
	1, 1, 1, 1, 0, 1, 1, 1, 11, 0,
	2, 3, 3, 2, 2, 3, 1, 1, 1, 3,
	3, 4, 0, 2, 2, 2, 2, 2, 2, 6,
	0, 4, 1, 1, 0, 3, 0, 1, 1, 2,
	4, 4, 4, 0, 1, 8, 2, 4, 4, 4,
	9, 0, 2, 11, 9, 11, 8, 6, 9, 7,
	10, 7, 6, 2, 2, 9, 4, 5, 3, 0,
	4, 1, 3, 0, 3, 6, 0, 2, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 5, 1, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	4, 0, 5, 5, 5, 5, 0, 1, 1, 3,
	1, 1, 1, 1, 1, 7, 9, 7, 9, 2,
	1, 7, 9, 7, 9, 8, 5, 0, 1, 0,
	1, 1, 1, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 3, 1,
	3, 5, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 2, 1, 2, 2, 1, 1, 2,
	2, 2, 3, 3, 2, 2, 1, 5, 6, 4,
	1, 1, 1, 5, 4, 1, 1, 2, 0, 1,
	1, 2, 5, 0, 1, 1, 2, 2, 3, 3,
	1, 1, 2, 2, 2, 0, 1, 2, 2, 2,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	4, 4, 4, 7, 9, 7, 7, 7, 9, 7,
	7, 0, 2, 0, 1, 1, 2, 4, 1, 2,
	2, 1, 2, 2, 1, 2, 2, 2, 2, 2,
	0, 1, 1, 1, 2, 2, 2, 2, 2, 2,
	2, 1, 1, 1, 2, 5, 0, 1, 3, 0,
	1, 0, 2, 0, 2, 0, 1, 6, 8, 8,
	6, 6, 5, 5, 5, 6, 6, 6, 6, 5,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	1, 1, 1, 4, 4, 6, 8, 6, 4, 5,
	4, 4, 4, 3, 4, 6, 6, 7, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 8, 4, 2, 3,
	2, 4, 2, 2, 4, 6, 2, 2, 4, 6,
	4, 2, 4, 4, 4, 0, 1, 2, 3, 1,
	1, 1, 1, 1, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 3, 0, 1, 1, 3, 1,
	3, 3, 3, 3, 3, 2, 1, 1, 1, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 1,
	3, 4, 4, 5, 4, 5, 3, 4, 5, 6,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 1, 1, 2, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	4, 4, 1, 2, 3, 5, 1, 1, 3, 0,
	1, 0, 3, 0, 3, 3, 0, 3, 5, 0,
	3, 5, 0, 1, 1, 0, 1, 1, 2, 2,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -594, -597, -2, -5, 626, -1, -4, -114, -87,
	-7, -14, -116, -117, -8, -112, -9, -10, -12, -91,
	-107, -109, -111, -110, -47, -11, -106, -82, -83, -93,
	-100, -103, -104, -105, -118, -113, -115, -174, -119, -120,
	-121, -162, -124, -126, -127, 616, -88, -89, -90, -33,
	-32, -31, -30, -148, -153, -156, -158, -122, 549, 622,
	452, 14, 501, -15, -16, -539, -17, 261, -344, -345,
	-346, -348, -598, -48, -49, -50, -60, -61, -62, -63,
	-64, -74, -75, -76, -51, -52, -53, -56, -54, -67,
	-66, -68, -69, -70, -71, -72, -73, -55, -59, -151,
	-152, -77, -57, -78, -58, -160, -123, -80, -79, -85,
	-81, -86, -150, -155, -13, -161, 236, -84, 76, -94,
	-95, -96, -97, -98, -99, -101, -102, 376, 382, 439,
	615, 61, -175, -177, 635, 636, 639, 536, 539, 160,
	161, 163, 164, -34, -35, -36, -37, -38, -39, -41,
	-40, -42, -43, -44, -45, -46, 232, 16, 544, -18,
	-21, -19, -22, -20, -28, -29, -27, -24, -26, -149,
	-25, -154, -23, -157, -159, -125, 256, 255, 38, 322,
	323, 324, 380, 254, 233, 235, 15, 31, 42, 355,
	-176, 83, 537, 234, -178, 13, 641, -6, -3, -2,
	-135, -139, -143, -146, -147, -144, -145, -4, -114, 118,
	246, 617, -340, 372, 618, 620, 619, 86, 94, -333,
	-335, 452, 261, 376, 382, 615, 636, 639, 536, 539,
	551, 552, 553, 554, 555, 556, 557, 558, 560, 561,
	562, 563, 564, 565, 566, 576, 577, 567, 568, 569,
	570, 571, 572, 573, 574, 578, 579, 580, 581, 582,
	583, 584, 585, 586, 587, 588, 589, 590, 591, 504,
	601, 602, 603, 604, 532, 559, 595, 596, 597, 598,
	353, 354, 541, 273, 297, 407, 303, 310, 160, 179,
	173, 202, 193, 537, 168, 277, 315, 278, 93, 163,
	487, 108, 464, 436, 166, 292, 294, 296, 533, 534,
	366, 299, 531, 298, 300, 302, 535, 279, 356, 189,
	184, 291, 275, 182, 280, 40, 281, 207, 282, 283,
	546, 460, 352, 466, 307, 52, 434, 183, 461, 295,
	463, 211, 215, 478, 479, 177, 178, 468, 481, 206,
	209, 210, 253, 349, 350, 43, 543, 265, 482, 213,
	205, 200, 490, 311, 309, 204, 176, 199, 276, 65,
	217, 216, 218, 430, 431, 432, 433, 284, 285, 370,
	477, 196, 185, 357, 169, 23, 485, 260, 465, 383,
	286, 304, 312, 212, 214, 267, 272, 545, 438, 271,
	308, 483, 181, 264, 293, 259, 486, 170, 385, 287,
	164, 301, 480, 489, 64, 398, 175, 167, 633, 250,
	161, 269, 274, 288, 289, 290, 530, 314, 313, 305,
	538, 197, 266, 203, 187, 174, 198, 162, 268, 488,
	399, 613, 355, 417, 195, 192, 270, 243, 484, 467,
	165, 421, 400, 190, 316, 608, 609, 610, 371, 348,
	317, 318, 188, 257, 458, 459, 321, 427, 339, 401,
	437, 408, 402, 224, 225, 325, 470, 472, 208, 611,
	328, 329, 330, 462, 331, 332, 333, 334, 375, 56,
	58, 95, 98, 97, 637, 638, 63, 29, 361, 364,
	396, 403, 341, 614, 542, 338, 342, 343, 365, 25,
	419, 387, 423, 422, 48, 49, 50, 53, 54, 55,
	57, 59, 60, 51, 529, 380, 393, 491, 45, 47,
	390, 27, 367, 418, 440, 337, 420, 451, 46, 449,
	450, 471, 26, 369, 368, 62, 44, 426, 428, 429,
	319, 335, 378, 623, 492, 373, 389, 392, 374, 340,
	363, 394, 67, 66, 386, 624, 381, 379, 336, 547,
	548, 344, 575, 358, 435, 526, 525, 524, 523, 522,
	521, 520, 519, 322, 323, 324, 404, 405, 406, 416,
	409, 410, 411, 412, 413, 414, 415, 454, 455, 625,
	473, 475, 476, 474, 238, 640, 359, 360, 241, 627,
	628, 96, 629, 631, 630, 28, 632, -421, -419, -340,
	537, 615, 382, 536, 539, 376, 355, 636, 639, 380,
	261, 322, 323, 324, 452, 353, -219, -340, 640, -184,
	245, 39, -233, -340, -184, -84, -16, -15, -176, -177,
	-233, 240, -349, 24, 434, -92, 435, 236, 83, 77,
	-340, -9, -105, -8, -112, -82, -174, 439, -347, -340,
	322, 322, -347, 240, -342, 271, 415, -340, -476, 246,
	-425, -398, 272, -424, -400, -427, -401, 32, 232, 234,
	233, 549, 268, 16, 380, 242, 14, 13, 381, 254,
	25, 26, 28, 15, 382, 384, 29, 385, 388, 389,
	390, 42, 393, 394, 261, 86, 94, 89, 279, -218,
	-340, -375, -367, 115, -370, -362, -363, -365, -318, -513,
	-360, 83, 142, 143, 150, 116, 642, -364, -457, 36,
	118, 555, 559, 595, 502, -310, -311, -312, -313, -314,
	-315, -340, -514, -512, 89, 99, 101, 105, 106, 104,
	102, 154, 186, 103, 90, 155, -177, 86, -534, 565,
	-334, 588, 601, 602, 603, 604, 587, 61, -483, -492,
	239, -490, 153, 191, 257, 187, 14, 148, 427, 188,
	596, 597, 598, 562, 584, 504, 566, 576, 591, 557,
	558, 560, 552, 553, 554, 556, 567, 569, 583, -493,
	579, 589, 590, 575, 599, 600, 592, 593, 594, 631,
	88, 87, 582, 581, 568, 563, 564, 570, 551, 561,
	571, 572, 580, 585, 586, 364, 108, 365, 366, 494,
	356, 367, 246, 434, 70, 368, 369, 370, 371, 372,
	501, 373, 71, 374, 363, 261, 417, 375, 190, 208,
	506, 505, 507, 498, 495, 493, 496, 497, 499, 500,
	573, 574, 578, -128, -129, 606, -588, -303, -589, 6,
	7, 8, 9, -590, 155, -579, 436, 545, 89, 315,
	353, 17, 494, 634, 535, 634, 535, 165, 162, -412,
	165, 114, 170, 169, -412, 634, 167, 633, 325, 267,
	-389, -165, 353, 417, 331, 95, 271, -392, -390, 533,
	-478, 319, 315, 291, 241, 111, -166, 251, 250, 109,
	494, 239, 391, 310, 56, 58, -550, -551, 229, 230,
	231, -541, 527, -540, -340, 634, 366, 97, 98, 633,
	27, 240, 377, 267, 472, 470, 471, 473, 474, 475,
	476, -65, -494, -475, 467, 466, -353, 459, 465, 457,
	469, 460, 354, 333, 549, 332, 232, 627, 534, 528,
	-328, 401, 437, 491, 492, 378, 438, 478, 480, 461,
	108, 194, 191, 241, 243, 240, 633, 353, 494, 417,
	95, 331, 240, -550, 162, 478, 480, 436, 271, 415,
	41, -418, 427, -417, -419, 479, 490, 87, 88, 477,
	-328, 108, 458, 458, -588, -303, -175, -177, -115, -539,
	535, 634, 241, 353, 417, 271, 242, 240, 530, 533,
	243, 494, 239, 322, 377, 267, 331, 95, 167, 633,
	-477, -547, 32, -484, 226, 227, 228, 33, 34, -1,
	122, 641, -367, -367, -6, 644, -6, -367, -340, -340,
	157, -240, -244, -241, -243, -242, -246, -245, 191, 192,
	153, 195, 201, 197, 198, 199, 200, 202, 203, 204,
	205, 206, 209, 210, 207, 31, 208, 257, 187, 188,
	189, 190, 211, 173, 193, 542, 219, 174, 220, 175,
	221, 176, 222, 177, 178, 223, 179, 182, 183, 184,
	185, 181, 156, -208, 89, 32, 83, 156, 89, -200,
	263, -184, -233, -225, 156, 642, -200, -588, -193, -194,
	11, -233, -316, -340, 436, 125, -92, 77, -92, 435,
	77, -542, -543, -544, -546, 236, 435, 434, -110, 156,
	279, 17, -347, -347, 81, -233, -400, 271, -425, -398,
	36, 80, 157, 244, 157, 80, 83, 378, 353, 417,
	379, 494, 240, 391, 243, 271, 392, 353, 417, 240,
	243, 494, 271, 353, 240, 243, 417, 271, 392, 353,
	457, 458, 243, 27, 383, 386, 387, 458, -498, 490,
	157, 114, 111, 112, 113, -367, 132, -382, 125, 126,
	127, 128, 129, 130, 131, 139, 138, 149, 142, 143,
	144, 145, 146, 147, 148, 140, 141, 135, 115, 133,
	137, 134, 117, 152, -177, -367, -375, 61, -365, -365,
	-365, -365, -340, -457, -372, -367, 83, 83, 83, 83,
	156, 102, 89, -367, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, -491, 83, 83, -379,
	-380, 83, 83, -360, -316, 83, 89, 89, 83, 83,
	83, 89, 83, 83, 83, -380, -380, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, -194, 157, -193, 83, -193, -194, -178, -177,
	32, 33, 32, 33, 32, 33, 32, 33, -591, 624,
	83, 99, 637, 224, 17, -340, 633, -340, -573, 32,
	538, 538, 538, 538, 483, 544, 168, 169, 170, -387,
	246, -387, -387, -217, -340, -219, 377, 243, 530, 243,
	-166, -387, -387, -387, -387, -387, 242, -387, 24, 240,
	240, 240, 240, -387, 501, 125, 125, 59, -552, 172,
	157, -541, -199, 83, -573, -352, 133, 137, -352, -299,
	18, -299, 24, 269, 269, 269, -352, 309, -599, -600,
	17, 135, -350, -600, -350, -350, -352, -601, 242, 468,
	43, 270, 269, -195, -196, 22, -195, 462, 458, -442,
	463, 464, -354, -600, -353, -352, -352, -353, -352, -352,
	-352, 32, 240, 243, 494, 331, 628, -599, -599, 31,
	31, -476, -476, -233, -476, -476, 528, -329, -340, -476,
	-476, -476, -233, -553, 245, -585, -584, 481, -587, 483,
	162, -419, 162, -419, 86, -400, 271, 271, 157, 125,
	24, -420, 125, 136, -419, -419, -420, -420, -257, 41,
	-339, 153, -340, 89, -257, 41, -582, -581, -233, -194,
	-178, -177, 84, 84, 84, 538, -573, -476, -476, -476,
	-476, -476, -478, -476, -476, -476, -476, -476, -347, -209,
	-340, -219, 246, -476, -476, -476, -476, -179, -180, 144,
	-367, -340, -179, -3, -137, -136, 119, 120, 122, 618,
	372, 617, 621, 615, -419, 41, -470, 399, 398, -464,
	-466, 83, -465, 83, -465, -465, -465, -465, -465, 83,
	83, -467, 83, -467, -467, -464, -468, 83, -468, -469,
	83, -469, -468, -340, -446, 544, -373, -375, -340, 39,
	-487, 61, -174, 83, 31, 83, -200, -340, 188, 167,
	632, -488, 61, -174, 83, 31, -194, -130, 39, -196,
	21, 156, 99, 89, -110, -92, 77, -110, 84, 157,
	-545, 105, 106, -548, 206, 197, -340, -108, 89, -7,
	-8, -9, -10, -47, -82, -79, -174, 233, 536, 539,
	-515, -513, 83, 32, 426, 80, 17, -426, 240, 494,
	377, 267, 243, 353, -424, -407, -404, -402, -339, -400,
	-403, -402, -429, -316, 458, -131, 441, 440, 321, -367,
	-367, -367, -367, -367, 104, 115, 348, 105, 106, -362,
	-383, 32, 317, 318, -363, -363, -363, -363, -363, -363,
	-363, -363, -363, -363, -363, -363, -371, -381, -457, 83,
	135, 133, 137, 134, 117, -365, -365, -363, -363, -259,
	-339, 153, 84, 157, -367, -538, -537, 119, -367, -367,
	-367, -367, -340, -535, -536, 508, 509, 510, 511, 512,
	513, 514, 515, 516, 517, 518, 368, 363, 369, 367,
	356, 375, 370, 371, 190, 525, 526, 519, 520, 521,
	522, 523, 524, -373, -373, -367, -535, -373, -309, 33,
	32, -375, -375, -375, 84, -367, -549, 346, 345, 347,
	-197, -340, -373, 84, 84, 84, 99, -375, -375, -373,
	-363, -373, -373, -373, -373, -536, -309, -309, -309, -309,
	144, -375, -375, -309, -309, -309, -309, 144, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, 84, 84,
	84, 144, -375, -195, -129, -496, -495, -367, 41, -130,
	-196, -592, 625, 83, -316, -580, 89, 89, 642, 167,
	633, 17, 494, -340, 17, 240, -340, 99, -340, 99,
	484, 485, 166, 169, 168, -340, 115, -340, -340, 35,
	83, -209, -387, -387, -387, -557, -340, 90, -408, -405,
	-402, -340, -340, -398, -340, -329, -233, -387, -387, -387,
	-387, -233, -268, 53, 54, 55, -402, -167, 56, 57,
	-553, -540, 35, -198, -340, -299, -365, -365, -367, -402,
	271, -599, -352, -352, -330, -329, -354, -349, -354, -354,
	-299, -350, -352, -352, -367, -354, -350, -299, -340, 458,
	-299, -299, -442, -352, -351, -340, -351, -387, -329, -330,
	-330, -233, -233, -280, -285, -281, -286, 263, 237, 361,
	362, 235, 233, 11, 234, -293, 310, -388, 502, -263,
	-264, 77, 42, -266, 261, 403, 396, 273, 277, 93,
	278, 436, 279, 242, 281, 282, 283, 298, 300, 253,
	284, 285, 286, 427, 287, 161, 299, 288, 289, 290,
	379, -258, 6, 334, 544, 41, 51, 52, 450, 449,
	547, 274, -340, -557, -555, 31, -340, 31, -408, -340,
	-340, 244, -187, -182, -186, -183, -188, -302, -304, -185,
	83, -233, -177, -340, 157, 482, 484, 485, -585, -420,
	-585, -420, 244, 32, 426, -423, 426, 32, -398, -417,
	478, 480, -413, 89, 427, -403, -422, 80, 153, -495,
	-420, -420, -422, -422, 152, 157, -583, 483, 484, 229,
	-195, 99, -235, -233, -557, -407, -398, -340, -476, -235,
	-235, -235, -342, -342, 83, 156, 36, -340, -340, -340,
	-340, -298, 157, -297, 17, -341, -340, 35, 89, 156,
	-298, -138, -136, 121, -367, -6, 617, -367, -6, -6,
	-367, -6, -367, -474, 400, 99, 99, -319, 89, -319,
	99, 99, 99, 550, 84, 89, -411, 80, -489, -376,
	-533, 606, -202, 84, -197, -531, -532, -197, -201, -340,
	-487, -225, 125, 125, 125, -489, -202, 84, -531, -195,
	607, -130, -192, -191, -367, -340, 24, -110, -92, -543,
	156, 353, 157, -198, -426, -406, -403, -428, 144, -340,
	-414, 157, 544, 645, 87, 244, -570, -569, 418, 84,
	157, -499, 245, 501, 89, 642, 434, 224, 225, 104,
	348, 105, 106, -457, -375, -371, -365, -365, -363, -363,
	-369, 258, -369, 114, -367, 643, -366, -537, 121, -367,
	35, 157, 35, 157, 81, 156, 84, 84, 17, 17,
	84, -367, 84, 84, 84, 84, 17, 17, -367, 84,
	156, 84, 84, 84, 84, 81, 84, 157, 84, 84,
	84, 84, 157, -375, -375, -367, -375, 84, 84, 84,
	-367, -367, -367, -375, 84, -367, -367, -367, -367, -367,
	-367, -367, -367, -367, -367, -436, 453, -436, -436, 157,
	157, 157, 84, -130, 83, 99, 157, 638, -323, -322,
	89, -340, -340, 167, 633, -340, 89, 633, -340, 89,
	167, 170, 170, 169, 89, 36, 24, 308, 24, -218,
	-220, -221, -222, -223, -224, 135, 158, 159, 83, -233,
	-233, -233, -559, 404, -571, 157, 41, -569, 494, -163,
	321, -391, 81, -170, 17, 544, -233, -233, -233, -233,
	-247, 35, 17, -181, -234, -340, 83, 84, 157, -399,
	81, -340, -330, -299, -299, -354, -299, -299, 157, 23,
	-352, -354, -354, -225, -350, -225, 156, -225, -329, -463,
	35, -199, 157, 21, 263, -232, -337, -229, -231, 248,
	-357, -230, 251, -527, 249, 247, 109, 252, 306, 110,
	242, -337, -337, 248, -267, 244, 35, -337, -283, 242,
	351, 306, 249, 21, 263, -282, 242, 110, -340, 248,
	252, 249, 247, -336, 125, -328, 152, 244, 43, 379,
	-336, 548, 263, -336, -336, -336, -336, -336, -336, -336,
	280, 280, -336, -336, -336, -336, -336, -336, -336, -336,
	-336, -336, -336, 162, -336, -336, -336, -336, -336, -336,
	83, 326, 275, 276, 308, -560, 404, 31, 359, 359,
	360, -571, 31, -171, 353, -284, -351, 31, -305, -306,
	-307, -308, 68, 72, 74, 78, 69, 70, 71, 75,
	31, 157, -338, -343, 35, -340, 89, -338, -177, -182,
	-187, -338, 83, -584, -586, 486, 483, 489, -422, -422,
	99, 244, 83, 125, -422, -422, 41, -339, -581, 490,
	484, -130, 157, 80, -235, -210, -211, -212, -213, -240,
	-316, 192, 195, 197, 198, 199, 200, 202, 203, 204,
	205, 206, 209, 210, 207, 208, 257, 187, 188, 189,
	190, 211, 173, 193, 542, 174, 175, 176, 177, 178,
	179, 182, 183, 184, 185, 181, -340, -219, -299, -180,
	-182, -340, 89, -340, 144, -299, 122, -6, 120, -142,
	-141, -140, 123, 615, 621, 122, 122, 122, 84, 84,
	84, 157, 84, 84, 84, 157, 84, 157, 99, -502,
	463, 40, 157, 83, 84, 157, 61, 157, 125, 84,
	157, -367, -340, 89, -367, 84, 61, -130, 89, 157,
	-189, 37, 38, 156, 436, -340, -513, 84, -428, 157,
	244, 156, 156, -404, 382, -339, -406, 21, 544, -316,
	39, -323, 125, 642, -340, 84, -369, -369, 114, -365,
	-362, 84, 122, -367, 120, -238, -240, 398, 399, -367,
	-238, -239, -245, 153, 191, 257, 190, 189, 187, 398,
	399, -257, -340, -367, -367, 84, -367, -367, 17, -340,
	-257, -363, -367, -194, -194, 84, 84, -435, -436, -435,
	-435, 84, 84, 84, 84, -435, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 83, 99, 101, 99,
	101, -495, -593, 63, 623, 62, 426, 104, 311, 157,
	99, 89, 643, 157, 125, 89, -340, -340, 17, 240,
	-340, 17, 170, 89, -572, 315, 353, -447, 99, 315,
	353, 494, 390, 84, 157, -316, -210, -199, 83, -199,
	-562, 465, 406, 416, -336, -359, -358, 355, 42, -481,
	427, 412, 413, -405, 271, -329, -568, 96, 125, 80,
	338, 342, 343, 339, 340, 341, -385, -386, -384, -388,
	-555, 83, 83, -174, 35, 133, -170, 83, 83, 35,
	-458, 328, -240, -233, -181, -340, 17, 157, -554, 156,
	-1, -340, -398, -352, -299, -367, -367, -299, -352, -352,
	-354, -340, -225, -458, -240, 35, -281, 237, 234, -432,
	308, 309, -433, -448, 311, -450, 83, -237, -316, -230,
	-526, -527, -387, -340, 110, -526, 110, 83, -237, -316,
	-316, -284, -316, -340, -340, -340, -340, -289, -288, -316,
	-291, 32, -292, -340, -340, -340, -340, 110, -340, 110,
	-262, 41, 48, 49, 50, -336, -336, 194, -265, 41,
	426, 428, 429, -291, 99, 99, 99, 99, 89, 89,
	89, -336, -336, 99, 89, -343, 89, -528, 169, 45,
	46, 99, 99, 99, 99, 41, 89, -270, 41, 291,
	295, 292, 293, 294, 89, 99, 41, 99, 41, 99,
	41, -340, 83, -529, -530, 89, 327, -447, -562, -336,
	359, -419, 125, 125, -359, -567, 321, -173, 494, 32,
	-203, 237, 234, -555, -410, -409, -316, -186, -186, -186,
	-186, 68, 68, 68, 68, 73, 68, 73, 68, -307,
	-410, -188, -199, -343, 84, -578, -577, -576, -574, 76,
	245, 77, -373, 483, 487, 488, -406, -355, 89, -413,
	-207, 24, -233, -233, -480, 301, 302, 84, 157, -240,
	-301, 19, 156, -301, 118, -6, -138, -140, -367, -6,
	-367, 617, 372, 618, 89, 99, 99, -510, 447, 442,
	444, 110, -376, -497, -496, 61, -174, -197, -489, -532,
	-495, -340, 643, 643, 643, 643, 61, -174, -489, -207,
	-502, -191, -190, 44, -340, 99, 17, -403, -398, 144,
	144, -340, 383, -414, 89, 405, 89, 240, 643, 89,
	-323, -362, -367, 84, -248, 178, 177, -248, 35, 84,
	84, -465, -465, -464, -467, -464, -248, -248, 84, 84,
	24, 84, 84, 84, -367, 84, 84, 157, -485, 503,
	-486, 577, -435, -435, -435, -435, -435, -435, -435, -435,
	-435, -435, -435, -435, -435, -435, -435, -435, -378, -377,
	263, 448, 630, 630, 448, 630, 630, 84, 157, -535,
	157, -331, 316, -331, -322, 89, 244, 89, 167, -340,
	89, 633, 89, -340, 89, 308, -340, -340, 89, 89,
	-222, -240, 84, 35, -226, -227, -228, -237, -229, -231,
	35, -563, 93, -558, 89, -340, 90, -564, 93, 407,
	155, 357, 41, 408, 409, 424, 352, 99, 99, 414,
	-556, -340, -172, 240, 353, -566, 52, 125, 89, -233,
	-384, -328, 152, 282, 331, -296, -295, -340, 89, -226,
	-174, -233, -226, -226, -174, -459, 330, 21, 99, 143,
	-200, 81, 156, -182, -234, -340, 144, 84, -299, -225,
	-299, -299, -352, -459, -174, -444, 312, 83, -442, 83,
	-442, 110, 339, -451, -449, 263, -287, 45, 47, -240,
	-524, -340, -522, -524, -340, -522, -522, -387, -367, -287,
	-237, 244, 31, 234, -290, 336, 337, 342, -415, 307,
	115, -415, 157, -189, 157, -340, -257, -257, 31, 89,
	89, -235, 84, 157, 125, 99, 89, -563, -558, 125,
	-420, 89, 89, -564, -568, 125, -236, 240, -329, 157,
	-203, -203, -299, 157, 125, -205, -204, 80, 81, -206,
	80, -204, 68, 68, -299, -576, -575, 24, -527, -527,
	-527, 84, 84, 15, -212, 41, -300, 20, 21, 144,
	-300, 122, 120, 122, 122, -340, 84, 84, -471, 608,
	-506, -508, 442, 21, 21, 15, 245, 84, -489, -489,
	-510, 45, 46, -398, -414, 427, -233, 157, 643, -238,
	-367, 84, -367, 84, 89, 84, 89, -194, 21, 84,
	157, 84, 84, 84, 157, 84, 84, -367, 84, -535,
	-332, 188, 89, -332, 353, -341, -340, 17, -340, 89,
	-447, 308, 308, 240, 238, -174, 84, 157, -174, 89,
	-561, 418, 89, 89, 99, 41, 99, 155, 410, -482,
	-164, 93, -235, 32, -203, -565, 93, 125, 642, 83,
	-336, -336, -336, -340, 84, 157, -336, -336, 84, 84,
	84, -255, 544, -460, 262, 99, 143, 99, 143, 99,
	-338, -182, -340, -299, -554, 156, -299, -460, -434, 313,
	99, -363, 83, -363, 83, -443, 310, 83, 84, 157,
	-340, -316, -252, -251, -249, 104, 115, 41, 396, -250,
	93, 152, 296, 299, 298, 274, 297, -279, -356, 80,
	402, 336, 337, -388, 608, 532, 247, 109, 110, 384,
	-357, 83, 83, 81, 316, 83, 83, -524, 84, -287,
	-316, 41, -290, 41, 349, 307, -288, -340, 152, -257,
	84, -530, 89, -535, -561, 89, -422, -566, 89, -164,
	-235, -555, -194, -409, -495, -367, 83, -367, 83, 68,
	11, 19, -360, -367, -375, 246, -6, 618, 372, -272,
	609, 89, 21, 89, -504, 89, -410, -471, -133, -269,
	-328, 279, 84, 84, 84, -435, -435, -438, -437, -441,
	448, 308, 456, -375, 89, 89, 84, 84, 89, -340,
	244, 167, 89, 642, 89, -447, -447, -340, -214, -240,
	-168, 544, -255, -228, -168, 21, 544, 356, 41, 99,
	41, 411, 89, -172, 125, 105, 106, -324, -325, 89,
	-393, -395, -316, 83, -257, -259, 89, -295, -360, -360,
	-253, -174, 35, -254, -293, -388, 544, -132, -131, -253,
	544, 83, -461, 161, 99, 143, 99, 99, -299, -299,
	-461, -450, 21, 84, -429, 84, -429, 83, 125, -363,
	-449, -452, 61, -249, 104, -363, 89, -259, -260, 41,
	295, 291, 125, 125, -261, 41, 275, 276, -271, 83,
	306, 15, 194, 83, 110, 110, -233, -393, -393, -525,
	338, 339, 340, 344, 342, 343, 341, -525, -393, -393,
	83, -416, -415, -363, -336, -336, 152, -565, -195, -198,
	-523, -340, 247, 21, 21, -340, -340, -320, 610, 99,
	89, 444, -272, -472, 611, -500, -442, -257, 125, 84,
	-440, 117, 410, 414, -361, -364, 99, 101, 186, 155,
	84, 84, 353, -340, -327, -326, 89, 89, 89, 308,
	543, -169, 60, 490, 89, 90, 405, 89, 90, 356,
	-164, 89, 643, 157, 125, 84, 157, -464, -367, -430,
	263, -174, 157, -293, -328, -133, -430, -256, -294, -340,
	89, -479, 169, 329, 544, 99, 143, 99, -194, -462,
	169, 329, -433, 84, 84, 84, -429, 99, 84, -456,
	-453, 83, -293, 265, 135, 89, 89, 99, 83, -490,
	31, 89, -394, 83, 84, 84, 84, 84, -393, 99,
	-257, -336, 84, 84, 157, 83, 21, -320, -473, 612,
	89, -509, 447, -503, -501, 442, 443, 444, 445, 89,
	-439, -440, 414, -361, -364, 606, 454, 454, 454, -340,
	244, 643, 157, 125, -447, -216, -340, 306, 427, -325,
	89, -396, -395, -189, 84, -431, 315, 21, -293, -336,
	-431, 84, 157, -336, -336, 329, 99, 143, 99, -195,
	329, -445, 314, 84, -456, -293, -455, -454, 313, 266,
	83, 84, -367, -379, -336, 84, -274, -273, 540, -393,
	-396, 81, -396, 81, -396, 81, -396, 81, 84, -257,
	-340, 247, -321, -340, -504, 89, -511, 245, -507, -508,
	446, -501, 21, 444, 21, 21, -134, 157, 114, 455,
	455, 455, 353, -326, 89, 89, -215, 35, 449, 383,
	-397, 253, 349, 350, 93, 544, 336, 337, -189, 21,
	-432, -257, -294, -360, -360, 99, 99, 84, 157, -340,
	262, 83, -374, -368, -367, 262, 84, -340, -278, -276,
	-277, 80, 461, 304, 305, 84, -525, -525, -525, -525,
	-279, 84, 157, -518, 83, 99, -506, -505, -507, 21,
	-504, 21, -504, -504, 451, -439, -340, 89, -336, -336,
	89, 89, 335, -316, 83, -444, -454, -453, -374, 84,
	157, -415, -277, 80, -276, 80, 16, 15, -396, -396,
	-396, -396, -340, -521, 31, 84, -517, -516, -317, -512,
	-340, 447, 448, 89, -504, 125, -596, -595, 629, 99,
	99, -340, -429, -434, 84, -368, -275, 301, 302, 31,
	169, -275, -520, -519, -318, 84, 157, 156, 89, 89,
	84, -450, 104, 41, 303, 157, 125, -516, -340, -519,
	41, -367, 156, -340,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 311, 312, 313, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 0, 0,
	0, 0, 0, 685, 686, 0, 649, 0, 0, 0,
	0, 0, 0, 532, 533, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 544, 545, 546, 547, 548,
	549, 550, 551, 552, 553, 554, 555, 556, 557, 558,
	559, 560, 561, 562, 563, 564, 565, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 0, 336, 332, 255,
	256, 257, 258, 259, 260, 343, 344, 509, 0, 0,
	0, 0, 768, -2, 99, 0, 0, 0, 0, 325,
	0, 316, 316, 937, 938, 939, 940, 941, 942, 943,
	944, 945, 946, 947, 948, 949, -2, 698, 0, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 396, 397, 398, 392,
	393, 395, 394, -2, 0, 0, 698, 0, 0, 0,
	776, 0, 0, 0, 819, 841, 23, 0, 7, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 0,
	0, 19, 0, 19, 0, 0, 0, 1352, 1353, 1354,
	1355, 2137, 2107, -2, 1878, 1855, 2031, 2032, 1932, 1943,
	2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176, 2177,
	2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186, 2187,
	2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197,
	2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207,
	2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
	1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821,
	1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831,
	1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841,
	1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
	1852, 1853, 1854, 1856, 1857, 1858, 1859, 1860, 1861, 1862,
	1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872,
	1873, 1874, 1875, 1876, 1877, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2033, 2034, 2035, 2036, 2037, 2038,
	2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048,
	2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058,
	2059, 2060, 2061, 2062, 2063, -2, 2065, 2066, 2067, 2068,
	2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078,
	2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119,
	2120, 2121, 2122, -2, -2, -2, 2126, 2127, 2128, 2129,
	2130, 2131, 2132, 2133, 2134, 2135, 2136, 2138, 2139, 2140,
	2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
	2151, 2152, 2153, 2154, 2155, 2156, 2157, 0, 309, 307,
	1825, 1855, 1878, 1932, 1943, 1944, 1979, 2031, 2032, 2064,
	2107, 2123, 2124, 2125, 2137, 0, 0, 954, 0, 746,
	0, 0, 751, 1301, 746, 337, 687, 688, 776, 802,
	647, 0, 374, 0, 1869, 378, 2114, 0, 0, 0,
	644, 368, 369, 370, 371, 372, 373, 0, 0, 927,
	0, 0, 364, 0, 331, 1934, 2136, 1356, 0, 0,
	0, 0, 0, 198, 1078, 200, 1080, 204, 212, 0,
	0, 0, 217, 218, 221, 222, 223, 224, 225, 0,
	229, 0, 231, 234, 0, 236, 237, 0, 240, 241,
	242, 0, 252, 253, 254, 1081, 1082, 1083, -2, 127,
	952, 1783, 1669, 0, 1676, 1689, 1700, 1433, 1434, 1435,
	1436, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	1473, 2172, 2213, 2214, 0, 1453, 1454, 1455, 1456, 1457,
	1458, 138, 150, 151, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 0, 1730, 1731, 1732, 1640, 1420, 1352, 0, 2181,
	0, 2203, 2208, 2209, 2210, 2211, 2202, 0, 0, 1625,
	0, 1615, 0, 0, -2, -2, 0, 0, 2004, -2,
	2215, 2216, 2217, 2178, 2199, 2207, 2182, 2183, 2206, 2174,
	2175, 2176, 2169, 2170, 2171, 2173, 2185, 2187, 2198, 0,
	2194, 2204, 2205, 2112, 0, 0, 0, 0, 0, 2154,
	152, 153, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1636,
	-2, -2, 1639, -2, 1642, -2, -2, -2, -2, 1647,
	1648, -2, 1650, -2, -2, -2, -2, -2, -2, -2,
	1627, 1628, 1629, 1630, 1619, 1620, 1621, 1622, 1623, 1624,
	-2, -2, -2, 802, 877, 0, 802, 0, 777, 824,
	827, 830, 833, 780, 0, 0, 100, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 327, 315,
	317, 0, 321, 0, 314, 1114, 1114, 1114, 0, 0,
	0, 0, 1114, 1114, 1114, 1114, 1114, 0, 1114, 0,
	0, 0, 0, 0, 1114, 0, 987, 1085, 1086, 1087,
	1112, 1113, 1186, 0, 0, 0, 703, 699, 700, 701,
	702, 790, 0, 792, 795, 0, 624, 624, 850, 850,
	570, 0, 0, 0, 624, 0, 584, 576, 0, 0,
	0, 624, 0, 0, 797, 797, 0, 627, 634, 624,
	624, -2, 624, 624, 621, 624, 0, 0, 1126, 590,
	591, 592, 576, 576, 595, 596, 597, 607, 608, 635,
	1807, 0, 0, 509, 509, 0, 509, 509, 0, 509,
	509, 509, 0, 705, 1974, 1876, 1949, 1835, 1934, 2136,
	0, 282, 2004, 287, 0, 1877, 1896, 0, 0, 1914,
	0, -2, 0, 353, 802, 0, 0, 776, 0, 0,
	0, 0, 509, 509, 509, 509, 509, 1185, 509, 509,
	509, 509, 509, 0, 0, 0, 509, 509, 509, 509,
	0, 0, 842, 843, 838, 839, 840, 844, 845, 5,
	6, 19, 0, 0, 0, 0, 0, 0, 106, 105,
	0, 1784, 1802, 1735, 1736, 1737, 1789, 1739, 1793, 1793,
	1793, 1793, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775,
	1776, 1777, 1793, 1793, 0, 0, 1782, 1759, 1791, 1791,
	1791, 1789, 1786, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1749, 1750, 1751, 1752, 1753, 1796, 1796, 1799,
	1799, 1796, 0, 410, 408, 409, 1665, 0, 0, 0,
	0, 746, 750, 1299, 0, 0, 0, 802, -2, 0,
	0, 648, 375, 1357, 0, 0, 379, 0, 380, 0,
	0, 0, 399, 0, 402, 387, 388, 389, 383, 0,
	178, 0, 366, 367, 0, 0, 333, 0, 0, 0,
	510, 0, 0, 0, 0, 0, 0, 209, 205, 213,
	216, 226, 233, 0, 245, 247, 250, 206, 214, 219,
	220, 227, 248, 207, 210, 211, 215, 249, 251, 208,
	228, 232, 246, 230, 235, 238, 239, 244, 0, 179,
	0, 0, 0, 0, 0, 1675, 0, 0, 1708, 1709,
	1710, 1711, 1712, 1713, 1714, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, -2, 1669, 0, 0, 1439, 1440,
	1441, 1442, 0, 1446, 0, 1474, 0, 0, 0, 0,
	0, 1729, 1733, 0, 1665, 1665, 0, 1665, 1661, 0,
	0, 0, 0, 0, 0, 1665, 1598, 0, 0, 1600,
	1616, 0, 0, 1602, 1603, 0, 1606, 1607, 1665, 0,
	1665, 1611, 1665, 1665, 1665, 1594, 1595, 0, 1661, 1661,
	1661, 1661, 0, 0, 1661, 1661, 1661, 1661, 1661, 1661,
	1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 0, 0,
	0, 0, 797, 0, 803, 0, -2, 0, 821, 823,
	825, 826, 828, 829, 831, 832, 834, 835, 782, 0,
	0, 102, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 0, 0, 0, 0, 0, 319, 0, 324, 0,
	0, 0, 0, 0, 951, 0, 0, 1114, 1114, 1114,
	988, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	1114, 1114, 1114, 0, 1132, 0, 0, 0, 705, 704,
	0, 791, 0, 0, 70, 850, 0, 0, 567, 568,
	0, 569, 0, 576, 624, 624, 582, 583, 578, 577,
	630, 631, 627, 0, 627, 627, 850, 0, 601, 602,
	603, 624, 624, 609, 798, 0, 610, 611, 627, 0,
	632, 633, 850, 0, 0, 850, 850, 0, 619, 620,
	622, 624, 0, 0, 1114, 0, 640, 578, 578, 1808,
	1809, 0, 0, 1123, 0, 0, 0, 0, 643, 0,
	0, 0, 0, 0, 706, 261, 265, 0, 268, 0,
	1974, 0, 1974, 0, 0, 275, 0, 0, 0, 0,
	0, 0, 305, 306, 0, 0, 0, 0, 296, 299,
	1293, 1294, 1075, 1076, 300, 301, 345, 346, 0, 797,
	820, 822, 816, 817, 818, 0, 72, 0, 0, 0,
	0, 0, 509, 0, 0, 0, 0, 0, 681, 0,
	967, 683, 0, 0, 0, 0, 0, 858, 852, 854,
	922, 138, 858, 8, 123, 120, 0, 19, 0, 0,
	19, 19, 0, 19, 310, 0, 1805, 1803, 1804, 1738,
	1790, 0, 1764, 0, 1765, 1766, 1767, 1778, 1779, 0,
	0, 1760, 0, 1761, 1762, 1763, 1754, 0, 1755, 1756,
	0, 1757, 1758, 308, 407, 0, 0, 1666, 955, 0,
	724, 738, 719, 0, 727, 0, 0, 1301, 0, 0,
	0, 707, 738, 709, 0, 727, 797, 774, 0, 752,
	0, 0, 376, 0, 384, 381, 0, 385, 0, 0,
	401, 403, 404, 405, 390, 391, 645, 362, 363, 354,
	355, 356, 357, 358, 359, 360, 361, 0, 0, 0,
	365, 148, 0, 334, 335, 0, 0, 0, 192, 193,
	194, 195, 196, 197, 199, 183, 670, 672, 1067, 1079,
	0, 1070, 0, 202, 243, 175, 0, 0, 0, 1670,
	1671, 1672, 1673, 1674, 1679, 0, 1681, 1683, 1685, 1687,
	0, 1705, -2, -2, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1690, 1703, 1704, 0,
	0, 0, 0, 0, 0, 1701, 1701, 1696, 0, 1459,
	1295, 1296, 1437, 0, 0, 1471, 1475, 0, 0, 0,
	0, 0, 139, 1660, 1565, 1566, 1567, 1568, 1569, 1570,
	1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580,
	1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
	1591, 1592, 1593, 0, 0, 1669, 0, 0, 0, 1662,
	1663, 0, 0, 0, 1553, 0, 0, 1559, 1560, 1561,
	0, 733, 0, 1626, 1599, 1617, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 876, 878, 0, 742, 744, 745, 771,
	752, 778, 0, 0, 0, 98, 103, 0, 1153, 0,
	0, 0, 0, 0, 0, 0, 74, 1127, 75, 1129,
	328, 329, 0, 0, 323, 0, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 1003, 1004, 507, 1061,
	0, 0, 0, 1077, 1102, 1110, 0, 0, 0, 0,
	0, 1159, 989, 994, 995, 996, 990, 991, 997, 998,
	0, 793, 0, 0, 891, 566, 625, 626, 851, 573,
	1934, 578, 850, 850, 585, 579, 586, 629, 587, 588,
	589, 627, 850, 850, 799, 624, 627, 612, 628, 627,
	1301, 616, 0, 623, 1301, 641, 1301, 0, 639, 593,
	594, 1161, 795, 423, 424, 426, 428, 0, 477, 477,
	477, 460, 477, 0, 0, 448, 1810, 0, 0, 0,
	0, 457, 1810, 0, 0, 1810, 1810, 1810, 1810, 1810,
	1810, 1810, 0, 0, 1810, 1810, 1810, 1810, 1810, 1810,
	1810, 1810, 1810, 1810, 1810, 0, 1810, 1810, 1810, 1810,
	1810, 1278, 1810, 0, 476, 1124, 467, 468, 469, 470,
	475, 0, 0, 504, 0, 0, 1002, 0, 507, 0,
	1044, 0, 863, 0, 864, 865, 861, 893, 917, 917,
	0, 917, 897, 1301, 0, 0, 273, 274, 262, 0,
	263, 0, 0, 276, 277, 0, 279, 280, 281, 288,
	1876, 1949, 283, 285, 0, 0, 289, 302, 303, 304,
	0, 0, 294, 295, 0, 0, 348, 349, 351, 0,
	752, 1128, 667, 1297, 668, 669, 673, 0, 0, 676,
	677, 678, 679, 680, 969, 0, 0, 1053, 1054, 1055,
	1056, 850, 0, 859, 0, 855, 923, 0, 925, 0,
	850, 0, 121, 19, 0, 114, 111, 0, 0, 0,
	0, 0, 1785, 1734, 1806, 0, 0, 0, 1787, 0,
	0, 0, 0, 0, 104, 754, 714, 0, 718, 735,
	0, 739, 0, 0, 731, 723, 728, 0, 0, 748,
	715, 1300, 0, 0, 0, 708, 0, 0, 713, 752,
	0, 775, 804, 805, 808, 1358, 0, 386, 382, 400,
	0, 509, 0, 0, 0, 186, 1064, 0, 187, 191,
	181, 0, 0, 0, 1069, 0, 1066, 1071, 0, 201,
	0, 0, 176, 177, 1144, 1153, 0, 0, 0, 1680,
	1682, 1684, 1686, 1688, 0, 1691, 1701, 1701, 1697, 0,
	1692, 0, 1694, 0, 1670, 1443, 0, 1476, 0, 0,
	0, 0, 0, 0, 0, 0, 1543, 1544, 0, 0,
	1548, 0, 1550, 1551, 1552, 1554, 0, 0, 0, 1558,
	0, 1597, 1618, 1601, 1604, 0, 1608, 0, 1610, 1612,
	1613, 1614, 0, 802, 802, 0, 0, 1515, 1515, 1515,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1460, 0, 1461, 1462, 0,
	0, 0, 879, 772, 0, 0, 0, 0, 0, 1151,
	0, 86, 0, 0, 0, 0, 93, 0, 0, 76,
	330, 318, 320, 0, 0, 1115, 0, 0, 0, 0,
	0, 957, 958, 960, 0, 963, 964, 965, 969, 795,
	0, 795, 1014, 1810, 511, 0, 0, 1063, 0, 1033,
	0, 0, 0, -2, 0, 0, 1110, 0, 0, 0,
	1163, 0, 0, 0, 692, 696, 23, 796, 0, 571,
	0, 572, 624, 580, 581, 850, 604, 605, 0, 0,
	850, 624, 624, 615, 627, 636, 0, 637, 1301, 1163,
	0, 0, 1123, 1229, 1197, 438, 0, 1313, 1314, 478,
	0, 1320, 1329, 1114, 1390, 0, 1329, 0, 0, 1331,
	1332, 0, 0, 0, 0, 461, 462, 0, 447, 0,
	0, 0, 0, 0, 0, 446, 0, 0, 488, 0,
	0, 0, 0, 0, 1811, 1810, 1810, 0, 455, 456,
	0, 459, 0, 0, 0, 0, 0, 0, 0, 0,
	1810, 1810, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 1286, 0, 1014, 1810, 0, 0, 0,
	0, 511, 1031, 1049, 0, 425, 485, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 795, 918, 0, 920, 921, 895, -2, 0,
	863, 900, 1665, 266, 267, 0, 0, 272, 290, 292,
	264, 0, 0, 0, 291, 293, 297, 298, 347, 350,
	352, 814, 0, 0, 1187, 0, 970, 971, 973, 974,
	0, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1860, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 968, 684, 848, 853,
	860, 924, 926, 139, 856, 848, 0, 124, 19, 123,
	115, 116, 0, 19, 0, 0, 0, 0, 1795, 1794,
	1780, 0, 1781, 1792, 1797, 0, 1800, 0, 411, 758,
	0, 0, 738, 740, 0, 0, 738, 0, 0, 747,
	0, 0, 0, 0, 0, 0, 738, 814, 754, 0,
	811, 809, 810, 0, 0, 646, 149, 406, 0, 0,
	0, 0, 0, 671, 0, 1068, 183, 0, 0, 203,
	0, 0, 0, 1153, 1148, 1664, 1693, 1695, 0, 1702,
	1698, 1438, 1447, 1472, 0, 0, 1478, 1490, 1490, 0,
	0, 0, 1481, 1793, 1793, 1484, 1789, 1791, 1789, 1490,
	1490, 0, 140, 0, 0, 1549, 0, 0, 0, 734,
	0, 0, 0, 1511, 1513, 1515, 1515, 1522, 1516, 1523,
	1524, 1515, 1515, 1515, 1515, 1529, 1515, 1515, 1515, 1515,
	1515, 1515, 1515, 1515, 1515, 1515, 1509, 0, 0, 1723,
	1724, 743, 0, 0, 785, 786, 787, 788, 789, 0,
	0, 61, 61, 1153, 0, 97, 87, 0, 0, 0,
	0, 0, 322, 0, 77, 78, 0, 0, 85, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 1306, 0,
	1018, 1015, 1016, 1017, 0, 1058, 512, 513, 514, 515,
	0, 0, 0, 1062, 0, 0, 1026, 0, 0, 0,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, -2, 1118, 0,
	0, 0, 1306, 1137, 0, 0, 1142, 1306, 1306, 0,
	1171, 0, 1160, 746, 0, -2, 0, 0, 694, 0,
	0, 892, 574, 850, 598, 800, 801, 1301, 850, 850,
	624, 642, 638, 1171, 1162, 0, 427, 477, 0, 1217,
	0, 0, 1223, 0, 1230, 431, 0, 479, 0, 1319,
	1346, 1330, 1346, 1391, 1346, 1346, 1114, 0, 479, 0,
	0, 449, 0, 0, 0, 0, 0, 445, 482, 808,
	432, 434, 435, 436, 486, 487, 489, 0, 491, 492,
	451, 463, 464, 465, 466, 0, 0, 0, 458, 471,
	472, 473, 474, 433, 1246, 1247, 1248, 1251, 1252, 1253,
	1254, 0, 0, 1257, 1258, 1259, 1260, 1261, 1343, 1344,
	1345, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1287, 1288,
	1289, 1290, 1291, 1292, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 0, 0, 1282, 0, 0, 0, 1018, 0,
	0, 0, 0, 0, 1058, 1033, 0, 1051, 0, 1045,
	1046, 0, 0, 716, 850, 340, 0, 887, 880, 0,
	869, 884, 885, 886, 872, 0, 874, 0, 870, 871,
	850, 862, 894, 919, 896, 899, 901, 902, 908, 0,
	0, 0, 0, 269, 270, 271, 278, 0, 531, 284,
	770, 0, 1298, 674, 675, 1188, 1189, 682, 0, 975,
	846, 0, 0, 846, 119, 122, 0, 117, 0, 0,
	0, 0, 109, 107, 1788, 0, 0, 760, 163, 0,
	0, 0, 736, 0, 741, 738, 722, 732, 721, 729,
	730, 749, 1302, 1303, 1304, 1305, 738, 712, 711, 773,
	758, 806, 807, 0, 1359, 377, 0, 1065, 183, 188,
	189, 190, 184, 182, 1072, 0, 1074, 0, 1146, 0,
	0, 1699, 1477, 1448, 1479, 1491, 1492, 1480, 0, 1450,
	1451, 1482, 1483, 1485, 1486, 1487, 1488, 1489, 1452, 1545,
	0, 1547, 1555, 1556, 0, 1605, 1609, 0, 0, 0,
	0, 0, 1520, 1521, 1525, 1526, 1527, 1528, 1530, 1531,
	1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 802, 1510,
	0, 0, 0, 0, 0, 0, 0, 783, 0, 0,
	0, 63, 0, 63, 1152, 1154, 0, 922, 0, 0,
	94, 0, 0, 79, 80, 0, 0, 0, 950, 953,
	959, 961, 0, 0, 0, 1307, 1308, 1310, 1311, 1312,
	0, 986, 0, 0, 1006, 1007, 1008, 1020, 0, 0,
	0, 517, 518, 0, 0, 0, 530, 526, 527, 528,
	508, 1057, 1040, 0, 0, 1029, 0, 0, 1039, 0,
	1119, 1810, 1810, 1810, 0, 0, 1231, 1810, 1810, 0,
	1139, 1141, 0, 0, 1235, 1174, 0, 0, 1165, 0,
	917, 0, 0, 850, 693, 696, 697, 794, 575, 613,
	617, 614, 850, 1174, 422, 1195, 0, 0, 0, 0,
	0, 1227, 0, 0, 1199, 0, 450, 480, 0, -2,
	0, 1347, 0, 1333, 1347, 0, 0, 1346, 0, 439,
	479, 0, 0, 0, 493, 497, 498, 0, 495, 1386,
	0, 496, 0, 484, 0, 490, 1249, 1250, 0, 1255,
	1256, 0, 1280, 0, 0, 0, 430, 499, 0, 0,
	0, 500, 501, 506, 1026, 0, 1040, 0, 1050, 0,
	1047, 1048, 802, 0, 0, 866, 888, 0, 0, 867,
	0, 868, 873, 875, 339, 903, 0, 0, 905, 906,
	907, 898, 286, 815, 972, 0, 836, 0, 0, 857,
	837, 0, 19, 0, 0, 112, 1798, 1801, 762, 0,
	759, 164, 0, 0, 0, 0, 726, 737, 720, 710,
	760, 812, 813, 185, 180, 1073, 1156, 0, 1147, 0,
	0, 1557, 0, 1515, 1512, 1515, 1514, 1506, 0, 1463,
	0, 1465, 1466, 1467, 0, 1469, 1470, 0, 781, 0,
	59, 0, 62, 60, 0, 96, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 992, 1235, 0, 992, 1019,
	1005, 0, 1059, 1060, 0, 519, 520, 0, 523, 529,
	1021, 0, 0, 1023, 1024, 1025, 0, 0, 1037, 0,
	0, 0, 0, 1111, 1125, 0, 0, 0, -2, 0,
	-2, 1136, 0, 1180, 0, 1172, 0, 1164, 0, 1167,
	850, 850, -2, 690, 695, 0, 618, 1180, 1197, 0,
	1218, 0, 0, 0, 0, 0, 0, 0, 1198, 0,
	1211, 481, 1348, -2, 1362, 1364, 0, 1124, 1367, 1368,
	0, 0, 0, 0, 0, 0, 1412, 1376, 0, 0,
	1380, 1381, 1382, 0, 0, 1385, 0, 1717, 1718, 0,
	1389, 0, 0, 0, 0, 0, 0, 0, 1327, 440,
	441, 0, 443, 444, 1810, 1387, 483, 437, 1810, 453,
	1279, 1283, 1284, 1281, 505, 502, 503, 1029, 1032, 1043,
	1052, 717, 797, 341, 342, 889, 0, 881, 912, 909,
	0, 0, 976, 847, 849, 113, 118, 0, 0, 764,
	0, 761, 0, 755, 757, 174, 725, 762, 134, 166,
	0, 0, 1449, 1546, 1596, 1518, 1519, 0, 1507, 0,
	1501, 1502, 1503, 1508, 0, 0, 784, 779, 64, 90,
	0, 0, 95, 68, 81, 0, 0, 0, 0, 978,
	985, 999, 1130, 1309, 984, 0, 0, 516, 521, 0,
	524, 525, 1041, 1040, 0, 1027, 1028, 0, 1035, 0,
	0, 1098, 1789, 0, 1120, 1121, 1122, 1232, 1233, 1234,
	1190, 1138, 0, -2, 1243, 0, 0, 1134, 1156, 1190,
	0, 0, 1168, 0, 1175, 0, 1173, 1166, 802, 691,
	1177, 429, 1229, 1219, 0, 1221, 0, 0, 0, 0,
	1200, -2, 0, 1363, 1365, 1366, 1369, 1370, 1371, 1417,
	1418, 1419, 0, 0, 1374, 1414, 1415, 1416, 1375, 0,
	0, 0, 0, 0, 1715, 1716, 1410, 0, 0, 1334,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1335, 0, 0,
	0, 1326, 1328, 442, 0, 0, 1810, 1042, 338, 0,
	0, 913, 915, 910, 911, 108, 110, 125, 0, 763,
	165, 0, 764, 136, 0, 157, 0, 1157, 0, 1517,
	1504, 0, 0, 0, 0, 0, 1719, 1720, 1721, 0,
	1464, 1468, 0, 89, 0, 66, 0, 82, 83, 0,
	0, 0, 1000, 1001, 1009, 1010, 0, 1012, 1013, 522,
	1022, 1030, 1034, 1037, 0, 1089, 0, 808, 0, 1192,
	0, 1140, 1123, 1245, 1810, 1143, 1192, 0, 1237, 1810,
	1810, 1158, 0, 1170, 0, 1182, 0, 1176, 797, 421,
	0, 1179, 1215, 1220, 1222, 1224, 0, 1228, 1226, 1201,
	-2, 0, 1209, 0, 0, 1372, 1373, 0, 0, 1615,
	1810, 0, 1405, 0, 1089, 1089, 1089, 1089, 0, 494,
	452, 0, 890, 904, 0, 0, 0, 753, 126, 0,
	135, 154, 0, 167, 168, 0, 0, 0, 0, 1149,
	0, 1493, 0, 0, 0, 1497, 1498, 1499, 1500, 91,
	0, 65, 68, 0, 0, 0, 977, 0, 1011, 1036,
	1038, 1088, 1099, 1100, 808, 1133, 0, 1229, 1244, 0,
	1135, 1236, 0, 0, 0, 1169, 1181, 0, 1184, 689,
	1178, 1196, 0, 1225, 1202, 1210, 0, 1205, 0, 0,
	0, 1413, 0, 1379, 0, 1384, 1393, 1406, 0, 0,
	1315, 0, 1317, 0, 1321, 0, 1323, 0, 0, 454,
	914, 916, 0, 766, 756, 137, 141, 0, 163, 160,
	0, 169, 0, 0, 0, 0, 1145, 0, 0, 1494,
	1495, 1496, 0, 67, 69, 84, 0, 979, 980, 993,
	1090, 1810, 1810, 0, 0, 0, 1096, 1097, 1101, 0,
	1217, 1249, 1238, 1239, 1240, 1183, 1216, 1204, 0, -2,
	1212, 0, 0, 1667, 1677, 1678, 1377, 1383, 1392, 1394,
	1395, 0, 1407, 1408, 1409, 1411, 1089, 1089, 1089, 1089,
	1325, 765, 0, 128, 0, 0, 158, 159, 161, 0,
	170, 0, 172, 173, 0, 1505, 92, 981, 0, 0,
	1093, 1094, 0, 1193, 0, 1195, 1206, -2, 0, 1214,
	0, 1378, 1396, 0, 1397, 0, 0, 0, 1316, 1318,
	1322, 1324, 767, 1155, 0, 142, 0, 144, 146, 147,
	1349, 155, 156, 162, 171, 0, 966, 982, 0, 1091,
	1092, 1095, 0, 1197, 1213, 1668, 1398, 1400, 1401, 0,
	0, 1399, 129, 130, 0, 143, 0, 0, 1150, 983,
	1194, 1191, 1402, 1404, 1403, 0, 0, 145, 1350, 131,
	132, 133, 0, 1351,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 116, 3, 3, 3, 147, 139, 3,
	83, 84, 144, 142, 157, 143, 156, 145, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 644, 641,
	126, 125, 127, 3, 645, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 149, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 642, 138, 643, 150,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 117, 118, 119, 120, 121, 122, 123, 124,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 146, 148, 151, 152, 153, 154, 155, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:825
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:832
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:838
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:856
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:871
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:875
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:881
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:886
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:890
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:923
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:937
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:948
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:960
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:964
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:969
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:973
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:979
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:993
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:997
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1001
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1005
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1012
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1020
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1028
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1041
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1058
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1066
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1076
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1086
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1098
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1108
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1118
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1129
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1140
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1154
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1162
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1178
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1187
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1197
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1206
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELDATABASE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[11].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-13 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1216
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELTABLE,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName:  tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:     tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[10].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[13].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1229
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1246
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1256
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1266
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1276
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1296
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1302
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1309
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1317
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1323
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1332
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1342
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1350
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1358
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1366
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1376
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1384
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1394
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1401
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1410
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1424
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1430
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1434
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1440
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1449
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1459
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1463
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1469
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1478
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1482
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1488
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1509
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1523
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1530
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1534
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1540
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1544
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1557
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1565
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1569
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1581
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1585
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1599
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1603
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1608
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1615
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1619
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1623
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1629
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1638
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1649
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1653
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1659
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1663
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1669
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1673
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1679
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1703
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1722
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1726
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1730
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1735
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1739
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1748
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1758
		{
			yyVAL.str = ""
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1765
		{
			yyVAL.str = yyDollar[3].str
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1770
		{
			yyVAL.str = "\n"
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1777
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1782
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1786
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1814
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1818
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1824
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1832
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1852
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1871
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1896
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1900
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1904
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1909
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1913
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1919
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1932
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1943
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1956
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1960
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1970
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1983
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1996
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2008
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2016
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2026
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2036
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2040
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2044
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2048
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2052
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2056
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2063
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2067
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2073
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2080
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2089
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2093
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2111
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2115
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2119
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2123
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2127
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2131
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2135
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2139
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2143
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2147
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2151
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2155
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2159
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2163
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2167
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2171
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2175
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2179
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2183
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2187
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2191
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2195
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2199
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2203
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2207
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2211
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2215
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2219
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2223
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2227
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2231
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2235
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2239
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2243
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2247
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2251
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2255
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2259
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2263
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2267
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2271
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2275
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2279
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2283
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2287
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2291
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2295
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2299
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2313
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2320
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 264:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2336
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2354
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2358
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2364
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2371
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2379
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2383
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2387
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2391
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2397
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2401
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2407
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2414
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2421
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2430
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2460
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2464
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2474
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2480
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2484
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2491
		{
			yyVAL.str = yyDollar[3].str
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2497
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2501
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2507
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2515
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2524
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2533
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2549
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2572
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2595
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2609
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2617
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2624
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2631
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2640
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2644
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2648
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2654
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2658
		{
			yyVAL.str = yyDollar[1].str
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2664
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2668
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2674
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2678
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2689
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2695
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2700
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2704
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2708
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2712
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2716
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2720
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2724
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2728
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2732
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2738
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2742
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2746
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2750
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2760
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2779
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2792
		{
			var name *tree.CStr
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2805
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2818
		{
			var name *tree.CStr
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2834
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2841
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2852
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2863
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2867
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2873
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2883
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2889
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2893
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2899
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2905
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 350:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2909
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2913
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2917
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2923
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2936
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2942
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2946
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2952
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2956
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2962
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2968
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2979
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2985
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2989
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2993
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2997
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3001
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3005
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3013
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3021
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3031
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3043
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3047
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3063
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3102
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3106
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3112
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3118
		{
			yyVAL.str = yyDollar[1].str
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3123
		{
			yyVAL.str = "true"
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3124
		{
			yyVAL.str = "false"
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3125
		{
			yyVAL.str = yyDollar[1].str
		}
	case 406:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3130
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 407:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3136
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3145
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3152
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3160
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3164
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3188
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3211
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3221
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3228
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3235
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[5].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3245
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3249
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3255
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3259
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3283
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3293
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3303
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3319
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3337
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3341
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3347
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3351
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3357
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3363
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3371
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3381
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3389
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3399
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3409
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3419
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3426
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3430
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3434
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3438
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3442
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3449
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3455
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3459
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3463
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3467
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3471
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3475
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3479
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3483
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3488
		{
			yyVAL.str = ""
		}
	case 477:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3519
		{
			yyVAL.str = ""
		}
	case 478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3523
		{
			yyVAL.str = string("COLUMN")
		}
	case 479:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3528
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3534
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3540
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3548
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3552
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3558
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3566
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3573
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3579
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3585
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3591
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3597
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3604
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3611
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3625
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3637
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3643
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3651
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3655
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 499:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3662
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 500:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3680
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3695
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3710
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3725
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3738
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3744
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3755
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3768
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3772
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3780
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3784
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3789
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3793
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3809
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3813
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3817
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3821
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3828
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3832
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3836
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3840
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3847
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3851
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3858
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3862
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3866
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3870
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3877
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3884
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3890
		{
			yyVAL.item = nil
		}
	case 530:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3895
		{
			yyVAL.item = nil
		}
	case 566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3940
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3957
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3965
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3973
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3977
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3981
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				&tree.Role{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3992
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3996
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 575:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4002
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4007
		{
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4011
		{
		}
	case 580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4016
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 581:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4026
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4036
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4044
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4050
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4056
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 586:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4062
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 587:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4068
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4074
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4080
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4089
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4093
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4097
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 593:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4101
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 594:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4105
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4109
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4113
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4123
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4132
		{
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4134
		{
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4143
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4153
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4162
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4166
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4170
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4176
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4182
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4188
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 614:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4214
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4226
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4234
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4240
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4252
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4272
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4278
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4285
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4289
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4294
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4298
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4302
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4307
		{
			yyVAL.str = ""
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4311
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4317
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4332
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4336
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4342
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4350
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4357
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4365
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4371
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4377
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4382
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4390
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4396
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4401
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4407
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4413
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4417
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 667:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4445
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 668:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4453
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4461
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4469
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4473
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4479
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4492
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4500
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4509
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4523
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4531
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4539
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4545
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4553
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4559
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4567
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4573
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4583
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4588
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4611
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4624
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4639
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4645
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 695:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4651
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4660
		{
		}
	case 697:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4662
		{
		}
	case 698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4665
		{
		}
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4674
		{
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4678
		{
		}
	case 707:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4683
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4692
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4699
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4705
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4713
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4720
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4727
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4747
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4755
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4765
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4769
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4775
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4782
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4788
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4796
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4803
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4810
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4829
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4833
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4837
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4842
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4846
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4850
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4856
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4865
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4869
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4875
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4879
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 735:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4885
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4889
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4895
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4900
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4904
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4911
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4915
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4922
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4927
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4931
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4937
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4941
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4947
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4951
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4956
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4960
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4973
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4995
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5017
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5040
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5048
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5057
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5061
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5074
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5078
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5083
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5087
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5094
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5099
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5106
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5112
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5116
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5120
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5124
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5128
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5132
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5137
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5141
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5147
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5157
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5176
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5190
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5194
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5200
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5209
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5213
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5217
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5221
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5225
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5231
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5238
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5247
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5251
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5257
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5265
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5269
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5274
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5278
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5284
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5288
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5292
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5297
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5301
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5307
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5313
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5317
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5323
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5328
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5332
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5336
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5341
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5345
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5349
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5354
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5358
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5366
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5370
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5374
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5388
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5392
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5402
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5412
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5422
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5434
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5442
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5450
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5459
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5467
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5475
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5483
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5491
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5499
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5507
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5515
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5523
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5533
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5544
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5558
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5562
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5566
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 841:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5571
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5575
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5579
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5588
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5592
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5597
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:5601
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5606
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5610
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5616
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5620
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5626
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5630
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5634
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5638
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5643
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5651
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5657
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5665
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5673
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5683
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5689
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5698
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5707
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5716
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5726
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5730
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5740
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 873:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5744
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 874:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5748
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 875:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5752
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 876:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5758
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5768
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5772
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5778
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5784
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5788
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5794
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5800
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 884:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5804
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 885:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5808
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 886:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5812
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS_L2
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5818
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5822
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5828
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5832
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5838
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5842
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5848
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5852
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5862
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5875
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5881
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5887
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5901
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5912
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5919
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5923
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5929
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5939
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5943
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5947
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5952
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5960
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5964
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 912:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5969
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 913:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5973
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5977
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5981
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5985
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5990
		{
			yyVAL.str = ""
		}
	case 918:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5994
		{
			yyVAL.str = yyDollar[1].str
		}
	case 919:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5998
		{
			yyVAL.str = yyDollar[2].str
		}
	case 920:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6004
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 921:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6008
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6013
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 923:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6017
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6021
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6025
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6029
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6035
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 950:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6077
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6090
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 952:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6096
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 953:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6102
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6115
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6120
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6127
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6134
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6138
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6144
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6150
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6155
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6159
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6163
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6167
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6174
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6207
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6212
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6219
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6226
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6230
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6236
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6242
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6246
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6250
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6256
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6262
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6268
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6272
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6278
		{
			yyVAL.str = ""
		}
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6285
		{
			yyVAL.str = yyDollar[2].str
		}
	case 984:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6291
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 985:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6306
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 986:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6323
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6340
		{
			yyVAL.str = yyDollar[1].str
		}
	case 988:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6344
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 989:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6350
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 990:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6354
		{
			yyVAL.str = "DEFINER = "
		}
	case 991:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6358
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 992:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6363
		{
			yyVAL.str = ""
		}
	case 993:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6367
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 999:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6381
		{
			yyVAL.str = ""
		}
	case 1002:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6389
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1003:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6395
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6400
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6406
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6419
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6424
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6429
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6435
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6442
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6449
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6456
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6463
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6471
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6477
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6484
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6491
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6499
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6505
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6514
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6531
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6547
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6566
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6572
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6581
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6599
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6605
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6612
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6620
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:6626
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6634
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:6640
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6648
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:6654
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6663
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6667
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6672
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6676
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6683
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1040:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6688
		{
			yyVAL.str = ""
		}
	case 1041:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6692
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1042:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6698
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6711
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6722
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6726
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6732
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6738
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6744
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6751
		{
			yyVAL.str = ""
		}
	case 1050:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6755
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6760
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1052:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:6764
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1053:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6770
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6778
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6786
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6794
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6802
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1058:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6807
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6819
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:6830
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6939
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6943
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6949
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6962
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6966
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6972
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6985
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6989
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6993
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6998
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7002
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7008
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7015
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7021
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7030
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1077:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7037
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7048
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7052
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7058
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7067
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7071
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7075
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7080
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7084
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7088
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7092
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7098
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7129
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7133
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7159
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7165
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7177
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7183
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7189
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7195
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7201
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7209
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7213
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7219
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7233
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7247
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7251
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7255
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7259
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7263
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7267
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7271
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7277
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7292
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7296
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7307
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7311
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7316
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7320
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7326
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7330
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7336
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7345
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7354
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7360
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7364
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7370
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7381
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7387
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7405
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7423
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7441
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7457
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7461
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7470
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7482
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7491
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7503
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7513
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7523
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7534
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7544
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7555
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7563
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7574
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7581
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7591
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7604
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7612
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:7621
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7630
		{
			yyVAL.str = ""
		}
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:7634
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7640
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7644
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7649
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7653
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:7660
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7672
		{
			yyVAL.str = ""
		}
	case 1157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7676
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1158:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7682
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7703
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:7717
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7721
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:7725
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7731
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7735
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7742
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7749
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:7756
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7763
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7767
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7771
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7779
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:7786
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7793
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7797
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:7804
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7811
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7815
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:7821
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7827
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7831
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7838
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7845
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:7852
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7859
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7863
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7868
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7872
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7876
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7881
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:7885
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7898
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7902
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:7910
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7918
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7922
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7934
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7938
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7944
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:7948
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7954
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:7967
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7981
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7985
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7991
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:7995
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8001
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8010
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8021
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8025
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8034
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8040
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8045
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8053
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8057
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8067
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8071
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8082
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8090
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8098
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8106
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8117
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8126
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8136
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8146
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8150
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8155
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8159
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8165
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8169
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8175
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8184
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8198
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8204
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8208
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8214
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8223
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8233
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8237
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8243
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8247
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8251
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8257
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8261
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8265
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8269
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8273
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8277
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8281
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8286
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8290
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8294
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8298
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8302
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8306
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8310
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8314
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8318
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8322
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8326
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8330
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8334
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8340
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8346
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8350
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8354
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8358
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8362
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8368
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8374
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8380
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8386
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8392
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8398
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8402
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8406
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8410
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8415
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8426
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8430
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8436
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8447
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8451
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8457
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8461
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8465
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8469
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8473
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8477
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8491
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8495
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8504
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8510
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8518
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8522
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8529
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8538
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8546
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8554
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8561
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:8565
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8571
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8575
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8579
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8585
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8589
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8595
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8608
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8621
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8660
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8700
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8714
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8720
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8733
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8746
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8759
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8772
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:8787
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8797
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8803
		{
			yyVAL.str = ""
		}
	case 1330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8807
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1333:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8817
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8823
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8829
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8850
		{
			yyVAL.str = ""
		}
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8854
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1348:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:8860
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8866
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8870
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8875
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8883
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8887
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8891
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8895
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:8901
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8907
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8911
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:8916
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8923
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8927
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8933
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:8937
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8943
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8947
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8951
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8955
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8959
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8963
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8968
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8972
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8976
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8980
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8984
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8988
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8992
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:8996
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9000
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9004
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9018
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9022
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9026
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9030
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9034
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9038
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9044
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9048
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9053
		{
			yyVAL.str = ""
		}
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9057
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9063
		{
			yyVAL.str = ""
		}
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9067
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9073
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9090
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9097
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9104
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9111
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9118
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9127
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9133
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1400:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9139
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1401:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9143
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1402:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9147
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1403:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9151
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9155
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9160
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9167
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9171
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9175
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9180
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9184
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9189
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9193
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9209
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9215
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9219
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9223
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9227
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9231
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9235
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9239
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9243
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9247
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9251
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9255
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9259
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9263
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9269
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9273
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9277
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9281
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9285
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9289
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9293
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9297
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9301
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9305
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9347
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9351
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9355
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9360
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9368
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9372
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9376
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9380
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9384
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9406
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9410
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9418
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9424
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9433
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9442
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9453
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9463
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9473
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9482
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9492
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9502
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9512
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1471:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9535
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9540
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9550
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:9554
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:9560
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9569
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9581
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9598
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9615
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9628
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9641
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9653
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9667
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9682
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9697
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9714
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9729
		{
		}
	case 1494:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9736
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9740
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9744
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9750
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9754
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9758
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:9762
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9768
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9772
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:9776
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9782
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9790
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9800
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:9804
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9811
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9816
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9820
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9825
		{
			yyVAL.str = ","
		}
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9829
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1513:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9834
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9838
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1515:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9843
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:9850
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9876
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9888
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9900
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9911
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9922
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9933
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9943
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9953
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9964
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9975
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9986
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9997
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10008
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10019
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10030
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10041
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10052
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10063
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10074
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10085
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10096
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10107
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10125
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10134
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10143
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10152
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10161
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10172
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10181
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10191
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10200
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10209
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10218
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10227
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10239
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10250
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10263
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10275
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10298
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1594:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10334
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10347
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10360
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10372
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10381
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10389
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10397
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10410
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10419
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10430
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10441
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10450
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10462
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10472
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10482
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10491
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10502
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10511
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10521
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10530
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10539
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10549
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10553
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10563
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10582
		{
		}
	case 1626:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10584
		{
		}
	case 1660:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10625
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10637
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10641
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:10645
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:10651
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10656
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10660
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10666
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10670
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10676
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10680
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10687
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10691
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10695
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10704
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10708
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10712
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10717
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10721
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10727
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10731
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10735
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10739
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10743
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10747
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10751
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10755
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10759
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10763
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10771
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10775
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10779
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1693:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10783
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1694:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10787
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1695:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10791
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1696:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10795
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1697:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10799
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10803
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1699:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10807
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1701:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10813
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1702:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10817
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1703:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10823
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10827
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1705:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10834
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1706:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10838
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10842
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1708:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10848
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10852
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1710:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10856
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1711:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10860
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10864
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10868
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:10872
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1715:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10878
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1716:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10882
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1717:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10886
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1718:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:10890
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10896
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1720:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10909
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1721:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10914
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1722:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10920
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1723:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10924
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1724:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10937
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10942
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1726:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10946
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1727:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10950
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1728:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10954
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1729:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10958
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10965
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1731:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10969
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10973
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1733:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10977
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10984
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10995
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11000
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11006
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11018
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11030
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11042
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11055
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11068
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11081
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11094
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11107
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11120
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11133
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11146
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11159
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11172
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11187
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11214
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11256
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11292
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11328
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11345
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11357
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11377
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11397
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1763:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11417
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11433
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11446
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11459
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11472
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11485
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11497
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11509
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11521
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11533
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11545
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1774:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11557
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11569
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11581
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11593
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11605
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11618
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11631
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11644
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11657
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11672
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11680
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:11689
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11699
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11722
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:11727
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11733
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11740
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11744
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11749
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11753
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:11759
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11765
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11772
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11779
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11788
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11795
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:11802
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11811
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11815
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11819
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11825
		{
		}
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:11827
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1810:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11837
		{
			yyVAL.str = ""
		}
	case 1811:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:11841
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
