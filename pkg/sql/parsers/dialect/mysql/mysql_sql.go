// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"go/constant"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const CONNECT = 57367
const MANAGE = 57368
const GRANTS = 57369
const OWNERSHIP = 57370
const REFERENCE = 57371
const LOWER_THAN_SET = 57372
const SET = 57373
const ALL = 57374
const DISTINCT = 57375
const DISTINCTROW = 57376
const AS = 57377
const EXISTS = 57378
const ASC = 57379
const DESC = 57380
const INTO = 57381
const DUPLICATE = 57382
const DEFAULT = 57383
const LOCK = 57384
const KEYS = 57385
const NULLS = 57386
const FIRST = 57387
const LAST = 57388
const AFTER = 57389
const INSTANT = 57390
const INPLACE = 57391
const COPY = 57392
const DISABLE = 57393
const ENABLE = 57394
const UNDEFINED = 57395
const MERGE = 57396
const TEMPTABLE = 57397
const DEFINER = 57398
const INVOKER = 57399
const SQL = 57400
const SECURITY = 57401
const CASCADED = 57402
const VALUES = 57403
const NEXT = 57404
const VALUE = 57405
const SHARE = 57406
const MODE = 57407
const SQL_NO_CACHE = 57408
const SQL_CACHE = 57409
const JOIN = 57410
const STRAIGHT_JOIN = 57411
const LEFT = 57412
const RIGHT = 57413
const INNER = 57414
const OUTER = 57415
const CROSS = 57416
const NATURAL = 57417
const USE = 57418
const FORCE = 57419
const LOWER_THAN_ON = 57420
const ON = 57421
const USING = 57422
const SUBQUERY_AS_EXPR = 57423
const LOWER_THAN_STRING = 57424
const ID = 57425
const AT_ID = 57426
const AT_AT_ID = 57427
const STRING = 57428
const VALUE_ARG = 57429
const LIST_ARG = 57430
const COMMENT = 57431
const COMMENT_KEYWORD = 57432
const QUOTE_ID = 57433
const STAGE = 57434
const CREDENTIALS = 57435
const STAGES = 57436
const INTEGRAL = 57437
const HEX = 57438
const BIT_LITERAL = 57439
const FLOAT = 57440
const HEXNUM = 57441
const NULL = 57442
const TRUE = 57443
const FALSE = 57444
const LOWER_THAN_CHARSET = 57445
const CHARSET = 57446
const UNIQUE = 57447
const KEY = 57448
const OR = 57449
const PIPE_CONCAT = 57450
const XOR = 57451
const AND = 57452
const NOT = 57453
const BETWEEN = 57454
const CASE = 57455
const WHEN = 57456
const THEN = 57457
const ELSE = 57458
const END = 57459
const ELSEIF = 57460
const LOWER_THAN_EQ = 57461
const LE = 57462
const GE = 57463
const NE = 57464
const NULL_SAFE_EQUAL = 57465
const IS = 57466
const LIKE = 57467
const REGEXP = 57468
const IN = 57469
const ASSIGNMENT = 57470
const ILIKE = 57471
const SHIFT_LEFT = 57472
const SHIFT_RIGHT = 57473
const DIV = 57474
const MOD = 57475
const UNARY = 57476
const COLLATE = 57477
const BINARY = 57478
const UNDERSCORE_BINARY = 57479
const INTERVAL = 57480
const OUT = 57481
const INOUT = 57482
const BEGIN = 57483
const START = 57484
const TRANSACTION = 57485
const COMMIT = 57486
const ROLLBACK = 57487
const WORK = 57488
const CONSISTENT = 57489
const SNAPSHOT = 57490
const CHAIN = 57491
const NO = 57492
const RELEASE = 57493
const PRIORITY = 57494
const QUICK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const DECIMAL_VALUE = 57509
const TIME = 57510
const TIMESTAMP = 57511
const DATETIME = 57512
const YEAR = 57513
const CHAR = 57514
const VARCHAR = 57515
const BOOL = 57516
const CHARACTER = 57517
const VARBINARY = 57518
const NCHAR = 57519
const TEXT = 57520
const TINYTEXT = 57521
const MEDIUMTEXT = 57522
const LONGTEXT = 57523
const BLOB = 57524
const TINYBLOB = 57525
const MEDIUMBLOB = 57526
const LONGBLOB = 57527
const JSON = 57528
const ENUM = 57529
const UUID = 57530
const VECF32 = 57531
const VECF64 = 57532
const GEOMETRY = 57533
const POINT = 57534
const LINESTRING = 57535
const POLYGON = 57536
const GEOMETRYCOLLECTION = 57537
const MULTIPOINT = 57538
const MULTILINESTRING = 57539
const MULTIPOLYGON = 57540
const INT1 = 57541
const INT2 = 57542
const INT3 = 57543
const INT4 = 57544
const INT8 = 57545
const S3OPTION = 57546
const STAGEOPTION = 57547
const SQL_SMALL_RESULT = 57548
const SQL_BIG_RESULT = 57549
const SQL_BUFFER_RESULT = 57550
const LOW_PRIORITY = 57551
const HIGH_PRIORITY = 57552
const DELAYED = 57553
const CREATE = 57554
const ALTER = 57555
const DROP = 57556
const RENAME = 57557
const ANALYZE = 57558
const ADD = 57559
const RETURNS = 57560
const SCHEMA = 57561
const TABLE = 57562
const SEQUENCE = 57563
const INDEX = 57564
const VIEW = 57565
const TO = 57566
const IGNORE = 57567
const IF = 57568
const PRIMARY = 57569
const COLUMN = 57570
const CONSTRAINT = 57571
const SPATIAL = 57572
const FULLTEXT = 57573
const FOREIGN = 57574
const KEY_BLOCK_SIZE = 57575
const SHOW = 57576
const DESCRIBE = 57577
const EXPLAIN = 57578
const DATE = 57579
const ESCAPE = 57580
const REPAIR = 57581
const OPTIMIZE = 57582
const TRUNCATE = 57583
const MAXVALUE = 57584
const PARTITION = 57585
const REORGANIZE = 57586
const LESS = 57587
const THAN = 57588
const PROCEDURE = 57589
const TRIGGER = 57590
const STATUS = 57591
const VARIABLES = 57592
const ROLE = 57593
const PROXY = 57594
const AVG_ROW_LENGTH = 57595
const STORAGE = 57596
const DISK = 57597
const MEMORY = 57598
const CHECKSUM = 57599
const COMPRESSION = 57600
const DATA = 57601
const DIRECTORY = 57602
const DELAY_KEY_WRITE = 57603
const ENCRYPTION = 57604
const ENGINE = 57605
const MAX_ROWS = 57606
const MIN_ROWS = 57607
const PACK_KEYS = 57608
const ROW_FORMAT = 57609
const STATS_AUTO_RECALC = 57610
const STATS_PERSISTENT = 57611
const STATS_SAMPLE_PAGES = 57612
const DYNAMIC = 57613
const COMPRESSED = 57614
const REDUNDANT = 57615
const COMPACT = 57616
const FIXED = 57617
const COLUMN_FORMAT = 57618
const AUTO_RANDOM = 57619
const ENGINE_ATTRIBUTE = 57620
const SECONDARY_ENGINE_ATTRIBUTE = 57621
const INSERT_METHOD = 57622
const RESTRICT = 57623
const CASCADE = 57624
const ACTION = 57625
const PARTIAL = 57626
const SIMPLE = 57627
const CHECK = 57628
const ENFORCED = 57629
const RANGE = 57630
const LIST = 57631
const ALGORITHM = 57632
const LINEAR = 57633
const PARTITIONS = 57634
const SUBPARTITION = 57635
const SUBPARTITIONS = 57636
const CLUSTER = 57637
const TYPE = 57638
const ANY = 57639
const SOME = 57640
const EXTERNAL = 57641
const LOCALFILE = 57642
const URL = 57643
const PREPARE = 57644
const DEALLOCATE = 57645
const RESET = 57646
const EXTENSION = 57647
const INCREMENT = 57648
const CYCLE = 57649
const MINVALUE = 57650
const PUBLICATION = 57651
const SUBSCRIPTIONS = 57652
const PUBLICATIONS = 57653
const PROPERTIES = 57654
const PARSER = 57655
const VISIBLE = 57656
const INVISIBLE = 57657
const BTREE = 57658
const HASH = 57659
const RTREE = 57660
const BSI = 57661
const IVFFLAT = 57662
const ZONEMAP = 57663
const LEADING = 57664
const BOTH = 57665
const TRAILING = 57666
const UNKNOWN = 57667
const LISTS = 57668
const OP_TYPE = 57669
const REINDEX = 57670
const EXPIRE = 57671
const ACCOUNT = 57672
const ACCOUNTS = 57673
const UNLOCK = 57674
const DAY = 57675
const NEVER = 57676
const PUMP = 57677
const MYSQL_COMPATIBILITY_MODE = 57678
const MODIFY = 57679
const CHANGE = 57680
const SECOND = 57681
const ASCII = 57682
const COALESCE = 57683
const COLLATION = 57684
const HOUR = 57685
const MICROSECOND = 57686
const MINUTE = 57687
const MONTH = 57688
const QUARTER = 57689
const REPEAT = 57690
const REVERSE = 57691
const ROW_COUNT = 57692
const WEEK = 57693
const REVOKE = 57694
const FUNCTION = 57695
const PRIVILEGES = 57696
const TABLESPACE = 57697
const EXECUTE = 57698
const SUPER = 57699
const GRANT = 57700
const OPTION = 57701
const REFERENCES = 57702
const REPLICATION = 57703
const SLAVE = 57704
const CLIENT = 57705
const USAGE = 57706
const RELOAD = 57707
const FILE = 57708
const TEMPORARY = 57709
const ROUTINE = 57710
const EVENT = 57711
const SHUTDOWN = 57712
const NULLX = 57713
const AUTO_INCREMENT = 57714
const APPROXNUM = 57715
const SIGNED = 57716
const UNSIGNED = 57717
const ZEROFILL = 57718
const ENGINES = 57719
const LOW_CARDINALITY = 57720
const AUTOEXTEND_SIZE = 57721
const ADMIN_NAME = 57722
const RANDOM = 57723
const SUSPEND = 57724
const ATTRIBUTE = 57725
const HISTORY = 57726
const REUSE = 57727
const CURRENT = 57728
const OPTIONAL = 57729
const FAILED_LOGIN_ATTEMPTS = 57730
const PASSWORD_LOCK_TIME = 57731
const UNBOUNDED = 57732
const SECONDARY = 57733
const RESTRICTED = 57734
const USER = 57735
const IDENTIFIED = 57736
const CIPHER = 57737
const ISSUER = 57738
const X509 = 57739
const SUBJECT = 57740
const SAN = 57741
const REQUIRE = 57742
const SSL = 57743
const NONE = 57744
const PASSWORD = 57745
const SHARED = 57746
const EXCLUSIVE = 57747
const MAX_QUERIES_PER_HOUR = 57748
const MAX_UPDATES_PER_HOUR = 57749
const MAX_CONNECTIONS_PER_HOUR = 57750
const MAX_USER_CONNECTIONS = 57751
const FORMAT = 57752
const VERBOSE = 57753
const CONNECTION = 57754
const TRIGGERS = 57755
const PROFILES = 57756
const LOAD = 57757
const INLINE = 57758
const INFILE = 57759
const TERMINATED = 57760
const OPTIONALLY = 57761
const ENCLOSED = 57762
const ESCAPED = 57763
const STARTING = 57764
const LINES = 57765
const ROWS = 57766
const IMPORT = 57767
const DISCARD = 57768
const JSONTYPE = 57769
const MODUMP = 57770
const OVER = 57771
const PRECEDING = 57772
const FOLLOWING = 57773
const GROUPS = 57774
const DATABASES = 57775
const TABLES = 57776
const SEQUENCES = 57777
const EXTENDED = 57778
const FULL = 57779
const PROCESSLIST = 57780
const FIELDS = 57781
const COLUMNS = 57782
const OPEN = 57783
const ERRORS = 57784
const WARNINGS = 57785
const INDEXES = 57786
const SCHEMAS = 57787
const NODE = 57788
const LOCKS = 57789
const ROLES = 57790
const TABLE_NUMBER = 57791
const COLUMN_NUMBER = 57792
const TABLE_VALUES = 57793
const TABLE_SIZE = 57794
const NAMES = 57795
const GLOBAL = 57796
const PERSIST = 57797
const SESSION = 57798
const ISOLATION = 57799
const LEVEL = 57800
const READ = 57801
const WRITE = 57802
const ONLY = 57803
const REPEATABLE = 57804
const COMMITTED = 57805
const UNCOMMITTED = 57806
const SERIALIZABLE = 57807
const LOCAL = 57808
const EVENTS = 57809
const PLUGINS = 57810
const CURRENT_TIMESTAMP = 57811
const DATABASE = 57812
const CURRENT_TIME = 57813
const LOCALTIME = 57814
const LOCALTIMESTAMP = 57815
const UTC_DATE = 57816
const UTC_TIME = 57817
const UTC_TIMESTAMP = 57818
const REPLACE = 57819
const CONVERT = 57820
const SEPARATOR = 57821
const TIMESTAMPDIFF = 57822
const CURRENT_DATE = 57823
const CURRENT_USER = 57824
const CURRENT_ROLE = 57825
const SECOND_MICROSECOND = 57826
const MINUTE_MICROSECOND = 57827
const MINUTE_SECOND = 57828
const HOUR_MICROSECOND = 57829
const HOUR_SECOND = 57830
const HOUR_MINUTE = 57831
const DAY_MICROSECOND = 57832
const DAY_SECOND = 57833
const DAY_MINUTE = 57834
const DAY_HOUR = 57835
const YEAR_MONTH = 57836
const SQL_TSI_HOUR = 57837
const SQL_TSI_DAY = 57838
const SQL_TSI_WEEK = 57839
const SQL_TSI_MONTH = 57840
const SQL_TSI_QUARTER = 57841
const SQL_TSI_YEAR = 57842
const SQL_TSI_SECOND = 57843
const SQL_TSI_MINUTE = 57844
const RECURSIVE = 57845
const CONFIG = 57846
const DRAINER = 57847
const SOURCE = 57848
const STREAM = 57849
const HEADERS = 57850
const CONNECTOR = 57851
const CONNECTORS = 57852
const DAEMON = 57853
const PAUSE = 57854
const CANCEL = 57855
const TASK = 57856
const RESUME = 57857
const MATCH = 57858
const AGAINST = 57859
const BOOLEAN = 57860
const LANGUAGE = 57861
const WITH = 57862
const QUERY = 57863
const EXPANSION = 57864
const WITHOUT = 57865
const VALIDATION = 57866
const ADDDATE = 57867
const BIT_AND = 57868
const BIT_OR = 57869
const BIT_XOR = 57870
const CAST = 57871
const COUNT = 57872
const APPROX_COUNT = 57873
const APPROX_COUNT_DISTINCT = 57874
const APPROX_PERCENTILE = 57875
const CURDATE = 57876
const CURTIME = 57877
const DATE_ADD = 57878
const DATE_SUB = 57879
const EXTRACT = 57880
const GROUP_CONCAT = 57881
const MAX = 57882
const MID = 57883
const MIN = 57884
const NOW = 57885
const POSITION = 57886
const SESSION_USER = 57887
const STD = 57888
const STDDEV = 57889
const MEDIAN = 57890
const CLUSTER_CENTERS = 57891
const KMEANS = 57892
const STDDEV_POP = 57893
const STDDEV_SAMP = 57894
const SUBDATE = 57895
const SUBSTR = 57896
const SUBSTRING = 57897
const SUM = 57898
const SYSDATE = 57899
const SYSTEM_USER = 57900
const TRANSLATE = 57901
const TRIM = 57902
const VARIANCE = 57903
const VAR_POP = 57904
const VAR_SAMP = 57905
const AVG = 57906
const RANK = 57907
const ROW_NUMBER = 57908
const DENSE_RANK = 57909
const BIT_CAST = 57910
const NEXTVAL = 57911
const SETVAL = 57912
const CURRVAL = 57913
const LASTVAL = 57914
const ARROW = 57915
const ROW = 57916
const OUTFILE = 57917
const HEADER = 57918
const MAX_FILE_SIZE = 57919
const FORCE_QUOTE = 57920
const PARALLEL = 57921
const UNUSED = 57922
const BINDINGS = 57923
const DO = 57924
const DECLARE = 57925
const LOOP = 57926
const WHILE = 57927
const LEAVE = 57928
const ITERATE = 57929
const UNTIL = 57930
const CALL = 57931
const PREV = 57932
const SLIDING = 57933
const FILL = 57934
const SPBEGIN = 57935
const BACKEND = 57936
const SERVERS = 57937
const HANDLER = 57938
const PERCENT = 57939
const SAMPLE = 57940
const KILL = 57941
const BACKUP = 57942
const FILESYSTEM = 57943
const QUERY_RESULT = 57944

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"INTEGRAL",
	"HEX",
	"BIT_LITERAL",
	"FLOAT",
	"HEXNUM",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:11048

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 117,
	11, 703,
	22, 703,
	-2, 696,
	-1, 137,
	237, 1085,
	239, 993,
	-2, 1039,
	-1, 161,
	43, 531,
	239, 531,
	266, 538,
	267, 538,
	461, 531,
	-2, 565,
	-1, 202,
	623, 1825,
	-2, 447,
	-1, 496,
	623, 1941,
	-2, 341,
	-1, 554,
	623, 2000,
	-2, 339,
	-1, 555,
	623, 2001,
	-2, 340,
	-1, 556,
	623, 2002,
	-2, 342,
	-1, 681,
	318, 133,
	433, 133,
	434, 133,
	-2, 1730,
	-1, 745,
	82, 1517,
	-2, 1880,
	-1, 746,
	82, 1535,
	-2, 1851,
	-1, 750,
	82, 1536,
	-2, 1879,
	-1, 778,
	82, 1447,
	-2, 2072,
	-1, 779,
	82, 1448,
	-2, 2071,
	-1, 780,
	82, 1449,
	-2, 2061,
	-1, 781,
	82, 2033,
	-2, 2054,
	-1, 782,
	82, 2034,
	-2, 2055,
	-1, 783,
	82, 2035,
	-2, 2063,
	-1, 784,
	82, 2036,
	-2, 2043,
	-1, 785,
	82, 2037,
	-2, 2052,
	-1, 786,
	82, 2038,
	-2, 2064,
	-1, 787,
	82, 2039,
	-2, 2065,
	-1, 788,
	82, 2040,
	-2, 2070,
	-1, 789,
	82, 2041,
	-2, 2075,
	-1, 790,
	82, 2042,
	-2, 2076,
	-1, 791,
	82, 1513,
	-2, 1915,
	-1, 792,
	82, 1514,
	-2, 1714,
	-1, 793,
	82, 1515,
	-2, 1924,
	-1, 794,
	82, 1516,
	-2, 1723,
	-1, 796,
	82, 1519,
	-2, 1731,
	-1, 797,
	82, 1520,
	-2, 1948,
	-1, 799,
	82, 1523,
	-2, 1750,
	-1, 801,
	82, 1525,
	-2, 1960,
	-1, 802,
	82, 1526,
	-2, 1959,
	-1, 803,
	82, 1527,
	-2, 1794,
	-1, 804,
	82, 1528,
	-2, 1875,
	-1, 807,
	82, 1531,
	-2, 1971,
	-1, 809,
	82, 1533,
	-2, 1974,
	-1, 810,
	82, 1534,
	-2, 1976,
	-1, 811,
	82, 1537,
	-2, 1984,
	-1, 812,
	82, 1538,
	-2, 1860,
	-1, 813,
	82, 1539,
	-2, 1905,
	-1, 814,
	82, 1540,
	-2, 1870,
	-1, 815,
	82, 1541,
	-2, 1895,
	-1, 826,
	82, 1425,
	-2, 2066,
	-1, 827,
	82, 1426,
	-2, 2067,
	-1, 828,
	82, 1427,
	-2, 2068,
	-1, 913,
	456, 565,
	457, 565,
	-2, 532,
	-1, 959,
	123, 1714,
	134, 1714,
	154, 1714,
	-2, 1688,
	-1, 1068,
	22, 730,
	-2, 679,
	-1, 1169,
	11, 703,
	22, 703,
	-2, 1312,
	-1, 1244,
	22, 730,
	-2, 679,
	-1, 1556,
	82, 1588,
	-2, 1877,
	-1, 1557,
	82, 1589,
	-2, 1878,
	-1, 1699,
	83, 879,
	-2, 885,
	-1, 2109,
	106, 1031,
	150, 1031,
	189, 1031,
	192, 1031,
	279, 1031,
	-2, 1024,
	-1, 2256,
	11, 703,
	22, 703,
	-2, 823,
	-1, 2288,
	83, 1674,
	155, 1674,
	-2, 1862,
	-1, 2289,
	83, 1674,
	155, 1674,
	-2, 1861,
	-1, 2290,
	83, 1650,
	155, 1650,
	-2, 1848,
	-1, 2291,
	83, 1651,
	155, 1651,
	-2, 1853,
	-1, 2292,
	83, 1652,
	155, 1652,
	-2, 1782,
	-1, 2293,
	83, 1653,
	155, 1653,
	-2, 1776,
	-1, 2294,
	83, 1654,
	155, 1654,
	-2, 1704,
	-1, 2295,
	83, 1655,
	155, 1655,
	-2, 1850,
	-1, 2296,
	83, 1656,
	155, 1656,
	-2, 1780,
	-1, 2297,
	83, 1657,
	155, 1657,
	-2, 1775,
	-1, 2298,
	83, 1658,
	155, 1658,
	-2, 1764,
	-1, 2299,
	83, 1674,
	155, 1674,
	-2, 1765,
	-1, 2300,
	83, 1674,
	155, 1674,
	-2, 1766,
	-1, 2302,
	83, 1663,
	155, 1663,
	-2, 1895,
	-1, 2303,
	83, 1641,
	155, 1641,
	-2, 1880,
	-1, 2304,
	83, 1672,
	155, 1672,
	-2, 1851,
	-1, 2305,
	83, 1672,
	155, 1672,
	-2, 1879,
	-1, 2306,
	83, 1672,
	155, 1672,
	-2, 1732,
	-1, 2307,
	83, 1670,
	155, 1670,
	-2, 1870,
	-1, 2308,
	83, 1667,
	155, 1667,
	-2, 1755,
	-1, 2309,
	82, 1622,
	83, 1622,
	155, 1622,
	391, 1622,
	392, 1622,
	393, 1622,
	-2, 1703,
	-1, 2310,
	82, 1623,
	83, 1623,
	155, 1623,
	391, 1623,
	392, 1623,
	393, 1623,
	-2, 1705,
	-1, 2311,
	82, 1624,
	83, 1624,
	155, 1624,
	391, 1624,
	392, 1624,
	393, 1624,
	-2, 1921,
	-1, 2312,
	82, 1626,
	83, 1626,
	155, 1626,
	391, 1626,
	392, 1626,
	393, 1626,
	-2, 1852,
	-1, 2313,
	82, 1628,
	83, 1628,
	155, 1628,
	391, 1628,
	392, 1628,
	393, 1628,
	-2, 1834,
	-1, 2314,
	82, 1630,
	83, 1630,
	155, 1630,
	391, 1630,
	392, 1630,
	393, 1630,
	-2, 1781,
	-1, 2315,
	82, 1632,
	83, 1632,
	155, 1632,
	391, 1632,
	392, 1632,
	393, 1632,
	-2, 1760,
	-1, 2316,
	82, 1633,
	83, 1633,
	155, 1633,
	391, 1633,
	392, 1633,
	393, 1633,
	-2, 1761,
	-1, 2317,
	82, 1635,
	83, 1635,
	155, 1635,
	391, 1635,
	392, 1635,
	393, 1635,
	-2, 1702,
	-1, 2318,
	83, 1677,
	155, 1677,
	391, 1677,
	392, 1677,
	393, 1677,
	-2, 1737,
	-1, 2319,
	83, 1677,
	155, 1677,
	391, 1677,
	392, 1677,
	393, 1677,
	-2, 1751,
	-1, 2320,
	83, 1680,
	155, 1680,
	391, 1680,
	392, 1680,
	393, 1680,
	-2, 1733,
	-1, 2321,
	83, 1680,
	155, 1680,
	391, 1680,
	392, 1680,
	393, 1680,
	-2, 1797,
	-1, 2322,
	83, 1677,
	155, 1677,
	391, 1677,
	392, 1677,
	393, 1677,
	-2, 1818,
	-1, 2508,
	106, 1031,
	150, 1031,
	189, 1031,
	192, 1031,
	279, 1031,
	-2, 1025,
	-1, 2522,
	80, 624,
	155, 624,
	-2, 1198,
	-1, 2904,
	192, 1031,
	303, 1280,
	-2, 1252,
	-1, 3057,
	106, 1031,
	150, 1031,
	189, 1031,
	192, 1031,
	-2, 1141,
	-1, 3059,
	106, 1031,
	150, 1031,
	189, 1031,
	192, 1031,
	-2, 1141,
	-1, 3071,
	80, 624,
	155, 624,
	-2, 1199,
	-1, 3092,
	192, 1031,
	303, 1280,
	-2, 1253,
	-1, 3225,
	106, 1031,
	150, 1031,
	189, 1031,
	192, 1031,
	-2, 1142,
	-1, 3251,
	83, 1103,
	155, 1103,
	-2, 1031,
	-1, 3380,
	83, 1103,
	155, 1103,
	-2, 1031,
	-1, 3529,
	83, 1107,
	155, 1107,
	-2, 1031,
	-1, 3577,
	83, 1108,
	155, 1108,
	-2, 1031,
}

const yyPrivate = 57344

const yyLast = 45236

var yyAct = [...]int{
	712, 691, 3594, 2551, 714, 3557, 191, 3610, 3533, 3077,
	1784, 1536, 3540, 3539, 2923, 3435, 3532, 3380, 2890, 3420,
	3461, 699, 3279, 3171, 3106, 3358, 2545, 1386, 2372, 1202,
	3411, 3439, 1324, 2990, 3379, 3210, 1532, 3212, 3213, 3317,
	588, 2991, 3306, 742, 2548, 3350, 3166, 958, 693, 3175,
	604, 1462, 609, 609, 3421, 3423, 1732, 1069, 609, 625,
	634, 3093, 2899, 634, 3044, 1539, 3217, 3232, 3224, 2525,
	3194, 2154, 2864, 689, 2988, 2827, 2657, 3060, 2658, 2659,
	3033, 3227, 1874, 1871, 2641, 2853, 2575, 2908, 3062, 1847,
	2651, 1839, 2720, 2919, 2250, 176, 2901, 1977, 2438, 55,
	1472, 1592, 645, 2976, 639, 2284, 2157, 2680, 2956, 2654,
	2498, 2834, 2837, 2907, 683, 2832, 2830, 2286, 2871, 2829,
	1942, 2120, 1062, 2825, 2509, 2234, 1379, 1889, 2078, 1962,
	688, 3177, 2087, 2355, 2077, 2554, 2693, 1458, 1951, 1451,
	889, 608, 608, 1950, 1943, 1679, 2338, 616, 2828, 2703,
	1973, 1916, 2763, 1867, 1972, 2239, 2251, 1466, 1842, 1297,
	1840, 2482, 2487, 952, 2577, 588, 1763, 2556, 2155, 1774,
	6, 2517, 1275, 1014, 2282, 2407, 1471, 1530, 187, 8,
	1974, 1425, 1299, 186, 7, 2119, 1488, 1365, 1463, 1395,
	2007, 191, 603, 191, 2150, 1005, 1006, 2100, 1744, 116,
	682, 35, 609, 587, 1984, 700, 1708, 1743, 1586, 921,
	1734, 2439, 1570, 692, 1521, 684, 1080, 1932, 26, 1949,
	1906, 1946, 1529, 1432, 15, 951, 1364, 1334, 2258, 621,
	1707, 1325, 1313, 830, 1593, 14, 1333, 690, 13, 618,
	32, 1362, 1418, 647, 23, 1535, 177, 888, 1424, 16,
	10, 167, 886, 908, 1309, 633, 648, 173, 871, 1242,
	1203, 644, 3344, 865, 1981, 2471, 1002, 2471, 967, 2471,
	1991, 3047, 2983, 2395, 2344, 2342, 1692, 630, 2341, 2339,
	1439, 1435, 642, 626, 997, 998, 1001, 175, 1003, 1261,
	605, 616, 2812, 998, 629, 998, 2809, 628, 832, 627,
	2810, 2807, 833, 3602, 1347, 684, 1686, 614, 1257, 1437,
	3164, 1138, 1139, 1140, 1137, 2716, 2714, 1921, 637, 174,
	51, 163, 138, 3313, 3096, 3307, 2464, 2462, 1138, 1139,
	1140, 1137, 3167, 2989, 1959, 1197, 3425, 164, 1945, 831,
	2789, 2195, 3365, 3514, 156, 174, 996, 842, 165, 174,
	51, 163, 138, 174, 8, 1101, 3199, 174, 36, 7,
	1262, 174, 3108, 1486, 2381, 174, 2466, 115, 964, 3195,
	966, 174, 3061, 1978, 2111, 3099, 3334, 174, 3472, 1479,
	1405, 1404, 103, 2389, 1403, 3094, 3366, 1271, 168, 970,
	3116, 3117, 968, 1483, 969, 2787, 3095, 1289, 2104, 643,
	2276, 115, 1989, 174, 51, 163, 138, 1627, 1343, 1476,
	3336, 1344, 1116, 2735, 1485, 1117, 1135, 631, 168, 2728,
	2277, 1263, 168, 1884, 1506, 115, 168, 2687, 2688, 2686,
	1478, 1852, 1853, 3100, 168, 821, 1851, 820, 822, 823,
	168, 824, 825, 1119, 2264, 2894, 168, 2263, 1693, 1694,
	2265, 174, 51, 163, 138, 1366, 843, 1368, 1331, 1332,
	1321, 2356, 930, 940, 120, 121, 962, 122, 123, 164,
	963, 2484, 168, 2811, 2808, 2892, 156, 1128, 2187, 1758,
	165, 2485, 1538, 174, 51, 163, 138, 1133, 961, 986,
	960, 1522, 3428, 1109, 1526, 3427, 1111, 1346, 1329, 115,
	3426, 3511, 1328, 1331, 1332, 2066, 3187, 3507, 3543, 3544,
	3428, 3505, 3427, 3504, 103, 3565, 3315, 1270, 1525, 2992,
	168, 2721, 1114, 3413, 1112, 3426, 3503, 3115, 3413, 2158,
	2483, 3561, 3562, 3416, 3310, 137, 162, 172, 2992, 101,
	3318, 3319, 3320, 3321, 2376, 1438, 1436, 1074, 2722, 1542,
	2723, 1993, 168, 1083, 3104, 3432, 3005, 161, 155, 154,
	1862, 1868, 1858, 2596, 57, 137, 1517, 172, 3034, 3041,
	1985, 2228, 2467, 1083, 2846, 877, 3101, 3105, 3103, 3102,
	2098, 1929, 3516, 3517, 3509, 1115, 2474, 161, 3204, 1445,
	1444, 1131, 1132, 2490, 3512, 3513, 120, 121, 2848, 122,
	123, 1527, 2838, 1105, 3118, 3338, 936, 934, 609, 935,
	2751, 1130, 2193, 678, 3110, 3111, 680, 2386, 609, 1073,
	2753, 679, 3165, 1104, 1524, 157, 158, 159, 1107, 2843,
	2844, 981, 976, 971, 975, 979, 634, 634, 2715, 609,
	1110, 1113, 3186, 2645, 2231, 2845, 2230, 3341, 3201, 2235,
	3188, 3133, 2922, 3572, 1990, 166, 1319, 2862, 1345, 984,
	3118, 3542, 1118, 974, 1541, 1540, 1106, 137, 162, 172,
	1272, 101, 3097, 1882, 1883, 111, 2872, 1356, 3109, 160,
	3454, 112, 3130, 2465, 2920, 2921, 1260, 1126, 1127, 161,
	155, 154, 2173, 2896, 3370, 941, 57, 1064, 2153, 2176,
	2842, 3449, 2518, 3362, 1008, 636, 635, 1071, 1548, 1551,
	1552, 3123, 2650, 3440, 982, 2106, 937, 3330, 3456, 1549,
	3331, 985, 3078, 3462, 967, 1996, 1998, 1999, 1092, 3343,
	2891, 2550, 3008, 1066, 2757, 3325, 2470, 1979, 113, 3085,
	1308, 1523, 972, 1108, 1073, 1096, 1979, 1085, 1084, 3134,
	3330, 50, 3431, 3331, 1072, 1979, 2175, 157, 158, 159,
	2502, 2504, 2505, 2506, 2503, 983, 3270, 1085, 1084, 2925,
	3259, 3626, 998, 3333, 998, 998, 2205, 2204, 998, 939,
	3178, 998, 3364, 2160, 998, 2279, 2496, 166, 3515, 1087,
	2546, 2547, 1206, 2550, 967, 1171, 3463, 3265, 2174, 1375,
	52, 2340, 1980, 1992, 3332, 973, 3333, 111, 3114, 2225,
	2226, 160, 2840, 112, 1121, 1306, 1374, 1122, 1440, 1331,
	1332, 2625, 632, 1094, 964, 1305, 966, 3280, 3281, 3282,
	3285, 3284, 3283, 3337, 1304, 169, 170, 3332, 171, 1323,
	1322, 630, 630, 139, 831, 1124, 3351, 626, 626, 1331,
	1332, 3371, 1076, 1077, 1268, 604, 938, 2900, 629, 629,
	3363, 628, 628, 627, 627, 169, 170, 3384, 171, 139,
	113, 2463, 3200, 139, 3531, 1068, 3113, 139, 1320, 1207,
	3613, 139, 980, 50, 52, 139, 1063, 1240, 889, 139,
	1245, 1089, 1090, 1869, 964, 139, 966, 1093, 1078, 2390,
	2489, 139, 632, 2806, 1095, 114, 39, 1177, 2849, 879,
	2839, 880, 49, 1067, 3508, 3339, 5, 963, 977, 2897,
	2159, 978, 118, 119, 1120, 2161, 2196, 139, 2698, 2699,
	2754, 3063, 52, 1173, 1174, 1175, 1176, 609, 2008, 1358,
	1327, 2597, 2153, 2598, 2599, 588, 588, 1861, 1550, 1859,
	3162, 3205, 1276, 1518, 588, 588, 2493, 2494, 1390, 1390,
	2924, 609, 1125, 643, 52, 1997, 2170, 169, 170, 2995,
	171, 2492, 2920, 2921, 3410, 139, 1101, 1363, 2916, 2162,
	2382, 631, 631, 634, 1419, 604, 1392, 1123, 1428, 1428,
	2682, 2684, 2268, 2191, 1388, 1388, 3383, 1281, 1982, 191,
	2163, 2756, 931, 1287, 2160, 2163, 1286, 139, 588, 1285,
	2841, 1284, 1215, 1216, 638, 2917, 3614, 3261, 3027, 3272,
	1397, 3260, 2594, 3326, 1994, 1995, 1354, 3327, 3266, 3267,
	1294, 1277, 1278, 1279, 1280, 2473, 1282, 114, 39, 2081,
	1330, 1266, 1288, 1696, 49, 1697, 2860, 1269, 2160, 2163,
	1396, 3530, 2765, 2764, 118, 119, 3326, 2083, 2082, 1470,
	3422, 1473, 1100, 2080, 1695, 1446, 1481, 931, 2626, 2628,
	2629, 2630, 2627, 845, 1302, 2217, 883, 884, 885, 1307,
	2616, 2617, 1384, 1385, 881, 933, 1317, 1504, 932, 1264,
	1265, 1246, 1244, 1273, 1336, 1337, 846, 1339, 1340, 1341,
	2090, 1390, 3233, 1390, 1073, 1499, 1500, 2040, 1370, 1372,
	2039, 2190, 1735, 3616, 1735, 1274, 3622, 1382, 1383, 3608,
	2136, 3501, 1070, 2091, 2092, 1487, 1136, 1310, 1314, 1314,
	1314, 2164, 3596, 1070, 1315, 1316, 2164, 1357, 3579, 3551,
	1296, 2159, 2153, 2158, 3545, 2156, 2161, 3611, 3612, 2953,
	933, 1310, 1310, 932, 1101, 1449, 2683, 1452, 1453, 2358,
	878, 2102, 967, 2949, 1335, 3030, 967, 1338, 1454, 1455,
	3007, 1441, 2169, 1460, 1461, 2861, 2167, 1420, 1348, 1349,
	2164, 2071, 1136, 2381, 1591, 2159, 2153, 2158, 1987, 2156,
	2161, 3580, 2877, 989, 994, 995, 2996, 1503, 1640, 2929,
	2162, 2148, 2615, 1373, 3597, 1502, 1138, 1139, 1140, 1137,
	3580, 3552, 1519, 3527, 1468, 2918, 3347, 1352, 1353, 614,
	1355, 1398, 1359, 1360, 1361, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1429, 1417, 1537,
	1411, 1581, 1582, 1465, 2162, 1430, 1469, 2248, 942, 2249,
	3482, 2953, 2135, 1534, 1406, 1407, 1408, 1409, 1410, 1073,
	1412, 1413, 1414, 1415, 1416, 849, 1136, 2524, 1422, 1423,
	3457, 1419, 2523, 1677, 1553, 2101, 1705, 1241, 1390, 1710,
	1711, 2927, 1713, 1714, 609, 3528, 1649, 3445, 1099, 609,
	1098, 1625, 1390, 1630, 1631, 1632, 889, 630, 3403, 1733,
	3402, 1490, 2816, 626, 1390, 1515, 1646, 1512, 1495, 1647,
	1358, 2814, 2249, 1509, 629, 625, 848, 628, 2701, 627,
	851, 850, 3347, 1657, 1658, 3397, 1680, 1508, 1138, 1139,
	1140, 1137, 2476, 1511, 3396, 1757, 1639, 685, 1510, 1507,
	1676, 2468, 1987, 1528, 1764, 1764, 1531, 1358, 3395, 1358,
	1358, 2371, 1704, 609, 609, 3394, 1705, 1705, 1533, 3446,
	1390, 1836, 1837, 1849, 1622, 1623, 1099, 1626, 3374, 1572,
	3404, 2249, 2124, 1715, 2785, 1641, 2363, 588, 1720, 1390,
	2279, 1909, 1978, 1712, 991, 992, 993, 1850, 1648, 3373,
	1650, 3346, 3139, 3087, 1688, 3053, 2146, 3347, 2076, 2937,
	2677, 2445, 2437, 1579, 1580, 2070, 3347, 609, 1705, 1390,
	2524, 1894, 2069, 609, 609, 609, 1899, 1900, 2397, 2019,
	3347, 1477, 1520, 1904, 1905, 1484, 2379, 3347, 1911, 2367,
	1885, 1683, 1831, 1832, 2044, 191, 1786, 631, 191, 191,
	1987, 191, 1770, 1771, 1701, 1702, 1703, 1513, 1138, 1139,
	1140, 1137, 1651, 835, 836, 837, 838, 1716, 1717, 1718,
	1719, 1987, 1969, 3347, 2279, 3088, 1880, 3054, 1877, 1878,
	1761, 2938, 2249, 1136, 1136, 1678, 1295, 1684, 1863, 1640,
	1640, 1953, 1584, 2365, 1891, 1376, 1640, 1640, 1741, 1742,
	1136, 1613, 2360, 1964, 2018, 2353, 1890, 1855, 2124, 1857,
	3040, 2361, 1890, 1890, 1890, 1751, 1752, 2351, 2349, 1875,
	1876, 1765, 1893, 1700, 2347, 2123, 2072, 1733, 1766, 1907,
	1958, 1390, 1976, 1709, 3630, 1762, 999, 1000, 1749, 1870,
	1920, 1004, 1310, 1923, 1924, 1729, 1926, 1725, 1736, 1737,
	1896, 1897, 1898, 1730, 1756, 1767, 1314, 1759, 1760, 1738,
	1745, 1750, 1747, 1748, 1746, 2366, 1768, 1769, 1314, 1740,
	1101, 3598, 3074, 1755, 2361, 2878, 1754, 2354, 2705, 835,
	836, 837, 838, 1970, 2526, 2051, 2050, 2038, 967, 2352,
	2348, 2384, 2383, 2375, 2029, 967, 2348, 2124, 2071, 2028,
	1835, 1838, 2141, 2035, 2020, 1968, 1854, 2027, 1856, 1914,
	840, 3295, 1864, 1902, 1954, 1709, 1151, 1161, 1162, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1153, 1948, 1986, 1496,
	2260, 1492, 1183, 3137, 1948, 1086, 1652, 1653, 1654, 1655,
	1065, 1892, 1659, 1660, 1661, 1662, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1060, 1058, 1401, 1136, 1136, 1136,
	1915, 2005, 2006, 1609, 1531, 1917, 1136, 1879, 1153, 1606,
	2882, 1136, 2873, 1608, 1605, 1607, 1611, 1612, 2748, 1136,
	1311, 1610, 1300, 967, 2001, 1934, 1301, 1960, 964, 3450,
	966, 3234, 1342, 3066, 3064, 964, 2339, 966, 847, 1378,
	1987, 1497, 1065, 3617, 1895, 1629, 1628, 3599, 2188, 683,
	1629, 1628, 609, 609, 609, 2981, 1957, 1955, 1156, 1157,
	1158, 1159, 1160, 1153, 1967, 630, 840, 609, 609, 609,
	609, 626, 1380, 3451, 3345, 3235, 1966, 3067, 3065, 3322,
	2121, 3263, 629, 1381, 1971, 628, 3262, 627, 2874, 3248,
	2128, 1358, 1161, 1162, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1153, 1578, 2045, 2046, 3206, 2048, 3046, 2954, 2947,
	2000, 2942, 2939, 2055, 2404, 2855, 2647, 1358, 1575, 1577,
	1574, 2009, 1576, 964, 2500, 966, 1918, 2472, 2333, 2394,
	1572, 1300, 2875, 2364, 2182, 1301, 1312, 2002, 1377, 2270,
	1291, 2094, 2095, 2096, 2013, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1153, 1290, 1075, 1663, 2112, 2113, 2114, 2115,
	1656, 1587, 852, 2003, 2004, 1616, 1617, 1618, 1619, 1620,
	1621, 1614, 1615, 2707, 715, 725, 1587, 1433, 2014, 1918,
	1140, 1137, 3502, 716, 2189, 724, 717, 721, 720, 718,
	719, 1138, 1139, 1140, 1137, 2253, 2253, 1849, 2253, 3275,
	1706, 1137, 2984, 3274, 2724, 631, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1142, 2586, 2584, 588, 588, 2562, 2560,
	1185, 2073, 3207, 3208, 1073, 3254, 1138, 1139, 1140, 1137,
	1390, 609, 3625, 1184, 2065, 2067, 2068, 2343, 3159, 1138,
	1139, 1140, 1137, 1184, 2152, 3202, 609, 2151, 2982, 2084,
	3604, 3603, 1073, 2323, 604, 3038, 2456, 3526, 1428, 2457,
	1849, 2637, 2635, 2328, 2103, 2330, 2274, 3525, 2031, 191,
	723, 2633, 1206, 1138, 1139, 1140, 1137, 1138, 1139, 1140,
	1137, 2145, 2406, 1644, 3491, 2622, 2335, 2137, 2257, 2266,
	2255, 2267, 2259, 3624, 3452, 3399, 967, 1645, 2129, 3387,
	3377, 3203, 2130, 2131, 3367, 1138, 1139, 1140, 1137, 2271,
	2272, 3039, 2133, 2134, 1434, 2142, 2778, 2636, 2634, 2377,
	1396, 3308, 1976, 2165, 2166, 3237, 2171, 2632, 3236, 1390,
	3079, 1390, 3068, 1390, 2030, 1890, 3037, 2132, 1073, 1314,
	2429, 2621, 2138, 2847, 2140, 2139, 2396, 1138, 1139, 1140,
	1137, 2327, 2744, 2719, 2718, 1433, 2373, 2374, 2620, 1207,
	1138, 1139, 1140, 1137, 2334, 2023, 3536, 2387, 2619, 2618,
	1390, 2423, 2610, 2281, 1141, 2777, 2604, 2603, 2602, 1370,
	1372, 3438, 1170, 2232, 2601, 2469, 2430, 2287, 2261, 2499,
	1179, 1390, 1138, 1139, 1140, 1137, 964, 2422, 966, 2075,
	1937, 1138, 1139, 1140, 1137, 2017, 1388, 1138, 1139, 1140,
	1137, 3469, 1936, 1935, 1186, 1931, 3045, 1930, 2431, 1888,
	2275, 3190, 2278, 1138, 1139, 1140, 1137, 1388, 1138, 1139,
	1140, 1137, 1138, 1139, 1140, 1137, 3180, 1887, 1886, 2326,
	1073, 1493, 1259, 2652, 1073, 3621, 2324, 1138, 1139, 1140,
	1137, 2833, 1390, 2434, 2435, 2497, 3620, 1138, 1139, 1140,
	1137, 1705, 1138, 1139, 1140, 1137, 2432, 2325, 3571, 2522,
	3570, 3567, 3172, 2391, 3563, 2528, 2332, 2393, 3434, 1138,
	1139, 1140, 1137, 3211, 2408, 2408, 3179, 2388, 3419, 3408,
	678, 2402, 2538, 680, 3391, 2369, 3386, 3385, 679, 2440,
	2441, 1073, 2380, 3342, 2460, 2446, 2385, 3378, 3340, 2559,
	3309, 3256, 1138, 1139, 1140, 1137, 1073, 1073, 1073, 1764,
	3220, 3170, 1073, 3127, 2570, 2571, 2572, 2573, 1073, 2580,
	3168, 2581, 2582, 2378, 2583, 3146, 2585, 2511, 3143, 3141,
	2642, 2510, 2413, 2411, 2398, 2399, 3036, 2580, 3035, 1138,
	1139, 1140, 1137, 3032, 3015, 3013, 2948, 2944, 2520, 2253,
	1152, 1151, 1161, 1162, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1153, 2935, 2638, 1531, 2477, 2934, 2856, 1786, 2287,
	2529, 588, 3010, 2820, 2819, 2519, 1705, 1073, 1849, 1849,
	1849, 1849, 2818, 2016, 2079, 2758, 2401, 2755, 2717, 1073,
	1849, 2691, 2631, 2253, 2479, 2623, 2481, 2613, 1138, 1139,
	1140, 1137, 2540, 2557, 2611, 2607, 2606, 2557, 2478, 1390,
	2194, 2605, 2370, 2197, 2198, 2199, 2200, 2201, 2202, 2203,
	609, 609, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
	2214, 2215, 2216, 2527, 2218, 2219, 2220, 2221, 2222, 2553,
	2223, 8, 2565, 2566, 2521, 2781, 7, 2569, 2495, 777,
	776, 2780, 2530, 2576, 2564, 2539, 2542, 1138, 1139, 1140,
	1137, 2535, 2536, 2555, 1939, 1427, 1427, 2673, 2561, 1933,
	2558, 1138, 1139, 1140, 1137, 2568, 191, 1138, 1139, 1140,
	1137, 191, 1691, 2531, 1690, 1494, 1214, 1709, 2534, 1152,
	1151, 1161, 1162, 1154, 1155, 1156, 1157, 1158, 1159, 1160,
	1153, 2600, 1640, 3465, 1640, 2612, 1210, 2734, 2042, 2695,
	2696, 1209, 2660, 1061, 844, 3323, 2743, 2537, 3191, 3059,
	3058, 3057, 1390, 3029, 2660, 2750, 3025, 2400, 3023, 2643,
	3022, 3021, 3020, 3019, 2646, 2648, 3018, 3014, 2661, 2662,
	2663, 2664, 3012, 2672, 2997, 2702, 2779, 2987, 2674, 2676,
	2675, 1152, 1151, 1161, 1162, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, 1153, 2689, 2692, 174, 2986, 163, 138, 1453,
	2972, 2708, 1138, 1139, 1140, 1137, 2712, 2685, 2971, 1454,
	1455, 2883, 1680, 1460, 1461, 2823, 2813, 2733, 1152, 1151,
	1161, 1162, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1153,
	967, 2783, 2776, 2768, 2454, 2767, 2762, 967, 2700, 2771,
	2475, 2773, 2350, 2346, 1543, 1544, 1545, 1546, 1547, 1468,
	2345, 1073, 2706, 2731, 2710, 2747, 2752, 2836, 2709, 2737,
	1138, 1139, 1140, 1137, 168, 174, 2056, 2851, 2049, 2043,
	2730, 2740, 609, 2725, 2739, 2727, 2738, 2732, 1465, 2041,
	2037, 1469, 2036, 2865, 1073, 1073, 1073, 2034, 1588, 1589,
	1590, 2025, 2022, 2021, 1849, 2121, 1624, 2881, 1938, 1674,
	2759, 2760, 2746, 1673, 1634, 2790, 2791, 1672, 1643, 1642,
	1633, 2792, 2793, 2794, 2795, 2182, 2796, 2797, 2798, 2799,
	2800, 2801, 2802, 2803, 2769, 2770, 2772, 2906, 2859, 2909,
	1402, 2909, 2909, 2766, 168, 2552, 1073, 1400, 3490, 1204,
	2815, 3464, 3405, 2774, 2775, 2453, 3393, 2486, 3388, 1448,
	3289, 1681, 3273, 3269, 3247, 2930, 3231, 3154, 2926, 3152,
	2510, 2857, 3125, 1390, 1390, 2822, 3124, 3585, 2452, 3121,
	2817, 1138, 1139, 1140, 1137, 2928, 727, 117, 3120, 2821,
	3086, 3083, 117, 3081, 3048, 2879, 967, 1459, 1450, 1464,
	2931, 2932, 2451, 2852, 1138, 1139, 1140, 1137, 1467, 1388,
	1388, 1456, 1298, 2858, 2639, 2563, 2515, 2867, 2868, 2869,
	609, 967, 2514, 2876, 2905, 2836, 2880, 2513, 1138, 1139,
	1140, 1137, 2512, 2480, 2455, 2359, 1705, 1705, 2888, 2450,
	2152, 2914, 615, 2151, 1753, 117, 2269, 2414, 2592, 2593,
	2224, 2122, 2904, 2093, 2910, 2911, 2074, 1573, 2893, 2895,
	168, 3481, 2449, 2608, 2609, 1138, 1139, 1140, 1137, 1901,
	1699, 1687, 1516, 2236, 1480, 1057, 1053, 1054, 1055, 1056,
	1457, 2419, 1073, 2418, 2417, 2415, 2423, 2644, 1138, 1139,
	1140, 1137, 1258, 1243, 2915, 2985, 2448, 1681, 1239, 2729,
	2887, 1238, 1681, 1681, 2447, 1237, 2736, 1236, 1235, 1890,
	2241, 2244, 2245, 2246, 2242, 2912, 2243, 2247, 1234, 1233,
	1232, 2884, 1138, 1139, 1140, 1137, 2885, 2886, 1231, 1230,
	1138, 1139, 1140, 1137, 1229, 1228, 2941, 609, 1227, 2940,
	2946, 2945, 3583, 1226, 1225, 2950, 2951, 2936, 1224, 1223,
	2416, 1919, 2961, 2943, 1922, 965, 2444, 1925, 1222, 1221,
	1927, 1220, 117, 1219, 1218, 1217, 1213, 2965, 1212, 2968,
	2969, 2970, 1211, 1164, 1208, 1168, 1201, 117, 1200, 117,
	1198, 1197, 1138, 1139, 1140, 1137, 1196, 2974, 1195, 1194,
	2980, 1165, 1167, 1163, 2443, 1166, 1152, 1151, 1161, 1162,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1153, 1193, 1963,
	3541, 2442, 3000, 3245, 1192, 1191, 1190, 2287, 2436, 1189,
	1138, 1139, 1140, 1137, 2426, 3004, 3006, 1188, 3003, 2998,
	1187, 1182, 1181, 2960, 2403, 1180, 2999, 1138, 1139, 1140,
	1137, 1103, 3016, 3052, 1138, 1139, 1140, 1137, 1059, 2952,
	1138, 1139, 1140, 1137, 3479, 2870, 3477, 2253, 1849, 3071,
	1138, 1139, 1140, 1137, 2964, 3475, 1152, 1151, 1161, 1162,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1153, 2957, 2958,
	2889, 3089, 3122, 2127, 1073, 2108, 2501, 2420, 2421, 1583,
	1091, 2280, 1941, 2906, 1102, 2669, 2667, 1073, 3026, 2963,
	2670, 2668, 2011, 2962, 967, 2015, 2666, 2665, 1073, 3252,
	3136, 967, 3156, 2368, 1390, 1138, 1139, 1140, 1137, 2671,
	3157, 2245, 2246, 3043, 2362, 1292, 1727, 1728, 606, 2854,
	1705, 3073, 2192, 2902, 1073, 2903, 2241, 2244, 2245, 2246,
	2242, 3138, 2243, 2247, 102, 2026, 3080, 2742, 3082, 3070,
	1388, 3069, 54, 2033, 53, 3132, 3119, 3076, 1722, 1723,
	1724, 3001, 3002, 191, 2975, 1823, 3112, 1442, 2357, 3155,
	2373, 2374, 2047, 2392, 1489, 1474, 1073, 2052, 2053, 2054,
	3126, 610, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064,
	3148, 3131, 3128, 2099, 3135, 1903, 1097, 2831, 2824, 2541,
	611, 2516, 3142, 3140, 3158, 2144, 3147, 3144, 612, 2117,
	613, 1073, 3145, 3149, 2588, 1731, 1698, 3150, 3554, 3090,
	3390, 2589, 2590, 2591, 1629, 1628, 1254, 1255, 2933, 1073,
	1390, 1390, 3129, 1252, 1253, 2865, 1250, 1251, 1248, 1249,
	2233, 2229, 1834, 2576, 1351, 1350, 1129, 2967, 3226, 2694,
	3226, 1965, 1303, 2125, 3173, 3174, 1283, 3216, 3163, 3161,
	1326, 3241, 1073, 3519, 1073, 3497, 1388, 3218, 3495, 2660,
	3072, 3441, 3418, 3244, 3417, 3246, 3415, 3406, 3075, 3303,
	3302, 1390, 3198, 3242, 3222, 3223, 3197, 3196, 3169, 3017,
	2994, 3181, 2993, 3182, 2978, 2177, 2147, 1491, 3189, 609,
	2977, 1073, 1073, 2704, 3229, 1073, 1073, 3221, 3230, 1735,
	2745, 2660, 3587, 3586, 1318, 2110, 2024, 3218, 1088, 3586,
	3587, 3073, 3291, 3271, 3240, 3193, 3286, 2973, 1070, 178,
	3, 3250, 62, 1733, 3253, 3300, 2, 3600, 3277, 3278,
	3249, 3601, 3287, 3288, 3119, 3304, 3305, 3257, 1, 2461,
	3255, 1685, 1256, 839, 3112, 835, 836, 837, 838, 834,
	1070, 3297, 1367, 3028, 3214, 2262, 1881, 1394, 1689, 841,
	3031, 2678, 2679, 1681, 2966, 1681, 2681, 1983, 2649, 2227,
	2097, 2850, 1293, 882, 3292, 1635, 1501, 3329, 3276, 3298,
	3296, 988, 1082, 1681, 1681, 1498, 1081, 1537, 1079, 1537,
	1585, 3311, 729, 1944, 2640, 2614, 3299, 3553, 3593, 117,
	117, 965, 3359, 3489, 3556, 1514, 3353, 713, 3409, 3314,
	3324, 3328, 3493, 3316, 3176, 1427, 1988, 1134, 1073, 3243,
	2726, 904, 767, 740, 1199, 1482, 3214, 3214, 1475, 3376,
	3214, 3214, 3382, 2788, 2786, 990, 3348, 739, 3042, 2491,
	2697, 3361, 987, 905, 1928, 3354, 3356, 3312, 1443, 3355,
	3238, 3239, 1447, 2143, 3369, 3460, 3251, 3372, 2898, 2549,
	1073, 3455, 3084, 3185, 3183, 1390, 3368, 3184, 649, 1860,
	586, 1169, 1152, 1151, 1161, 1162, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1153, 949, 3389, 3290, 1940, 650, 2126,
	3510, 3392, 3400, 862, 892, 2107, 863, 3398, 855, 2508,
	2507, 1388, 1554, 1143, 1571, 3430, 2804, 2805, 3049, 3050,
	3051, 1178, 687, 2012, 3055, 3056, 2488, 3424, 1073, 3107,
	2690, 61, 2405, 60, 3407, 59, 3414, 3412, 58, 1910,
	199, 2424, 2425, 3442, 731, 198, 3209, 3486, 3558, 2427,
	2428, 711, 710, 709, 708, 707, 706, 3437, 2240, 2238,
	3433, 2237, 2433, 1537, 1844, 1843, 3436, 1908, 3444, 2863,
	2579, 3459, 2574, 891, 1073, 1775, 1773, 2567, 2172, 2179,
	1772, 3453, 1390, 931, 3538, 3484, 3487, 3470, 1543, 1681,
	3474, 3476, 3478, 3480, 3471, 3458, 3268, 2624, 1721, 3467,
	2168, 1792, 2595, 1789, 1788, 3214, 2587, 3264, 3258, 3483,
	3488, 3473, 1820, 3357, 3225, 3091, 3092, 3098, 1388, 3496,
	1247, 3498, 3499, 3494, 1390, 3492, 2116, 3359, 1013, 1009,
	1011, 1012, 1010, 1138, 1139, 1140, 1137, 2412, 2149, 2826,
	2089, 2088, 2086, 3529, 2085, 1267, 3429, 3518, 3520, 3537,
	3506, 3521, 3522, 2532, 2533, 3192, 2285, 2283, 2959, 2955,
	1388, 1952, 1961, 3214, 2010, 2741, 933, 1845, 1841, 932,
	2109, 3560, 3335, 1726, 856, 3559, 3523, 3524, 3546, 2105,
	3547, 99, 3548, 152, 3549, 48, 89, 3550, 1152, 1151,
	1161, 1162, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1153,
	1073, 3564, 3566, 88, 3424, 98, 917, 150, 47, 3214,
	183, 182, 1613, 185, 893, 184, 181, 2336, 2337, 3575,
	3382, 180, 1431, 179, 3500, 3228, 829, 3577, 3578, 3576,
	38, 3581, 3582, 3592, 3584, 37, 3595, 33, 12, 11,
	34, 895, 3588, 3589, 3590, 3591, 21, 22, 20, 1505,
	1399, 19, 25, 3605, 615, 1073, 31, 30, 110, 2784,
	109, 29, 108, 107, 106, 3607, 3606, 105, 3459, 3609,
	104, 28, 18, 42, 41, 3615, 40, 9, 3560, 3619,
	97, 95, 3559, 3618, 27, 117, 96, 93, 94, 92,
	90, 3623, 3293, 73, 72, 71, 3294, 86, 3595, 3627,
	85, 84, 83, 82, 916, 915, 81, 79, 80, 903,
	70, 3631, 1152, 1151, 1161, 1162, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1153, 69, 914, 68, 67, 66, 91,
	77, 87, 78, 1821, 76, 3573, 890, 75, 1782, 74,
	65, 64, 63, 136, 135, 134, 133, 894, 926, 117,
	132, 130, 131, 117, 129, 128, 127, 2711, 126, 2713,
	125, 124, 43, 44, 45, 117, 46, 146, 1823, 1791,
	145, 922, 147, 149, 1609, 117, 151, 1681, 1824, 1825,
	1606, 148, 1681, 153, 1608, 1605, 1607, 1611, 1612, 1963,
	1537, 143, 1610, 141, 144, 142, 140, 56, 100, 17,
	24, 4, 0, 0, 1790, 0, 0, 923, 927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1798,
	0, 0, 0, 0, 2761, 0, 0, 911, 0, 909,
	913, 930, 0, 0, 0, 910, 907, 906, 0, 912,
	897, 898, 896, 899, 900, 901, 902, 2782, 928, 0,
	929, 0, 0, 0, 3401, 0, 0, 0, 0, 0,
	0, 924, 925, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 0,
	0, 0, 0, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 3443, 0, 0, 0, 0, 3447, 3448,
	0, 0, 879, 0, 880, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 1601, 1602, 1603, 1604, 1616, 1617, 1618, 1619,
	1620, 1621, 1614, 1615, 0, 0, 0, 0, 0, 3468,
	0, 0, 0, 0, 0, 0, 0, 1781, 1783, 1780,
	860, 1777, 0, 0, 0, 0, 1802, 0, 0, 0,
	0, 0, 0, 874, 0, 870, 0, 1808, 0, 0,
	0, 2913, 0, 0, 0, 1793, 0, 1776, 918, 0,
	0, 0, 0, 0, 0, 0, 0, 1796, 1830, 0,
	0, 1797, 1799, 1801, 0, 1803, 1804, 1805, 1809, 1810,
	1811, 1813, 1816, 1817, 1818, 1821, 0, 0, 0, 0,
	1782, 0, 1806, 1815, 1807, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1785, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1848,
	1823, 1791, 0, 0, 0, 0, 1822, 0, 0, 0,
	1824, 1825, 0, 0, 0, 0, 0, 0, 0, 0,
	3568, 3569, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1778, 1779, 0, 0, 0, 1790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1819,
	0, 1798, 876, 0, 869, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 872, 0, 1795, 0, 0, 0,
	0, 117, 0, 1794, 117, 117, 0, 117, 0, 0,
	854, 0, 0, 0, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1812, 0, 0,
	0, 0, 0, 0, 868, 0, 1800, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 1814, 1827,
	1826, 0, 965, 878, 0, 0, 0, 0, 867, 0,
	0, 0, 866, 117, 0, 0, 0, 0, 853, 0,
	0, 0, 859, 0, 1613, 0, 3009, 0, 0, 0,
	0, 0, 0, 3011, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 857, 0, 0, 0, 0, 0, 0,
	0, 0, 1787, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3024, 0, 0, 0, 0, 0, 0, 1781,
	2544, 1780, 0, 2543, 0, 0, 0, 0, 1802, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 1808,
	1169, 0, 0, 0, 1829, 0, 0, 1828, 0, 0,
	0, 0, 0, 0, 0, 0, 858, 0, 0, 1796,
	1830, 0, 0, 1797, 1799, 1801, 0, 1803, 1804, 1805,
	1809, 1810, 1811, 1813, 1816, 1817, 1818, 0, 0, 0,
	0, 0, 0, 0, 1806, 1815, 1807, 0, 0, 0,
	0, 0, 0, 1031, 0, 0, 1785, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1822, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 875, 0, 0, 1609, 0, 0, 0,
	0, 1681, 1606, 1778, 1779, 0, 1608, 1605, 1607, 1611,
	1612, 0, 1681, 0, 1610, 3151, 0, 0, 3153, 0,
	0, 1819, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 3160, 0, 0, 1795, 0,
	0, 0, 0, 0, 0, 1794, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1812,
	0, 0, 0, 1017, 0, 0, 0, 0, 1800, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1827, 1826, 1039, 1043, 1045, 1047, 1049, 1050, 1052,
	0, 1057, 1053, 1054, 1055, 1056, 0, 1034, 1035, 1036,
	1037, 1015, 1016, 1040, 0, 1018, 0, 1019, 1020, 1021,
	1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1028, 1029,
	1038, 0, 0, 0, 0, 0, 0, 0, 1042, 1044,
	1046, 1048, 1051, 0, 1787, 0, 0, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1616, 1617,
	1618, 1619, 1620, 1621, 1614, 1615, 0, 0, 0, 0,
	0, 0, 0, 2256, 1017, 1031, 1033, 0, 1007, 0,
	0, 0, 0, 0, 0, 0, 1829, 0, 0, 1828,
	0, 0, 0, 0, 1039, 1043, 1045, 1047, 1049, 1050,
	1052, 0, 1057, 1053, 1054, 1055, 1056, 0, 1034, 1035,
	1036, 1037, 1015, 1016, 1040, 0, 1018, 1821, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032, 1028,
	1029, 1038, 0, 0, 0, 0, 1848, 0, 0, 1042,
	1044, 1046, 1048, 1051, 0, 117, 0, 0, 0, 0,
	0, 0, 1823, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3349, 0, 0, 0, 1033, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3381, 0, 1017, 0, 0, 0, 0,
	0, 0, 0, 1798, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2409, 2410, 1039, 1043, 1045, 1047, 1049,
	1050, 1052, 0, 1057, 1053, 1054, 1055, 1056, 0, 1034,
	1035, 1036, 1037, 1015, 1016, 1040, 0, 1018, 0, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1030, 1032,
	1028, 1029, 1038, 0, 0, 0, 0, 0, 0, 0,
	1042, 1044, 1046, 1048, 1051, 0, 0, 0, 0, 0,
	1814, 0, 0, 0, 0, 0, 0, 0, 0, 1821,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 1033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1821, 0, 0, 0, 0, 0, 3466, 0, 0, 117,
	1802, 0, 0, 0, 0, 0, 0, 1041, 0, 0,
	0, 1808, 0, 0, 0, 1798, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1823, 0, 0, 0, 0,
	0, 1796, 1830, 0, 0, 1797, 1799, 1801, 0, 1803,
	1804, 1805, 1809, 1810, 1811, 1813, 1816, 1817, 1818, 0,
	0, 0, 0, 0, 0, 0, 1806, 1815, 1807, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3534, 0, 0, 0, 1798, 0, 3352, 0,
	0, 0, 1814, 660, 659, 666, 656, 0, 0, 0,
	1822, 0, 0, 0, 0, 663, 664, 0, 665, 669,
	0, 0, 651, 0, 0, 0, 0, 0, 1041, 0,
	0, 0, 674, 0, 1848, 1848, 1848, 1848, 0, 0,
	0, 0, 0, 0, 0, 0, 1848, 0, 0, 0,
	0, 0, 0, 1819, 0, 0, 0, 0, 0, 3534,
	0, 0, 0, 1814, 0, 0, 0, 0, 0, 0,
	1795, 0, 0, 0, 0, 678, 0, 1794, 680, 0,
	0, 0, 1802, 679, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1808, 0, 0, 0, 0, 0, 0,
	0, 1812, 0, 0, 0, 0, 0, 0, 3534, 0,
	1800, 0, 0, 1796, 1830, 0, 0, 1797, 1799, 1801,
	0, 1803, 1804, 1805, 1809, 1810, 1811, 1813, 1816, 1817,
	1818, 0, 117, 0, 0, 0, 0, 117, 1806, 1815,
	1807, 0, 0, 1802, 0, 3629, 0, 0, 0, 1041,
	0, 0, 0, 0, 1808, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 117, 0, 0, 0, 0, 0,
	0, 0, 1822, 0, 1796, 1830, 0, 0, 1797, 1799,
	1801, 0, 1803, 1804, 1805, 1809, 1810, 1811, 1813, 1816,
	1817, 1818, 0, 0, 0, 0, 0, 0, 0, 1806,
	1815, 1807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1819, 0, 0, 0, 652,
	654, 653, 0, 0, 0, 0, 0, 0, 0, 658,
	0, 0, 1795, 1822, 0, 0, 0, 0, 0, 1794,
	0, 662, 0, 0, 0, 0, 0, 0, 677, 0,
	0, 0, 0, 0, 0, 655, 0, 0, 0, 646,
	0, 0, 0, 1812, 0, 0, 0, 0, 0, 0,
	0, 0, 1800, 0, 0, 0, 1819, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 660,
	659, 666, 656, 1795, 0, 0, 0, 0, 0, 0,
	1794, 663, 664, 0, 665, 669, 0, 0, 651, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 674, 0,
	1848, 0, 0, 0, 1812, 0, 0, 0, 0, 0,
	0, 0, 0, 1800, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 657, 661, 667, 0, 668, 670, 0,
	0, 671, 672, 673, 0, 0, 675, 676, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 652, 654, 653, 0, 0,
	0, 0, 0, 0, 0, 658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 662, 0, 0,
	0, 0, 0, 0, 677, 0, 0, 0, 0, 0,
	0, 655, 0, 0, 747, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 0, 480, 513, 502, 585, 468,
	0, 0, 0, 0, 0, 0, 701, 0, 0, 0,
	297, 0, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 738, 516, 467, 388, 341, 534, 533, 0, 0,
	800, 808, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 694, 0, 0, 728, 777, 776, 715, 725,
	0, 117, 270, 197, 464, 581, 465, 716, 117, 724,
	717, 721, 720, 718, 719, 0, 792, 0, 0, 0,
	0, 0, 0, 686, 698, 0, 702, 0, 0, 657,
	661, 667, 0, 668, 670, 0, 0, 671, 672, 673,
	0, 0, 675, 676, 0, 0, 0, 0, 0, 0,
	695, 696, 0, 0, 1848, 0, 748, 0, 697, 0,
	0, 743, 722, 726, 0, 0, 0, 0, 260, 393,
	410, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 262, 408, 390, 338, 317, 318, 261, 0, 375,
	295, 309, 292, 354, 723, 746, 750, 291, 814, 744,
	418, 264, 0, 417, 353, 404, 409, 339, 333, 263,
	406, 337, 332, 321, 299, 815, 322, 323, 313, 365,
	331, 366, 314, 343, 342, 344, 0, 0, 0, 0,
	0, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 741, 0, 578, 0,
	420, 0, 0, 798, 0, 0, 0, 392, 0, 117,
	324, 0, 0, 0, 745, 0, 378, 359, 811, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 1637,
	1636, 1638, 432, 325, 326, 0, 304, 252, 253, 595,
	796, 355, 544, 577, 469, 0, 810, 791, 793, 794,
	797, 801, 802, 803, 804, 805, 807, 809, 813, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	812, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	749, 519, 520, 345, 346, 347, 348, 799, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 821, 795, 820, 822,
	823, 819, 824, 825, 806, 705, 0, 753, 817, 816,
	818, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 476, 328, 0, 369, 302,
	540, 541, 784, 760, 761, 762, 703, 763, 757, 758,
	759, 785, 751, 781, 782, 730, 754, 764, 780, 765,
	783, 786, 787, 826, 827, 771, 755, 222, 828, 768,
	788, 779, 778, 766, 752, 789, 790, 737, 732, 769,
	770, 756, 772, 773, 774, 704, 733, 734, 735, 736,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 775, 747, 596, 466, 576,
	0, 0, 0, 0, 0, 357, 0, 480, 513, 502,
	585, 468, 0, 0, 0, 0, 0, 0, 701, 0,
	0, 0, 297, 1682, 0, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 738, 516, 467, 388, 341, 534, 533,
	0, 0, 800, 808, 0, 0, 0, 0, 0, 0,
	0, 1872, 0, 0, 694, 0, 0, 728, 777, 776,
	715, 725, 0, 0, 270, 197, 464, 581, 465, 716,
	0, 724, 717, 721, 720, 718, 719, 0, 792, 0,
	0, 0, 0, 0, 0, 686, 698, 0, 702, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 695, 696, 0, 0, 0, 0, 748, 0,
	697, 0, 0, 1873, 722, 726, 0, 0, 0, 0,
	260, 393, 410, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 723, 746, 750, 291,
	814, 744, 418, 264, 0, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 815, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 741, 0,
	578, 0, 420, 0, 0, 798, 0, 0, 0, 392,
	0, 0, 324, 0, 0, 0, 745, 0, 378, 359,
	811, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	372, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 599, 600, 601, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 595, 796, 355, 544, 577, 469, 0, 810, 791,
	793, 794, 797, 801, 802, 803, 804, 805, 807, 809,
	813, 594, 0, 523, 538, 597, 537, 591, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	567, 560, 812, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 749, 519, 520, 345, 346, 347, 348, 799,
	545, 275, 443, 371, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 352, 315, 316, 386, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 334, 498, 525, 821, 795,
	820, 822, 823, 819, 824, 825, 806, 705, 0, 753,
	817, 816, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 592, 589, 403, 593, 0, 254, 476, 328, 0,
	369, 302, 540, 541, 784, 760, 761, 762, 703, 763,
	757, 758, 759, 785, 751, 781, 782, 730, 754, 764,
	780, 765, 783, 786, 787, 826, 827, 771, 755, 222,
	828, 768, 788, 779, 778, 766, 752, 789, 790, 737,
	732, 769, 770, 756, 772, 773, 774, 704, 733, 734,
	735, 736, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 775, 0, 596,
	466, 576, 174, 747, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	1172, 516, 467, 388, 341, 534, 533, 0, 0, 800,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 728, 777, 776, 715, 725, 0,
	0, 270, 197, 464, 581, 465, 716, 0, 724, 717,
	721, 720, 718, 719, 0, 792, 0, 0, 0, 0,
	0, 0, 686, 698, 0, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	696, 0, 0, 0, 0, 748, 0, 697, 0, 0,
	743, 722, 726, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 723, 746, 750, 291, 814, 744, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 815, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 741, 0, 578, 0, 420,
	0, 0, 798, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 745, 0, 378, 359, 811, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 796,
	355, 544, 577, 469, 0, 810, 791, 793, 794, 797,
	801, 802, 803, 804, 805, 807, 809, 813, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 812,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 749,
	519, 520, 345, 346, 347, 348, 799, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 821, 795, 820, 822, 823,
	819, 824, 825, 806, 705, 0, 753, 817, 816, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 139, 369, 302, 540,
	541, 784, 760, 761, 762, 703, 763, 757, 758, 759,
	785, 751, 781, 782, 730, 754, 764, 780, 765, 783,
	786, 787, 826, 827, 771, 755, 222, 828, 768, 788,
	779, 778, 766, 752, 789, 790, 737, 732, 769, 770,
	756, 772, 773, 774, 704, 733, 734, 735, 736, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 775, 747, 596, 466, 576, 0,
	0, 0, 0, 0, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 0, 701, 0, 0,
	0, 297, 3628, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 738, 516, 467, 388, 341, 534, 533, 0,
	0, 800, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 728, 777, 776, 715,
	725, 0, 0, 270, 197, 464, 581, 465, 716, 0,
	724, 717, 721, 720, 718, 719, 0, 792, 0, 0,
	0, 0, 0, 0, 686, 698, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 696, 0, 0, 0, 0, 748, 0, 697,
	0, 0, 743, 722, 726, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 723, 746, 750, 291, 814,
	744, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 815, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 741, 0, 578,
	0, 420, 0, 0, 798, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 745, 0, 378, 359, 811,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 796, 355, 544, 577, 469, 0, 810, 791, 793,
	794, 797, 801, 802, 803, 804, 805, 807, 809, 813,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 812, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 749, 519, 520, 345, 346, 347, 348, 799, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 821, 795, 820,
	822, 823, 819, 824, 825, 806, 705, 0, 753, 817,
	816, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 784, 760, 761, 762, 703, 763, 757,
	758, 759, 785, 751, 781, 782, 730, 754, 764, 780,
	765, 783, 786, 787, 826, 827, 771, 755, 222, 828,
	768, 788, 779, 778, 766, 752, 789, 790, 737, 732,
	769, 770, 756, 772, 773, 774, 704, 733, 734, 735,
	736, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 775, 747, 596, 466,
	576, 0, 0, 0, 0, 0, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 738, 516, 467, 388, 341, 534,
	533, 0, 0, 800, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 728, 777,
	776, 715, 725, 0, 0, 270, 197, 464, 581, 465,
	716, 0, 724, 717, 721, 720, 718, 719, 0, 792,
	0, 0, 0, 0, 0, 0, 686, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 748,
	0, 697, 0, 0, 743, 722, 726, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 723, 746, 750,
	291, 814, 744, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 815, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 741,
	0, 578, 0, 420, 0, 0, 798, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 745, 0, 378,
	359, 811, 3535, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 796, 355, 544, 577, 469, 0, 810,
	791, 793, 794, 797, 801, 802, 803, 804, 805, 807,
	809, 813, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 812, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 749, 519, 520, 345, 346, 347, 348,
	799, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 821,
	795, 820, 822, 823, 819, 824, 825, 806, 705, 0,
	753, 817, 816, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 784, 760, 761, 762, 703,
	763, 757, 758, 759, 785, 751, 781, 782, 730, 754,
	764, 780, 765, 783, 786, 787, 826, 827, 771, 755,
	222, 828, 768, 788, 779, 778, 766, 752, 789, 790,
	737, 732, 769, 770, 756, 772, 773, 774, 704, 733,
	734, 735, 736, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 775, 747,
	596, 466, 576, 0, 0, 0, 0, 0, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 297, 1682, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 738, 516, 467, 388,
	341, 534, 533, 0, 0, 800, 808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	728, 777, 776, 715, 725, 0, 0, 270, 197, 464,
	581, 465, 716, 0, 724, 717, 721, 720, 718, 719,
	0, 792, 0, 0, 0, 0, 0, 0, 686, 698,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 696, 0, 0, 0,
	0, 748, 0, 697, 0, 0, 743, 722, 726, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 723,
	746, 750, 291, 814, 744, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	815, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 741, 0, 578, 0, 420, 0, 0, 798, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 745,
	0, 378, 359, 811, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 796, 355, 544, 577, 469,
	0, 810, 791, 793, 794, 797, 801, 802, 803, 804,
	805, 807, 809, 813, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 812, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 749, 519, 520, 345, 346,
	347, 348, 799, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 821, 795, 820, 822, 823, 819, 824, 825, 806,
	705, 0, 753, 817, 816, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 784, 760, 761,
	762, 703, 763, 757, 758, 759, 785, 751, 781, 782,
	730, 754, 764, 780, 765, 783, 786, 787, 826, 827,
	771, 755, 222, 828, 768, 788, 779, 778, 766, 752,
	789, 790, 737, 732, 769, 770, 756, 772, 773, 774,
	704, 733, 734, 735, 736, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	775, 747, 596, 466, 576, 0, 0, 0, 0, 0,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 738, 516,
	467, 388, 341, 534, 533, 0, 0, 800, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 728, 777, 776, 715, 725, 0, 0, 270,
	197, 464, 581, 465, 716, 0, 724, 717, 721, 720,
	718, 719, 0, 792, 0, 0, 0, 0, 0, 0,
	686, 698, 0, 702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 696, 1426,
	0, 0, 0, 748, 0, 697, 0, 0, 743, 722,
	726, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 723, 746, 750, 291, 814, 744, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 815, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 741, 0, 578, 0, 420, 0, 0,
	798, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 745, 0, 378, 359, 811, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 796, 355, 544,
	577, 469, 0, 810, 791, 793, 794, 797, 801, 802,
	803, 804, 805, 807, 809, 813, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 812, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 749, 519, 520,
	345, 346, 347, 348, 799, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 821, 795, 820, 822, 823, 819, 824,
	825, 806, 705, 0, 753, 817, 816, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 784,
	760, 761, 762, 703, 763, 757, 758, 759, 785, 751,
	781, 782, 730, 754, 764, 780, 765, 783, 786, 787,
	826, 827, 771, 755, 222, 828, 768, 788, 779, 778,
	766, 752, 789, 790, 737, 732, 769, 770, 756, 772,
	773, 774, 704, 733, 734, 735, 736, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 775, 0, 596, 466, 576, 747, 0, 0,
	2032, 0, 0, 0, 0, 0, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 738, 516, 467, 388, 341, 534,
	533, 0, 0, 800, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 728, 777,
	776, 715, 725, 0, 0, 270, 197, 464, 581, 465,
	716, 0, 724, 717, 721, 720, 718, 719, 0, 792,
	0, 0, 0, 0, 0, 0, 686, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 748,
	0, 697, 0, 0, 743, 722, 726, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 723, 746, 750,
	291, 814, 744, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 815, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 741,
	0, 578, 0, 420, 0, 0, 798, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 745, 0, 378,
	359, 811, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 796, 355, 544, 577, 469, 0, 810,
	791, 793, 794, 797, 801, 802, 803, 804, 805, 807,
	809, 813, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 812, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 749, 519, 520, 345, 346, 347, 348,
	799, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 821,
	795, 820, 822, 823, 819, 824, 825, 806, 705, 0,
	753, 817, 816, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 784, 760, 761, 762, 703,
	763, 757, 758, 759, 785, 751, 781, 782, 730, 754,
	764, 780, 765, 783, 786, 787, 826, 827, 771, 755,
	222, 828, 768, 788, 779, 778, 766, 752, 789, 790,
	737, 732, 769, 770, 756, 772, 773, 774, 704, 733,
	734, 735, 736, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 775, 747,
	596, 466, 576, 0, 0, 0, 0, 0, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 738, 516, 467, 388,
	341, 534, 533, 0, 0, 800, 808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 694, 0, 0,
	728, 777, 776, 715, 725, 0, 0, 270, 197, 464,
	581, 465, 716, 0, 724, 717, 721, 720, 718, 719,
	0, 792, 0, 0, 0, 0, 0, 0, 686, 698,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 696, 1675, 0, 0,
	0, 748, 0, 697, 0, 0, 743, 722, 726, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 723,
	746, 750, 291, 814, 744, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	815, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 741, 0, 578, 0, 420, 0, 0, 798, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 745,
	0, 378, 359, 811, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 796, 355, 544, 577, 469,
	0, 810, 791, 793, 794, 797, 801, 802, 803, 804,
	805, 807, 809, 813, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 812, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 749, 519, 520, 345, 346,
	347, 348, 799, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 821, 795, 820, 822, 823, 819, 824, 825, 806,
	705, 0, 753, 817, 816, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 784, 760, 761,
	762, 703, 763, 757, 758, 759, 785, 751, 781, 782,
	730, 754, 764, 780, 765, 783, 786, 787, 826, 827,
	771, 755, 222, 828, 768, 788, 779, 778, 766, 752,
	789, 790, 737, 732, 769, 770, 756, 772, 773, 774,
	704, 733, 734, 735, 736, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	775, 747, 596, 466, 576, 0, 0, 0, 0, 0,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 701, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 738, 516,
	467, 388, 341, 534, 533, 0, 0, 800, 808, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 694,
	0, 0, 728, 777, 776, 715, 725, 0, 0, 270,
	197, 464, 581, 465, 716, 0, 724, 717, 721, 720,
	718, 719, 0, 792, 0, 0, 0, 0, 0, 0,
	686, 698, 0, 702, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 695, 696, 0,
	0, 0, 0, 748, 0, 697, 0, 0, 743, 722,
	726, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 723, 746, 750, 291, 814, 744, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 815, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 741, 0, 578, 0, 420, 0, 0,
	798, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 745, 0, 378, 359, 811, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 796, 355, 544,
	577, 469, 0, 810, 791, 793, 794, 797, 801, 802,
	803, 804, 805, 807, 809, 813, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 812, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 749, 519, 520,
	345, 346, 347, 348, 799, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 821, 795, 820, 822, 823, 819, 824,
	825, 806, 705, 0, 753, 817, 816, 818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 784,
	760, 761, 762, 703, 763, 757, 758, 759, 785, 751,
	781, 782, 730, 754, 764, 780, 765, 783, 786, 787,
	826, 827, 771, 755, 222, 828, 768, 788, 779, 778,
	766, 752, 789, 790, 737, 732, 769, 770, 756, 772,
	773, 774, 704, 733, 734, 735, 736, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 775, 747, 596, 466, 576, 0, 0, 0,
	0, 0, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	738, 516, 467, 388, 341, 534, 533, 0, 0, 800,
	808, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 694, 0, 0, 728, 777, 776, 715, 725, 0,
	0, 270, 197, 464, 581, 465, 2458, 0, 724, 2459,
	721, 720, 718, 719, 0, 792, 0, 0, 0, 0,
	0, 0, 686, 698, 0, 702, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 695,
	696, 0, 0, 0, 0, 748, 0, 697, 0, 0,
	743, 722, 726, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 723, 746, 750, 291, 814, 744, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 815, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 741, 0, 578, 0, 420,
	0, 0, 798, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 745, 0, 378, 359, 811, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 796,
	355, 544, 577, 469, 0, 810, 791, 793, 794, 797,
	801, 802, 803, 804, 805, 807, 809, 813, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 812,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 749,
	519, 520, 345, 346, 347, 348, 799, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 821, 795, 820, 822, 823,
	819, 824, 825, 806, 705, 0, 753, 817, 816, 818,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 0, 369, 302, 540,
	541, 784, 760, 761, 762, 703, 763, 757, 758, 759,
	785, 751, 781, 782, 730, 754, 764, 780, 765, 783,
	786, 787, 826, 827, 771, 755, 222, 828, 768, 788,
	779, 778, 766, 752, 789, 790, 737, 732, 769, 770,
	756, 772, 773, 774, 704, 733, 734, 735, 736, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 775, 747, 596, 466, 576, 0,
	0, 0, 0, 0, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 1555, 0, 0, 0, 701, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 738, 516, 467, 388, 341, 534, 533, 0,
	0, 800, 808, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 694, 0, 0, 728, 777, 776, 715,
	725, 0, 0, 270, 197, 464, 581, 465, 716, 0,
	724, 717, 721, 720, 718, 719, 0, 792, 0, 0,
	0, 0, 0, 0, 0, 698, 0, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 695, 696, 0, 0, 0, 0, 748, 0, 697,
	0, 0, 743, 722, 726, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 723, 746, 750, 291, 814,
	744, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 815, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 741, 0, 578,
	0, 420, 0, 0, 798, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 745, 0, 378, 359, 811,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 1556, 1557, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 796, 355, 544, 577, 469, 0, 810, 791, 793,
	794, 797, 801, 802, 803, 804, 805, 807, 809, 813,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 812, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 749, 519, 520, 345, 346, 347, 348, 799, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 821, 795, 820,
	822, 823, 819, 824, 825, 806, 705, 0, 753, 817,
	816, 818, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 784, 760, 761, 762, 703, 763, 757,
	758, 759, 785, 751, 781, 782, 730, 754, 764, 780,
	765, 783, 786, 787, 826, 827, 771, 755, 222, 828,
	768, 788, 779, 778, 766, 752, 789, 790, 737, 732,
	769, 770, 756, 772, 773, 774, 704, 733, 734, 735,
	736, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 775, 747, 596, 466,
	576, 0, 0, 0, 0, 0, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 701,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 738, 516, 467, 388, 341, 534,
	533, 0, 0, 800, 808, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 694, 0, 0, 728, 777,
	776, 715, 725, 0, 0, 270, 197, 464, 581, 465,
	716, 0, 724, 717, 721, 720, 718, 719, 0, 792,
	0, 0, 0, 0, 0, 0, 0, 698, 0, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 695, 696, 0, 0, 0, 0, 748,
	0, 697, 0, 0, 743, 722, 726, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 723, 746, 750,
	291, 814, 744, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 815, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 741,
	0, 578, 0, 420, 0, 0, 798, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 745, 0, 378,
	359, 811, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 796, 355, 544, 577, 469, 0, 810,
	791, 793, 794, 797, 801, 802, 803, 804, 805, 807,
	809, 813, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 812, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 749, 519, 520, 345, 346, 347, 348,
	799, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 821,
	795, 820, 822, 823, 819, 824, 825, 806, 705, 0,
	753, 817, 816, 818, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 784, 760, 761, 762, 703,
	763, 757, 758, 759, 785, 751, 781, 782, 730, 754,
	764, 780, 765, 783, 786, 787, 826, 827, 771, 755,
	222, 828, 768, 788, 779, 778, 766, 752, 789, 790,
	737, 732, 769, 770, 756, 772, 773, 774, 704, 733,
	734, 735, 736, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 775, 747,
	596, 466, 576, 0, 0, 0, 0, 0, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 701, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 738, 516, 467, 388,
	341, 534, 533, 0, 0, 800, 808, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	728, 777, 776, 715, 725, 0, 0, 270, 197, 464,
	581, 465, 716, 0, 724, 717, 721, 720, 718, 719,
	0, 792, 0, 0, 0, 0, 0, 0, 686, 698,
	0, 702, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 695, 696, 0, 0, 0,
	0, 748, 0, 697, 0, 0, 743, 722, 726, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 723,
	746, 750, 291, 814, 744, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	815, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 741, 0, 578, 0, 420, 0, 0, 798, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 745,
	0, 378, 359, 811, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 796, 355, 544, 577, 469,
	0, 810, 791, 793, 794, 797, 801, 802, 803, 804,
	805, 807, 809, 813, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 812, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 749, 519, 520, 345, 346,
	347, 348, 799, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 821, 795, 820, 822, 823, 819, 824, 825, 806,
	705, 0, 753, 817, 816, 818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 784, 760, 761,
	762, 703, 763, 757, 758, 759, 785, 751, 781, 782,
	730, 754, 764, 780, 765, 783, 786, 787, 826, 827,
	771, 755, 222, 828, 768, 788, 779, 778, 766, 752,
	789, 790, 737, 732, 769, 770, 756, 772, 773, 774,
	704, 733, 734, 735, 736, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	775, 0, 596, 466, 576, 174, 51, 163, 138, 0,
	0, 0, 0, 0, 0, 357, 0, 480, 513, 502,
	585, 468, 0, 164, 0, 0, 0, 0, 0, 0,
	156, 0, 297, 0, 165, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 115, 516, 467, 388, 341, 534, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 103, 0,
	0, 0, 0, 0, 168, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 270, 197, 464, 581, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	260, 393, 410, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 0, 407, 435, 291,
	426, 0, 418, 264, 0, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 451, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 137, 162, 172, 0, 101, 0, 575, 0, 0,
	578, 0, 420, 0, 0, 189, 0, 0, 0, 392,
	0, 0, 324, 161, 155, 154, 436, 0, 378, 359,
	201, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	372, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 554, 555, 556, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 415, 290, 355, 544, 577, 469, 0, 531, 470,
	479, 282, 503, 515, 514, 351, 431, 192, 526, 529,
	461, 202, 0, 523, 538, 496, 537, 203, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	567, 560, 416, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 440, 519, 520, 345, 346, 347, 348, 308,
	545, 275, 443, 371, 113, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 200, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 352, 315, 316, 386, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 334, 498, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 370, 265, 403, 381, 0, 254, 476, 328, 139,
	369, 302, 540, 541, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 251, 246, 247,
	248, 249, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 204, 39, 190, 193, 195, 194, 0, 49, 524,
	536, 570, 5, 579, 580, 582, 584, 583, 118, 205,
	466, 576, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	0, 516, 467, 388, 341, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1205, 0, 0, 196, 0, 0, 715, 725, 0,
	0, 270, 197, 464, 581, 465, 716, 0, 724, 717,
	721, 720, 718, 719, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 722, 0, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 723, 407, 435, 291, 426, 0, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 451, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 420,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 436, 0, 378, 359, 598, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 290,
	355, 544, 577, 469, 0, 531, 470, 479, 282, 503,
	515, 514, 351, 431, 0, 526, 529, 461, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 416,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 440,
	519, 520, 345, 346, 347, 348, 308, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 0, 369, 302, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 543, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 251, 246, 247, 248, 249, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 583, 0, 596, 466, 576, 174,
	51, 163, 138, 0, 0, 0, 0, 0, 0, 357,
	619, 480, 513, 502, 585, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 327,
	517, 499, 509, 500, 485, 486, 487, 494, 307, 488,
	489, 490, 462, 491, 463, 492, 493, 0, 516, 467,
	388, 341, 534, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 624, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 270, 197,
	464, 581, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 0, 260, 393, 410, 271, 384, 423,
	276, 391, 266, 356, 380, 0, 0, 262, 408, 390,
	338, 317, 318, 261, 0, 375, 295, 309, 292, 354,
	0, 407, 435, 291, 426, 0, 418, 264, 0, 417,
	353, 404, 409, 339, 333, 263, 406, 337, 332, 321,
	299, 451, 322, 323, 313, 365, 331, 366, 314, 343,
	342, 344, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	0, 575, 0, 0, 578, 0, 420, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 324, 0, 0, 0,
	436, 0, 378, 359, 598, 0, 0, 376, 329, 405,
	367, 411, 394, 419, 372, 368, 255, 395, 294, 340,
	267, 269, 289, 296, 298, 300, 301, 349, 350, 362,
	383, 396, 397, 398, 293, 277, 377, 278, 311, 279,
	256, 285, 283, 286, 385, 287, 258, 363, 402, 0,
	306, 373, 336, 259, 335, 364, 401, 400, 268, 427,
	433, 434, 521, 0, 439, 599, 600, 601, 448, 453,
	454, 455, 457, 458, 459, 460, 522, 539, 506, 477,
	441, 530, 473, 478, 542, 0, 0, 0, 432, 325,
	326, 0, 304, 252, 253, 595, 290, 355, 544, 577,
	469, 0, 531, 470, 479, 282, 503, 515, 514, 351,
	431, 0, 526, 529, 461, 594, 0, 523, 538, 597,
	537, 591, 361, 0, 382, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 471, 0, 389, 413, 425,
	442, 445, 472, 557, 558, 559, 257, 444, 561, 562,
	563, 564, 565, 566, 567, 560, 416, 504, 481, 507,
	424, 484, 483, 0, 0, 518, 440, 519, 520, 345,
	346, 347, 348, 620, 622, 275, 443, 371, 632, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 437, 438, 303,
	310, 456, 312, 274, 360, 305, 422, 319, 0, 449,
	512, 450, 571, 574, 572, 573, 352, 315, 316, 386,
	320, 330, 374, 421, 358, 379, 272, 412, 387, 334,
	498, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 399,
	284, 250, 280, 281, 288, 592, 589, 403, 593, 0,
	254, 476, 328, 139, 369, 302, 540, 541, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 251, 246, 247, 248, 249, 0, 0, 0, 428,
	429, 430, 452, 414, 474, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 466, 576, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 0, 516, 467, 388, 341, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 270, 197, 464, 581, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	2160, 2163, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 0, 407, 435,
	291, 426, 0, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 451, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 2164, 420, 0, 0, 0, 2159, 0, 2158,
	392, 2156, 2161, 324, 0, 0, 0, 436, 0, 378,
	359, 598, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 2162, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 290, 355, 544, 577, 469, 0, 531,
	470, 479, 282, 503, 515, 514, 351, 431, 0, 526,
	529, 461, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 416, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 440, 519, 520, 345, 346, 347, 348,
	308, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 543, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 251, 246,
	247, 248, 249, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 583, 0,
	596, 466, 576, 357, 0, 480, 513, 502, 585, 468,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 0, 516, 467, 388, 341, 534, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 270, 197, 464, 581, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 475, 0, 0, 0, 0, 0, 260, 393,
	410, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 2309, 2312, 2313, 2314, 2315, 2316, 2317, 0, 2322,
	2318, 2319, 2320, 2321, 0, 2304, 2305, 2306, 2307, 1015,
	2288, 2310, 0, 2289, 353, 2290, 2291, 2292, 2293, 2294,
	2295, 2296, 2297, 2298, 2301, 2302, 2299, 2300, 2308, 365,
	331, 366, 314, 343, 342, 344, 1042, 1044, 1046, 1048,
	1051, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 578, 0,
	420, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	324, 0, 0, 0, 2303, 0, 378, 359, 598, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 0,
	0, 0, 432, 325, 326, 0, 304, 252, 253, 595,
	290, 355, 544, 577, 469, 0, 531, 470, 479, 282,
	503, 515, 514, 351, 431, 0, 526, 529, 461, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	416, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	440, 519, 520, 345, 346, 347, 348, 308, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 2311, 328, 0, 369, 302,
	540, 541, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 251, 246, 247, 248, 249,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 466, 576,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 0, 516,
	467, 388, 341, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 270,
	197, 464, 581, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 2181, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 0, 407, 435, 291, 426, 0, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 451, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 2180, 420, 0, 0,
	0, 2186, 2183, 2185, 392, 0, 2184, 324, 0, 0,
	0, 436, 0, 378, 359, 598, 0, 2178, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 290, 355, 544,
	577, 469, 0, 531, 470, 479, 282, 503, 515, 514,
	351, 431, 0, 526, 529, 461, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 416, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 440, 519, 520,
	345, 346, 347, 348, 308, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 543, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 251, 246, 247, 248, 249, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 583, 0, 596, 466, 576, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 2181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 2180, 420, 0, 0, 0, 2186, 2183,
	2185, 392, 0, 2184, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	289, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 1912, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1913,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	1138, 1139, 1140, 1137, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 174, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 357, 0, 480, 513, 502, 585, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 327, 517, 499, 509, 500, 485, 486, 487, 494,
	307, 488, 489, 490, 462, 491, 463, 492, 493, 115,
	516, 467, 388, 341, 534, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	168, 1956, 0, 196, 0, 0, 0, 0, 0, 0,
	270, 197, 464, 581, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 260, 393, 410, 271,
	384, 423, 276, 391, 266, 356, 380, 0, 0, 262,
	408, 390, 338, 317, 318, 261, 0, 375, 295, 309,
	292, 354, 0, 407, 435, 291, 426, 0, 418, 264,
	0, 417, 353, 404, 409, 339, 333, 263, 406, 337,
	332, 321, 299, 451, 322, 323, 313, 365, 331, 366,
	314, 343, 342, 344, 0, 0, 0, 0, 0, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 578, 0, 420, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 324, 0,
	0, 0, 436, 0, 378, 359, 598, 0, 0, 376,
	329, 405, 367, 411, 394, 419, 372, 368, 255, 395,
	294, 340, 267, 269, 289, 296, 298, 300, 301, 349,
	350, 362, 383, 396, 397, 398, 293, 277, 377, 278,
	311, 279, 256, 285, 283, 286, 385, 287, 258, 363,
	402, 0, 306, 373, 336, 259, 335, 364, 401, 400,
	268, 427, 433, 434, 521, 0, 439, 599, 600, 601,
	448, 453, 454, 455, 457, 458, 459, 460, 522, 539,
	506, 477, 441, 530, 473, 478, 542, 0, 0, 0,
	432, 325, 326, 0, 304, 252, 253, 595, 290, 355,
	544, 577, 469, 0, 531, 470, 479, 282, 503, 515,
	514, 351, 431, 0, 526, 529, 461, 594, 0, 523,
	538, 597, 537, 591, 361, 0, 382, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 471, 0, 389,
	413, 425, 442, 445, 472, 557, 558, 559, 257, 444,
	561, 562, 563, 564, 565, 566, 567, 560, 416, 504,
	481, 507, 424, 484, 483, 0, 0, 518, 440, 519,
	520, 345, 346, 347, 348, 308, 545, 275, 443, 371,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 437,
	438, 303, 310, 456, 312, 274, 360, 305, 422, 319,
	0, 449, 512, 450, 571, 574, 572, 573, 352, 315,
	316, 386, 320, 330, 374, 421, 358, 379, 272, 412,
	387, 334, 498, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 399, 284, 250, 280, 281, 288, 592, 589, 403,
	593, 0, 254, 476, 328, 139, 369, 302, 540, 541,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 251, 246, 247, 248, 249, 0, 0,
	0, 428, 429, 430, 452, 414, 474, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 174, 579,
	580, 582, 584, 583, 0, 596, 466, 576, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 115, 516, 467, 388,
	341, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 168, 1947, 0,
	196, 0, 0, 0, 0, 0, 0, 270, 197, 464,
	581, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 0,
	407, 435, 291, 426, 0, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	451, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 420, 0, 0, 0, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 436,
	0, 378, 359, 598, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 290, 355, 544, 577, 469,
	0, 531, 470, 479, 282, 503, 515, 514, 351, 431,
	0, 526, 529, 461, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 416, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 440, 519, 520, 345, 346,
	347, 348, 308, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 139, 369, 302, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	543, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	251, 246, 247, 248, 249, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	583, 0, 596, 466, 576, 357, 0, 480, 513, 502,
	585, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 948, 0, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 0, 516, 467, 388, 341, 534, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 955, 956,
	0, 0, 0, 0, 270, 197, 464, 581, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	260, 393, 943, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 0, 407, 435, 291,
	426, 933, 418, 264, 932, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 451, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	578, 0, 420, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 324, 0, 0, 0, 436, 0, 378, 359,
	598, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	946, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 599, 600, 601, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 595, 290, 355, 544, 577, 469, 0, 531, 470,
	479, 282, 503, 515, 514, 351, 431, 0, 526, 529,
	461, 594, 0, 523, 538, 597, 537, 591, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	947, 560, 416, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 950, 519, 520, 345, 346, 347, 348, 308,
	545, 275, 443, 371, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 957, 944, 953, 945, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 954, 498, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 592, 589, 403, 593, 0, 254, 476, 328, 0,
	369, 302, 540, 541, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 251, 246, 247,
	248, 249, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 174, 579, 580, 582, 584, 583, 0, 596,
	466, 576, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	115, 516, 467, 388, 341, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1846, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 270, 197, 464, 581, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 0, 407, 435, 291, 426, 0, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 451, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 420,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 436, 0, 378, 359, 598, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 290,
	355, 544, 577, 469, 0, 531, 470, 479, 282, 503,
	515, 514, 351, 431, 0, 526, 529, 461, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 416,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 440,
	519, 520, 345, 346, 347, 348, 308, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 139, 369, 302, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 543, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 251, 246, 247, 248, 249, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 583, 0, 596, 466, 576, 357,
	0, 480, 513, 502, 585, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 327,
	517, 499, 509, 500, 485, 486, 487, 494, 307, 488,
	489, 490, 462, 491, 463, 492, 493, 0, 516, 467,
	388, 341, 534, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 955, 956, 0, 0, 0, 0, 270, 197,
	464, 581, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 959, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 0, 260, 393, 410, 271, 384, 423,
	276, 391, 266, 356, 380, 0, 0, 262, 408, 390,
	338, 317, 318, 261, 0, 375, 295, 309, 292, 354,
	0, 407, 435, 291, 426, 933, 418, 264, 932, 417,
	353, 404, 409, 339, 333, 263, 406, 337, 332, 321,
	299, 451, 322, 323, 313, 365, 331, 366, 314, 343,
	342, 344, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 578, 0, 420, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 324, 0, 0, 0,
	436, 0, 378, 359, 598, 0, 0, 376, 329, 405,
	367, 411, 394, 419, 372, 368, 255, 395, 294, 340,
	267, 269, 289, 296, 298, 300, 301, 349, 350, 362,
	383, 396, 397, 398, 293, 277, 377, 278, 311, 279,
	256, 285, 283, 286, 385, 287, 258, 363, 402, 0,
	306, 373, 336, 259, 335, 364, 401, 400, 268, 427,
	433, 434, 521, 0, 439, 599, 600, 601, 448, 453,
	454, 455, 457, 458, 459, 460, 522, 539, 506, 477,
	441, 530, 473, 478, 542, 0, 0, 0, 432, 325,
	326, 0, 304, 252, 253, 595, 290, 355, 544, 577,
	469, 0, 531, 470, 479, 282, 503, 515, 514, 351,
	431, 0, 526, 529, 461, 594, 0, 523, 538, 597,
	537, 591, 361, 0, 382, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 471, 0, 389, 413, 425,
	442, 445, 472, 557, 558, 559, 257, 444, 561, 562,
	563, 564, 565, 566, 567, 560, 416, 504, 481, 507,
	424, 484, 483, 0, 0, 518, 440, 519, 520, 345,
	346, 347, 348, 308, 545, 275, 443, 371, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 437, 438, 303,
	310, 456, 312, 274, 360, 305, 422, 319, 0, 449,
	512, 450, 571, 574, 572, 573, 957, 1865, 953, 1866,
	320, 330, 374, 421, 358, 379, 272, 412, 387, 954,
	498, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 399,
	284, 250, 280, 281, 288, 592, 589, 403, 593, 0,
	254, 476, 328, 0, 369, 302, 540, 541, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 251, 246, 247, 248, 249, 0, 0, 0, 428,
	429, 430, 452, 414, 474, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 466, 576, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 2653, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 0, 516, 467, 388, 341, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 270, 197, 464, 581, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 0, 407, 435,
	291, 426, 0, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 451, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 2656, 0, 0, 2655, 575, 0,
	0, 578, 0, 420, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 436, 0, 378,
	359, 598, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 290, 355, 544, 577, 469, 0, 531,
	470, 479, 282, 503, 515, 514, 351, 431, 0, 526,
	529, 461, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 416, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 440, 519, 520, 345, 346, 347, 348,
	308, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 543, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 251, 246,
	247, 248, 249, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 583, 0,
	596, 466, 576, 357, 0, 480, 513, 502, 585, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 1393, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 0, 516, 467, 388, 341, 534, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 1391, 0,
	0, 0, 270, 197, 464, 581, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1389, 475, 0, 0, 0, 0, 0, 260, 393,
	410, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 262, 408, 390, 338, 317, 318, 261, 0, 375,
	295, 309, 292, 354, 0, 407, 435, 291, 426, 0,
	418, 264, 0, 417, 353, 404, 409, 339, 333, 263,
	406, 337, 332, 321, 299, 451, 322, 323, 313, 365,
	331, 366, 314, 343, 342, 344, 0, 0, 0, 0,
	0, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 578, 0,
	420, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	324, 0, 0, 0, 436, 0, 378, 359, 598, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 0,
	0, 0, 432, 325, 326, 0, 304, 252, 253, 595,
	290, 355, 544, 577, 469, 0, 531, 470, 479, 282,
	503, 515, 514, 351, 431, 0, 526, 529, 461, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	416, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	440, 519, 520, 345, 346, 347, 348, 308, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 476, 328, 0, 369, 302,
	540, 541, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 251, 246, 247, 248, 249,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 466, 576,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 1387, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 0, 516,
	467, 388, 341, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 1391, 0, 0, 0, 270,
	197, 464, 581, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1389, 475,
	0, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 0, 407, 435, 291, 426, 0, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 451, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 420, 0, 0,
	0, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 436, 0, 378, 359, 598, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 290, 355, 544,
	577, 469, 0, 531, 470, 479, 282, 503, 515, 514,
	351, 431, 0, 526, 529, 461, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 416, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 440, 519, 520,
	345, 346, 347, 348, 308, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 543, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 251, 246, 247, 248, 249, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 583, 0, 596, 466, 576, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3555, 0, 196,
	777, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 420, 0, 0, 0, 0, 0,
	0, 392, 0, 0, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	289, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 1391,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1389, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 357, 0, 480, 513, 502, 585, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 327, 517, 499, 509, 500, 485, 486, 487, 494,
	307, 488, 489, 490, 462, 491, 463, 492, 493, 0,
	516, 467, 388, 341, 534, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1391, 0, 0, 0,
	270, 197, 464, 581, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3219,
	475, 0, 0, 0, 0, 0, 260, 393, 410, 271,
	384, 423, 276, 391, 266, 356, 380, 0, 0, 262,
	408, 390, 338, 317, 318, 261, 0, 375, 295, 309,
	292, 354, 0, 407, 435, 291, 426, 0, 418, 264,
	0, 417, 353, 404, 409, 339, 333, 263, 406, 337,
	332, 321, 299, 451, 322, 323, 313, 365, 331, 366,
	314, 343, 342, 344, 0, 0, 0, 0, 0, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 578, 0, 420, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 324, 0,
	0, 0, 436, 0, 378, 359, 598, 0, 0, 376,
	329, 405, 367, 411, 394, 419, 372, 368, 255, 395,
	294, 340, 267, 269, 289, 296, 298, 300, 301, 349,
	350, 362, 383, 396, 397, 398, 293, 277, 377, 278,
	311, 279, 256, 285, 283, 286, 385, 287, 258, 363,
	402, 0, 306, 373, 336, 259, 335, 364, 401, 400,
	268, 427, 433, 434, 521, 0, 439, 599, 600, 601,
	448, 453, 454, 455, 457, 458, 459, 460, 522, 539,
	506, 477, 441, 530, 473, 478, 542, 0, 0, 0,
	432, 325, 326, 0, 304, 252, 253, 595, 290, 355,
	544, 577, 469, 0, 531, 470, 479, 282, 503, 515,
	514, 351, 431, 0, 526, 529, 461, 594, 0, 523,
	538, 597, 537, 591, 361, 0, 382, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 471, 0, 389,
	413, 425, 442, 445, 472, 557, 558, 559, 257, 444,
	561, 562, 563, 564, 565, 566, 567, 560, 416, 504,
	481, 507, 424, 484, 483, 0, 0, 518, 440, 519,
	520, 345, 346, 347, 348, 308, 545, 275, 443, 371,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 437,
	438, 303, 310, 456, 312, 274, 360, 305, 422, 319,
	0, 449, 512, 450, 571, 574, 572, 573, 352, 315,
	316, 386, 320, 330, 374, 421, 358, 379, 272, 412,
	387, 334, 498, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 399, 284, 250, 280, 281, 288, 592, 589, 403,
	593, 0, 254, 476, 328, 0, 369, 302, 540, 541,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 251, 246, 247, 248, 249, 0, 0,
	0, 428, 429, 430, 452, 414, 474, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 466, 576, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	2252, 0, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 0, 516, 467, 388,
	341, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 2254, 0, 0, 0, 270, 197, 464,
	581, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 0,
	407, 435, 291, 426, 0, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	451, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 420, 0, 0, 0, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 436,
	0, 378, 359, 598, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 290, 355, 544, 577, 469,
	0, 531, 470, 479, 282, 503, 515, 514, 351, 431,
	0, 526, 529, 461, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 416, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 440, 519, 520, 345, 346,
	347, 348, 308, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	543, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	251, 246, 247, 248, 249, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	583, 0, 596, 466, 576, 357, 0, 480, 513, 502,
	585, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 2273, 0, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 0, 516, 467, 388, 341, 534, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	1391, 0, 0, 0, 270, 197, 464, 581, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	260, 393, 410, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 0, 407, 435, 291,
	426, 0, 418, 264, 0, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 451, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	578, 0, 420, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 324, 0, 0, 0, 436, 0, 378, 359,
	598, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	372, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 599, 600, 601, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 595, 290, 355, 544, 577, 469, 0, 531, 470,
	479, 282, 503, 515, 514, 351, 431, 0, 526, 529,
	461, 594, 0, 523, 538, 597, 537, 591, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	567, 560, 416, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 440, 519, 520, 345, 346, 347, 348, 308,
	545, 275, 443, 371, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 352, 315, 316, 386, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 334, 498, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 592, 589, 403, 593, 0, 254, 476, 328, 0,
	369, 302, 540, 541, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 251, 246, 247,
	248, 249, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	466, 576, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	0, 516, 467, 388, 341, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 777, 0, 0, 0, 0,
	0, 270, 197, 464, 581, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 0, 407, 435, 291, 426, 0, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 451, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 420,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 436, 0, 378, 359, 598, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 290,
	355, 544, 577, 469, 0, 531, 470, 479, 282, 503,
	515, 514, 351, 431, 0, 526, 529, 461, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 416,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 440,
	519, 520, 345, 346, 347, 348, 308, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 0, 369, 302, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 543, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 251, 246, 247, 248, 249, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 583, 0, 596, 466, 576, 357,
	0, 480, 513, 502, 585, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 327,
	517, 499, 509, 500, 485, 486, 487, 494, 307, 488,
	489, 490, 462, 491, 463, 492, 493, 0, 516, 467,
	388, 341, 534, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3574, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 270, 197,
	464, 581, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 0, 260, 393, 410, 271, 384, 423,
	276, 391, 266, 356, 380, 0, 0, 262, 408, 390,
	338, 317, 318, 261, 0, 375, 295, 309, 292, 354,
	0, 407, 435, 291, 426, 0, 418, 264, 0, 417,
	353, 404, 409, 339, 333, 263, 406, 337, 332, 321,
	299, 451, 322, 323, 313, 365, 331, 366, 314, 343,
	342, 344, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 578, 0, 420, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 324, 0, 0, 0,
	436, 0, 378, 359, 598, 0, 0, 376, 329, 405,
	367, 411, 394, 419, 372, 368, 255, 395, 294, 340,
	267, 269, 289, 296, 298, 300, 301, 349, 350, 362,
	383, 396, 397, 398, 293, 277, 377, 278, 311, 279,
	256, 285, 283, 286, 385, 287, 258, 363, 402, 0,
	306, 373, 336, 259, 335, 364, 401, 400, 268, 427,
	433, 434, 521, 0, 439, 599, 600, 601, 448, 453,
	454, 455, 457, 458, 459, 460, 522, 539, 506, 477,
	441, 530, 473, 478, 542, 0, 0, 0, 432, 325,
	326, 0, 304, 252, 253, 595, 290, 355, 544, 577,
	469, 0, 531, 470, 479, 282, 503, 515, 514, 351,
	431, 0, 526, 529, 461, 594, 0, 523, 538, 597,
	537, 591, 361, 0, 382, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 471, 0, 389, 413, 425,
	442, 445, 472, 557, 558, 559, 257, 444, 561, 562,
	563, 564, 565, 566, 567, 560, 416, 504, 481, 507,
	424, 484, 483, 0, 0, 518, 440, 519, 520, 345,
	346, 347, 348, 308, 545, 275, 443, 371, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 437, 438, 303,
	310, 456, 312, 274, 360, 305, 422, 319, 0, 449,
	512, 450, 571, 574, 572, 573, 352, 315, 316, 386,
	320, 330, 374, 421, 358, 379, 272, 412, 387, 334,
	498, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 399,
	284, 250, 280, 281, 288, 592, 589, 403, 593, 0,
	254, 476, 328, 0, 369, 302, 540, 541, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 251, 246, 247, 248, 249, 0, 0, 0, 428,
	429, 430, 452, 414, 474, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 466, 576, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 0, 516, 467, 388, 341, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 3360, 0, 0, 0, 270, 197, 464, 581, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 0, 407, 435,
	291, 426, 0, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 451, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 420, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 436, 0, 378,
	359, 598, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 290, 355, 544, 577, 469, 0, 531,
	470, 479, 282, 503, 515, 514, 351, 431, 0, 526,
	529, 461, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 416, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 440, 519, 520, 345, 346, 347, 348,
	308, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 543, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 251, 246,
	247, 248, 249, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 583, 0,
	596, 466, 576, 357, 0, 480, 513, 502, 585, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 0, 516, 467, 388, 341, 534, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 270, 197, 464, 581, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 260, 393,
	410, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 262, 408, 390, 338, 317, 318, 261, 0, 375,
	295, 309, 292, 354, 0, 407, 435, 291, 426, 0,
	418, 264, 0, 417, 353, 404, 409, 339, 333, 263,
	406, 337, 332, 321, 299, 451, 322, 323, 313, 365,
	331, 366, 314, 343, 342, 344, 0, 0, 0, 0,
	0, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 578, 0,
	420, 0, 0, 0, 3485, 0, 0, 392, 0, 0,
	324, 0, 0, 0, 436, 0, 378, 359, 598, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 0,
	0, 0, 432, 325, 326, 0, 304, 252, 253, 595,
	290, 355, 544, 577, 469, 0, 531, 470, 479, 282,
	503, 515, 514, 351, 431, 0, 526, 529, 461, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	416, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	440, 519, 520, 345, 346, 347, 348, 308, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 476, 328, 0, 369, 302,
	540, 541, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 251, 246, 247, 248, 249,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 466, 576,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 0, 516,
	467, 388, 341, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3215,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 270,
	197, 464, 581, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 0, 407, 435, 291, 426, 0, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 451, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 420, 0, 0,
	0, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 436, 0, 378, 359, 598, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 290, 355, 544,
	577, 469, 0, 531, 470, 479, 282, 503, 515, 514,
	351, 431, 0, 526, 529, 461, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 416, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 440, 519, 520,
	345, 346, 347, 348, 308, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 543, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 251, 246, 247, 248, 249, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 583, 0, 596, 466, 576, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3375, 0, 196,
	0, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 420, 0, 0, 0, 0, 0,
	0, 392, 0, 0, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	289, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 3301, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 357, 0, 480, 513, 502, 585, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 327, 517, 499, 509, 500, 485, 486, 487, 494,
	307, 488, 489, 490, 462, 491, 463, 492, 493, 0,
	516, 467, 388, 341, 534, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 2866, 0, 0, 0,
	270, 197, 464, 581, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 260, 393, 410, 271,
	384, 423, 276, 391, 266, 356, 380, 0, 0, 262,
	408, 390, 338, 317, 318, 261, 0, 375, 295, 309,
	292, 354, 0, 407, 435, 291, 426, 0, 418, 264,
	0, 417, 353, 404, 409, 339, 333, 263, 406, 337,
	332, 321, 299, 451, 322, 323, 313, 365, 331, 366,
	314, 343, 342, 344, 0, 0, 0, 0, 0, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 578, 0, 420, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 324, 0,
	0, 0, 436, 0, 378, 359, 598, 0, 0, 376,
	329, 405, 367, 411, 394, 419, 372, 368, 255, 395,
	294, 340, 267, 269, 289, 296, 298, 300, 301, 349,
	350, 362, 383, 396, 397, 398, 293, 277, 377, 278,
	311, 279, 256, 285, 283, 286, 385, 287, 258, 363,
	402, 0, 306, 373, 336, 259, 335, 364, 401, 400,
	268, 427, 433, 434, 521, 0, 439, 599, 600, 601,
	448, 453, 454, 455, 457, 458, 459, 460, 522, 539,
	506, 477, 441, 530, 473, 478, 542, 0, 0, 0,
	432, 325, 326, 0, 304, 252, 253, 595, 290, 355,
	544, 577, 469, 0, 531, 470, 479, 282, 503, 515,
	514, 351, 431, 0, 526, 529, 461, 594, 0, 523,
	538, 597, 537, 591, 361, 0, 382, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 471, 0, 389,
	413, 425, 442, 445, 472, 557, 558, 559, 257, 444,
	561, 562, 563, 564, 565, 566, 567, 560, 416, 504,
	481, 507, 424, 484, 483, 0, 0, 518, 440, 519,
	520, 345, 346, 347, 348, 308, 545, 275, 443, 371,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 437,
	438, 303, 310, 456, 312, 274, 360, 305, 422, 319,
	0, 449, 512, 450, 571, 574, 572, 573, 352, 315,
	316, 386, 320, 330, 374, 421, 358, 379, 272, 412,
	387, 334, 498, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 399, 284, 250, 280, 281, 288, 592, 589, 403,
	593, 0, 254, 476, 328, 0, 369, 302, 540, 541,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 251, 246, 247, 248, 249, 0, 0,
	0, 428, 429, 430, 452, 414, 474, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 466, 576, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 0, 516, 467, 388,
	341, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 270, 197, 464,
	581, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2882, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 0,
	407, 435, 291, 426, 0, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	451, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 420, 0, 0, 0, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 436,
	0, 378, 359, 598, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 290, 355, 544, 577, 469,
	0, 531, 470, 479, 282, 503, 515, 514, 351, 431,
	0, 526, 529, 461, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 416, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 440, 519, 520, 345, 346,
	347, 348, 308, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	543, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	251, 246, 247, 248, 249, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	583, 0, 596, 466, 576, 357, 0, 480, 513, 502,
	585, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 0, 516, 467, 388, 341, 534, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1846, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 270, 197, 464, 581, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	260, 393, 410, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 0, 407, 435, 291,
	426, 0, 418, 264, 0, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 451, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 0,
	578, 0, 420, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 324, 0, 0, 0, 436, 0, 378, 359,
	598, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	372, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 599, 600, 601, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 595, 290, 355, 544, 577, 469, 0, 531, 470,
	479, 282, 503, 515, 514, 351, 431, 0, 526, 529,
	461, 594, 0, 523, 538, 597, 537, 591, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	567, 560, 416, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 440, 519, 520, 345, 346, 347, 348, 308,
	545, 275, 443, 371, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 352, 315, 316, 386, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 334, 498, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 592, 589, 403, 593, 0, 254, 476, 328, 0,
	369, 302, 540, 541, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 251, 246, 247,
	248, 249, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	466, 576, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	0, 516, 467, 388, 341, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 270, 197, 464, 581, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2979, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 0, 407, 435, 291, 426, 0, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 451, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 420,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 436, 0, 378, 359, 598, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 290,
	355, 544, 577, 469, 0, 531, 470, 479, 282, 503,
	515, 514, 351, 431, 0, 526, 529, 461, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 416,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 440,
	519, 520, 345, 346, 347, 348, 308, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 0,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 0, 369, 302, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 543, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 251, 246, 247, 248, 249, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 583, 0, 596, 466, 576, 357,
	0, 480, 513, 502, 585, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 297, 0, 0, 327,
	517, 499, 509, 500, 485, 486, 487, 494, 307, 488,
	489, 490, 462, 491, 463, 492, 493, 0, 516, 467,
	388, 341, 534, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 2835, 0, 0, 0, 270, 197,
	464, 581, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 0, 260, 393, 410, 271, 384, 423,
	276, 391, 266, 356, 380, 0, 0, 262, 408, 390,
	338, 317, 318, 261, 0, 375, 295, 309, 292, 354,
	0, 407, 435, 291, 426, 0, 418, 264, 0, 417,
	353, 404, 409, 339, 333, 263, 406, 337, 332, 321,
	299, 451, 322, 323, 313, 365, 331, 366, 314, 343,
	342, 344, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 578, 0, 420, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 324, 0, 0, 0,
	436, 0, 378, 359, 598, 0, 0, 376, 329, 405,
	367, 411, 394, 419, 372, 368, 255, 395, 294, 340,
	267, 269, 289, 296, 298, 300, 301, 349, 350, 362,
	383, 396, 397, 398, 293, 277, 377, 278, 311, 279,
	256, 285, 283, 286, 385, 287, 258, 363, 402, 0,
	306, 373, 336, 259, 335, 364, 401, 400, 268, 427,
	433, 434, 521, 0, 439, 599, 600, 601, 448, 453,
	454, 455, 457, 458, 459, 460, 522, 539, 506, 477,
	441, 530, 473, 478, 542, 0, 0, 0, 432, 325,
	326, 0, 304, 252, 253, 595, 290, 355, 544, 577,
	469, 0, 531, 470, 479, 282, 503, 515, 514, 351,
	431, 0, 526, 529, 461, 594, 0, 523, 538, 597,
	537, 591, 361, 0, 382, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 471, 0, 389, 413, 425,
	442, 445, 472, 557, 558, 559, 257, 444, 561, 562,
	563, 564, 565, 566, 567, 560, 416, 504, 481, 507,
	424, 484, 483, 0, 0, 518, 440, 519, 520, 345,
	346, 347, 348, 308, 545, 275, 443, 371, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 437, 438, 303,
	310, 456, 312, 274, 360, 305, 422, 319, 0, 449,
	512, 450, 571, 574, 572, 573, 352, 315, 316, 386,
	320, 330, 374, 421, 358, 379, 272, 412, 387, 334,
	498, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 399,
	284, 250, 280, 281, 288, 592, 589, 403, 593, 0,
	254, 476, 328, 0, 369, 302, 540, 541, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 251, 246, 247, 248, 249, 0, 0, 0, 428,
	429, 430, 452, 414, 474, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 466, 576, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 0, 516, 467, 388, 341, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 270, 197, 464, 581, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2749, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 0, 407, 435,
	291, 426, 0, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 451, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 420, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 436, 0, 378,
	359, 598, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 290, 355, 544, 577, 469, 0, 531,
	470, 479, 282, 503, 515, 514, 351, 431, 0, 526,
	529, 461, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 416, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 440, 519, 520, 345, 346, 347, 348,
	308, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 543, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 251, 246,
	247, 248, 249, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 583, 0,
	596, 466, 576, 357, 0, 480, 513, 502, 585, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 0, 516, 467, 388, 341, 534, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 1391, 0,
	0, 0, 270, 197, 464, 581, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 260, 393,
	410, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 262, 408, 390, 338, 317, 318, 261, 0, 375,
	295, 309, 292, 354, 0, 407, 435, 291, 426, 0,
	418, 264, 0, 417, 353, 404, 409, 339, 333, 263,
	406, 337, 332, 321, 299, 451, 322, 323, 313, 365,
	331, 366, 314, 343, 342, 344, 0, 0, 0, 0,
	0, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 578, 0,
	420, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	324, 0, 0, 0, 436, 0, 378, 359, 598, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 0,
	0, 0, 432, 325, 326, 0, 304, 252, 253, 595,
	290, 355, 544, 577, 469, 0, 531, 470, 479, 282,
	503, 515, 514, 351, 431, 0, 526, 529, 461, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	416, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	440, 519, 520, 345, 346, 347, 348, 308, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 476, 328, 0, 369, 302,
	540, 541, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 251, 246, 247, 248, 249,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 466, 576,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 0, 516,
	467, 388, 341, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 2254, 0, 0, 0, 270,
	197, 464, 581, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 260, 393, 410, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 0, 407, 435, 291, 426, 0, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 451, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 420, 0, 0,
	0, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 436, 0, 378, 359, 598, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 290, 355, 544,
	577, 469, 0, 531, 470, 479, 282, 503, 515, 514,
	351, 431, 0, 526, 529, 461, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 416, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 440, 519, 520,
	345, 346, 347, 348, 308, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 543, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 251, 246, 247, 248, 249, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 583, 0, 596, 466, 576, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 2578, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 420, 0, 0, 0, 0, 0,
	0, 392, 0, 0, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	289, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 357, 0, 480, 513, 502, 585, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 327, 517, 499, 509, 500, 485, 486, 487, 494,
	307, 488, 489, 490, 462, 491, 463, 492, 493, 0,
	516, 467, 388, 341, 534, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 0, 0, 0, 0,
	270, 197, 464, 581, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 260, 393, 410, 271,
	384, 423, 276, 391, 266, 356, 380, 0, 0, 262,
	408, 390, 338, 317, 318, 261, 0, 375, 295, 309,
	292, 354, 0, 407, 435, 291, 426, 0, 418, 264,
	0, 417, 353, 404, 409, 339, 333, 263, 406, 337,
	332, 321, 299, 451, 322, 323, 313, 365, 331, 366,
	314, 343, 342, 344, 0, 0, 0, 0, 0, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 578, 0, 420, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 324, 0,
	0, 0, 436, 0, 378, 359, 598, 0, 0, 376,
	329, 405, 367, 411, 394, 419, 372, 368, 255, 395,
	294, 340, 267, 269, 289, 296, 298, 300, 301, 349,
	350, 362, 383, 396, 397, 398, 293, 277, 377, 278,
	311, 279, 256, 285, 283, 286, 385, 287, 258, 363,
	402, 0, 306, 373, 336, 259, 335, 364, 401, 400,
	268, 427, 433, 434, 521, 0, 439, 599, 600, 601,
	448, 453, 454, 455, 457, 458, 459, 460, 522, 539,
	506, 477, 441, 530, 473, 478, 542, 0, 0, 0,
	432, 325, 326, 0, 304, 252, 253, 595, 290, 355,
	544, 577, 469, 0, 531, 470, 479, 282, 503, 515,
	514, 351, 431, 0, 526, 529, 461, 594, 0, 523,
	538, 597, 537, 591, 361, 0, 382, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 471, 0, 389,
	413, 425, 442, 445, 472, 557, 558, 559, 257, 444,
	561, 562, 563, 564, 565, 566, 567, 560, 416, 504,
	481, 507, 424, 484, 483, 0, 0, 518, 440, 519,
	520, 345, 346, 347, 348, 308, 545, 275, 443, 371,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 437,
	438, 303, 310, 456, 312, 274, 360, 305, 422, 319,
	0, 449, 512, 450, 571, 574, 572, 573, 352, 315,
	316, 386, 320, 330, 374, 421, 358, 379, 272, 412,
	387, 334, 498, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 399, 284, 250, 280, 281, 288, 592, 589, 403,
	593, 0, 254, 476, 328, 0, 369, 302, 540, 541,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 251, 246, 247, 248, 249, 0, 0,
	0, 428, 429, 430, 452, 414, 474, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 466, 576, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 0, 516, 467, 388,
	341, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 2329, 0, 0, 0, 270, 197, 464,
	581, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 0,
	407, 435, 291, 426, 0, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	451, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 420, 0, 0, 0, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 436,
	0, 378, 359, 598, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 290, 355, 544, 577, 469,
	0, 531, 470, 479, 282, 503, 515, 514, 351, 431,
	0, 526, 529, 461, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 416, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 440, 519, 520, 345, 346,
	347, 348, 308, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	543, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	251, 246, 247, 248, 249, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	583, 2118, 596, 466, 576, 0, 0, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 420, 0, 0, 0, 0, 0,
	0, 392, 0, 0, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	289, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 1833, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 372,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 567,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 357, 0, 480, 513, 502, 585, 468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 297, 0,
	0, 327, 517, 499, 509, 500, 485, 486, 487, 494,
	307, 488, 489, 490, 462, 491, 463, 492, 493, 0,
	516, 467, 388, 341, 534, 533, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 196, 0, 0, 1391, 0, 0, 0,
	270, 197, 464, 581, 465, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 273, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	475, 0, 0, 0, 0, 0, 260, 393, 410, 271,
	384, 423, 276, 391, 266, 356, 380, 0, 0, 262,
	408, 390, 338, 317, 318, 261, 0, 375, 295, 309,
	292, 354, 0, 407, 435, 291, 426, 0, 418, 264,
	0, 417, 353, 404, 409, 339, 333, 263, 406, 337,
	332, 321, 299, 451, 322, 323, 313, 365, 331, 366,
	314, 343, 342, 344, 0, 0, 0, 0, 0, 446,
	447, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 0, 578, 0, 420, 0,
	0, 0, 0, 0, 0, 392, 0, 0, 324, 0,
	0, 0, 436, 0, 378, 359, 598, 0, 0, 376,
	329, 405, 367, 411, 394, 419, 1739, 368, 255, 395,
	294, 340, 267, 269, 289, 296, 298, 300, 301, 349,
	350, 362, 383, 396, 397, 398, 293, 277, 377, 278,
	311, 279, 256, 285, 283, 286, 385, 287, 258, 363,
	402, 0, 306, 373, 336, 259, 335, 364, 401, 400,
	268, 427, 433, 434, 521, 0, 439, 599, 600, 601,
	448, 453, 454, 455, 457, 458, 459, 460, 522, 539,
	506, 477, 441, 530, 473, 478, 542, 0, 0, 0,
	432, 325, 326, 0, 304, 252, 253, 595, 290, 355,
	544, 577, 469, 0, 531, 470, 479, 282, 503, 515,
	514, 351, 431, 0, 526, 529, 461, 594, 0, 523,
	538, 597, 537, 591, 361, 0, 382, 535, 482, 0,
	527, 501, 0, 528, 497, 532, 0, 471, 0, 389,
	413, 425, 442, 445, 472, 557, 558, 559, 257, 444,
	561, 562, 563, 564, 565, 566, 567, 560, 416, 504,
	481, 507, 424, 484, 483, 0, 0, 518, 440, 519,
	520, 345, 346, 347, 348, 308, 545, 275, 443, 371,
	0, 505, 0, 0, 0, 0, 0, 0, 0, 0,
	510, 511, 508, 602, 0, 568, 569, 0, 0, 437,
	438, 303, 310, 456, 312, 274, 360, 305, 422, 319,
	0, 449, 512, 450, 571, 574, 572, 573, 352, 315,
	316, 386, 320, 330, 374, 421, 358, 379, 272, 412,
	387, 334, 498, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 245, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	553, 552, 551, 550, 549, 548, 547, 546, 0, 0,
	495, 399, 284, 250, 280, 281, 288, 592, 589, 403,
	593, 0, 254, 476, 328, 0, 369, 302, 540, 541,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 223, 224, 225, 226, 227,
	228, 229, 230, 543, 221, 222, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	0, 0, 0, 251, 246, 247, 248, 249, 0, 0,
	0, 428, 429, 430, 452, 414, 474, 590, 0, 0,
	0, 0, 0, 0, 0, 524, 536, 570, 0, 579,
	580, 582, 584, 583, 0, 596, 466, 576, 357, 0,
	480, 513, 502, 585, 468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 0, 327, 517,
	499, 509, 500, 485, 486, 487, 494, 307, 488, 489,
	490, 462, 491, 463, 492, 493, 0, 516, 467, 388,
	341, 534, 533, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	196, 0, 0, 0, 0, 0, 0, 270, 197, 464,
	581, 465, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 273, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 475, 0, 0,
	0, 0, 0, 260, 393, 410, 271, 384, 423, 276,
	391, 266, 356, 380, 0, 0, 262, 408, 390, 338,
	317, 318, 261, 0, 375, 295, 309, 292, 354, 0,
	407, 435, 291, 426, 0, 418, 264, 0, 417, 353,
	404, 409, 339, 333, 263, 406, 337, 332, 321, 299,
	451, 322, 323, 313, 365, 331, 366, 314, 343, 342,
	344, 0, 0, 0, 0, 0, 446, 447, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	575, 0, 0, 578, 0, 420, 0, 0, 1421, 0,
	0, 0, 392, 0, 0, 324, 0, 0, 0, 436,
	0, 378, 359, 598, 0, 0, 376, 329, 405, 367,
	411, 394, 419, 372, 368, 255, 395, 294, 340, 267,
	269, 289, 296, 298, 300, 301, 349, 350, 362, 383,
	396, 397, 398, 293, 277, 377, 278, 311, 279, 256,
	285, 283, 286, 385, 287, 258, 363, 402, 0, 306,
	373, 336, 259, 335, 364, 401, 400, 268, 427, 433,
	434, 521, 0, 439, 599, 600, 601, 448, 453, 454,
	455, 457, 458, 459, 460, 522, 539, 506, 477, 441,
	530, 473, 478, 542, 0, 0, 0, 432, 325, 326,
	0, 304, 252, 253, 595, 290, 355, 544, 577, 469,
	0, 531, 470, 479, 282, 503, 515, 514, 351, 431,
	0, 526, 529, 461, 594, 0, 523, 538, 597, 537,
	591, 361, 0, 382, 535, 482, 0, 527, 501, 0,
	528, 497, 532, 0, 471, 0, 389, 413, 425, 442,
	445, 472, 557, 558, 559, 257, 444, 561, 562, 563,
	564, 565, 566, 567, 560, 416, 504, 481, 507, 424,
	484, 483, 0, 0, 518, 440, 519, 520, 345, 346,
	347, 348, 308, 545, 275, 443, 371, 0, 505, 0,
	0, 0, 0, 0, 0, 0, 0, 510, 511, 508,
	602, 0, 568, 569, 0, 0, 437, 438, 303, 310,
	456, 312, 274, 360, 305, 422, 319, 0, 449, 512,
	450, 571, 574, 572, 573, 352, 315, 316, 386, 320,
	330, 374, 421, 358, 379, 272, 412, 387, 334, 498,
	525, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 245, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 553, 552, 551,
	550, 549, 548, 547, 546, 0, 0, 495, 399, 284,
	250, 280, 281, 288, 592, 589, 403, 593, 0, 254,
	476, 328, 0, 369, 302, 540, 541, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 223, 224, 225, 226, 227, 228, 229, 230,
	543, 221, 222, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 0, 0, 0,
	251, 246, 247, 248, 249, 0, 0, 0, 428, 429,
	430, 452, 414, 474, 590, 0, 0, 0, 0, 0,
	0, 0, 524, 536, 570, 0, 579, 580, 582, 584,
	583, 0, 596, 466, 576, 357, 0, 480, 513, 502,
	585, 468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 327, 517, 499, 509, 500,
	485, 486, 487, 494, 307, 488, 489, 490, 462, 491,
	463, 492, 493, 0, 516, 467, 388, 341, 534, 533,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 196, 0, 0,
	0, 0, 0, 0, 270, 197, 464, 581, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 273, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 475, 0, 0, 0, 0, 0,
	260, 393, 410, 271, 384, 423, 276, 391, 266, 356,
	380, 0, 0, 262, 408, 390, 338, 317, 318, 261,
	0, 375, 295, 309, 292, 354, 0, 407, 435, 291,
	426, 0, 418, 264, 0, 417, 353, 404, 409, 339,
	333, 263, 406, 337, 332, 321, 299, 451, 322, 323,
	313, 365, 331, 366, 314, 343, 342, 344, 0, 0,
	0, 0, 0, 446, 447, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 0, 617,
	578, 0, 420, 0, 0, 0, 0, 0, 0, 392,
	0, 0, 324, 0, 0, 0, 436, 0, 378, 359,
	598, 0, 0, 376, 329, 405, 367, 411, 394, 419,
	372, 368, 255, 395, 294, 340, 267, 269, 289, 296,
	298, 300, 301, 349, 350, 362, 383, 396, 397, 398,
	293, 277, 377, 278, 311, 279, 256, 285, 283, 286,
	385, 287, 258, 363, 402, 0, 306, 373, 336, 259,
	335, 364, 401, 400, 268, 427, 433, 434, 521, 0,
	439, 599, 600, 601, 448, 453, 454, 455, 457, 458,
	459, 460, 522, 539, 506, 477, 441, 530, 473, 478,
	542, 0, 0, 0, 432, 325, 326, 0, 304, 252,
	253, 595, 290, 355, 544, 577, 469, 0, 531, 470,
	479, 282, 503, 515, 514, 351, 431, 0, 526, 529,
	461, 594, 0, 523, 538, 597, 537, 591, 361, 0,
	382, 535, 482, 0, 527, 501, 0, 528, 497, 532,
	0, 471, 0, 389, 413, 425, 442, 445, 472, 557,
	558, 559, 257, 444, 561, 562, 563, 564, 565, 566,
	567, 560, 416, 504, 481, 507, 424, 484, 483, 0,
	0, 518, 440, 519, 520, 345, 346, 347, 348, 308,
	545, 275, 443, 371, 0, 505, 0, 0, 0, 0,
	0, 0, 0, 0, 510, 511, 508, 602, 0, 568,
	569, 0, 0, 437, 438, 303, 310, 456, 312, 274,
	360, 305, 422, 319, 0, 449, 512, 450, 571, 574,
	572, 573, 352, 315, 316, 386, 320, 330, 374, 421,
	358, 379, 272, 412, 387, 334, 498, 525, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 245,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 553, 552, 551, 550, 549, 548,
	547, 546, 0, 0, 495, 399, 284, 250, 280, 281,
	288, 592, 589, 403, 593, 0, 254, 476, 328, 0,
	369, 302, 540, 541, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 223,
	224, 225, 226, 227, 228, 229, 230, 543, 221, 222,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 244, 0, 0, 0, 251, 246, 247,
	248, 249, 0, 0, 0, 428, 429, 430, 452, 414,
	474, 590, 0, 0, 0, 0, 0, 0, 0, 524,
	536, 570, 0, 579, 580, 582, 584, 583, 0, 596,
	466, 576, 357, 0, 480, 513, 502, 585, 468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 297,
	0, 0, 327, 517, 499, 509, 500, 485, 486, 487,
	494, 307, 488, 489, 490, 462, 491, 463, 492, 493,
	0, 516, 467, 388, 341, 534, 533, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 196, 0, 0, 0, 0, 0,
	0, 270, 197, 464, 581, 465, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 273, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 260, 393, 410,
	271, 384, 423, 276, 391, 266, 356, 380, 0, 0,
	262, 408, 390, 338, 317, 318, 261, 0, 375, 295,
	309, 292, 354, 0, 407, 435, 291, 426, 0, 418,
	264, 0, 417, 353, 404, 409, 339, 333, 263, 406,
	337, 332, 321, 299, 451, 322, 323, 313, 365, 331,
	366, 314, 343, 342, 344, 0, 0, 0, 0, 0,
	446, 447, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 578, 0, 420,
	0, 0, 0, 0, 0, 0, 392, 0, 0, 324,
	0, 0, 0, 436, 0, 378, 359, 598, 0, 0,
	376, 329, 405, 367, 411, 394, 419, 372, 368, 255,
	395, 294, 340, 267, 269, 289, 296, 298, 300, 301,
	349, 350, 362, 383, 396, 397, 398, 293, 277, 377,
	278, 311, 279, 256, 285, 283, 286, 385, 287, 258,
	363, 402, 0, 306, 373, 336, 259, 335, 364, 401,
	400, 268, 427, 433, 434, 521, 0, 439, 599, 600,
	601, 448, 453, 454, 455, 457, 458, 459, 460, 522,
	539, 506, 477, 441, 530, 473, 478, 542, 0, 0,
	0, 432, 325, 326, 0, 304, 252, 253, 595, 290,
	355, 544, 577, 469, 0, 531, 470, 479, 282, 503,
	515, 514, 351, 431, 0, 526, 529, 461, 594, 0,
	523, 538, 597, 537, 591, 361, 0, 382, 535, 482,
	0, 527, 501, 0, 528, 497, 532, 0, 471, 0,
	389, 413, 425, 442, 445, 472, 557, 558, 559, 257,
	444, 561, 562, 563, 564, 565, 566, 567, 560, 416,
	504, 481, 507, 424, 484, 483, 0, 0, 518, 440,
	519, 520, 345, 346, 347, 348, 308, 545, 275, 443,
	371, 0, 505, 0, 0, 0, 0, 0, 0, 0,
	0, 510, 511, 508, 602, 0, 568, 569, 0, 0,
	437, 438, 303, 310, 456, 312, 274, 360, 305, 422,
	319, 0, 449, 512, 450, 571, 574, 572, 573, 352,
	315, 316, 386, 320, 330, 374, 421, 358, 379, 272,
	412, 387, 334, 498, 525, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 245, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 553, 552, 551, 550, 549, 548, 547, 546, 887,
	0, 495, 399, 284, 250, 280, 281, 288, 592, 589,
	403, 593, 0, 254, 476, 328, 0, 369, 302, 540,
	541, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 223, 224, 225, 226,
	227, 228, 229, 230, 543, 221, 222, 231, 232, 233,
	234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
	244, 0, 0, 0, 251, 246, 247, 248, 249, 0,
	0, 0, 428, 429, 430, 452, 414, 474, 590, 0,
	0, 0, 0, 0, 0, 0, 524, 536, 570, 0,
	579, 580, 582, 584, 583, 0, 596, 466, 576, 357,
	0, 480, 513, 502, 585, 468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 607, 297, 0, 0, 327,
	517, 499, 509, 500, 485, 486, 487, 494, 307, 488,
	489, 490, 462, 491, 463, 492, 493, 0, 516, 467,
	388, 341, 534, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 196, 0, 0, 0, 0, 0, 0, 270, 197,
	464, 581, 465, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 475, 0,
	0, 0, 0, 0, 260, 393, 410, 271, 384, 423,
	276, 391, 266, 356, 380, 0, 0, 262, 408, 390,
	338, 317, 318, 261, 0, 375, 295, 309, 292, 354,
	0, 407, 435, 291, 426, 0, 418, 264, 0, 417,
	353, 404, 409, 339, 333, 263, 406, 337, 332, 321,
	299, 451, 322, 323, 313, 365, 331, 366, 314, 343,
	342, 344, 0, 0, 0, 0, 0, 446, 447, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 575, 0, 0, 578, 0, 420, 0, 0, 0,
	0, 0, 0, 392, 0, 0, 324, 0, 0, 0,
	436, 0, 378, 359, 598, 0, 0, 376, 329, 405,
	367, 411, 394, 419, 372, 368, 255, 395, 294, 340,
	267, 269, 289, 296, 298, 300, 301, 349, 350, 362,
	383, 396, 397, 398, 293, 277, 377, 278, 311, 279,
	256, 285, 283, 286, 385, 287, 258, 363, 402, 0,
	306, 373, 336, 259, 335, 364, 401, 400, 268, 427,
	433, 434, 521, 0, 439, 599, 600, 601, 448, 453,
	454, 455, 457, 458, 459, 460, 522, 539, 506, 477,
	441, 530, 473, 478, 542, 0, 0, 0, 432, 325,
	326, 0, 304, 252, 253, 595, 290, 355, 544, 577,
	469, 0, 531, 470, 479, 282, 503, 515, 514, 351,
	431, 0, 526, 529, 461, 594, 0, 523, 538, 597,
	537, 591, 361, 0, 382, 535, 482, 0, 527, 501,
	0, 528, 497, 532, 0, 471, 0, 389, 413, 425,
	442, 445, 472, 557, 558, 559, 257, 444, 561, 562,
	563, 564, 565, 566, 567, 560, 416, 504, 481, 507,
	424, 484, 483, 0, 0, 518, 440, 519, 520, 345,
	346, 347, 348, 308, 545, 275, 443, 371, 0, 505,
	0, 0, 0, 0, 0, 0, 0, 0, 510, 511,
	508, 602, 0, 568, 569, 0, 0, 437, 438, 303,
	310, 456, 312, 274, 360, 305, 422, 319, 0, 449,
	512, 450, 571, 574, 572, 573, 352, 315, 316, 386,
	320, 330, 374, 421, 358, 379, 272, 412, 387, 334,
	498, 525, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 245, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 552,
	551, 550, 549, 548, 547, 546, 0, 0, 495, 399,
	284, 250, 280, 281, 288, 592, 589, 403, 593, 0,
	254, 476, 328, 0, 369, 302, 540, 541, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 223, 224, 225, 226, 227, 228, 229,
	230, 543, 221, 222, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 244, 0, 0,
	0, 251, 246, 247, 248, 249, 0, 0, 0, 428,
	429, 430, 452, 414, 474, 590, 0, 0, 0, 0,
	0, 0, 0, 524, 536, 570, 0, 579, 580, 582,
	584, 583, 0, 596, 466, 576, 357, 0, 480, 513,
	502, 585, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 327, 517, 499, 509,
	500, 485, 486, 487, 494, 307, 488, 489, 490, 462,
	491, 463, 492, 493, 0, 516, 467, 388, 341, 534,
	533, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 0, 0, 0, 0, 270, 197, 464, 581, 465,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 273,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 475, 0, 0, 0, 0,
	0, 260, 393, 410, 271, 384, 423, 276, 391, 266,
	356, 380, 0, 0, 262, 408, 390, 338, 317, 318,
	261, 0, 375, 295, 309, 292, 354, 0, 407, 435,
	291, 426, 0, 418, 264, 0, 417, 353, 404, 409,
	339, 333, 263, 406, 337, 332, 321, 299, 451, 322,
	323, 313, 365, 331, 366, 314, 343, 342, 344, 0,
	0, 0, 0, 0, 446, 447, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 575, 0,
	0, 578, 0, 420, 0, 0, 0, 0, 0, 0,
	392, 0, 0, 324, 0, 0, 0, 436, 0, 378,
	359, 598, 0, 0, 376, 329, 405, 367, 411, 394,
	419, 372, 368, 255, 395, 294, 340, 267, 269, 289,
	296, 298, 300, 301, 349, 350, 362, 383, 396, 397,
	398, 293, 277, 377, 278, 311, 279, 256, 285, 283,
	286, 385, 287, 258, 363, 402, 0, 306, 373, 336,
	259, 335, 364, 401, 400, 268, 427, 433, 434, 521,
	0, 439, 599, 600, 601, 448, 453, 454, 455, 457,
	458, 459, 460, 522, 539, 506, 477, 441, 530, 473,
	478, 542, 0, 0, 0, 432, 325, 326, 0, 304,
	252, 253, 595, 290, 355, 544, 577, 469, 0, 531,
	470, 479, 282, 503, 515, 514, 351, 431, 0, 526,
	529, 461, 594, 0, 523, 538, 597, 537, 591, 361,
	0, 382, 535, 482, 0, 527, 501, 0, 528, 497,
	532, 0, 471, 0, 389, 413, 425, 442, 445, 472,
	557, 558, 559, 257, 444, 561, 562, 563, 564, 565,
	566, 567, 560, 416, 504, 481, 507, 424, 484, 483,
	0, 0, 518, 440, 519, 520, 345, 346, 347, 348,
	308, 545, 275, 443, 371, 0, 505, 0, 0, 0,
	0, 0, 0, 0, 0, 510, 511, 508, 602, 0,
	568, 569, 0, 0, 437, 438, 303, 310, 456, 312,
	274, 360, 305, 422, 319, 0, 449, 512, 450, 571,
	574, 572, 573, 352, 315, 316, 386, 320, 330, 374,
	421, 358, 379, 272, 412, 387, 334, 498, 525, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	245, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 552, 551, 550, 549,
	548, 547, 546, 0, 0, 495, 399, 284, 250, 280,
	281, 288, 592, 589, 403, 593, 0, 254, 476, 328,
	0, 369, 302, 540, 541, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	223, 224, 225, 226, 227, 228, 229, 230, 543, 221,
	222, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	240, 241, 242, 243, 244, 0, 0, 0, 251, 246,
	247, 248, 249, 0, 0, 0, 428, 429, 430, 452,
	414, 474, 590, 0, 0, 0, 0, 0, 0, 0,
	524, 536, 570, 0, 579, 580, 582, 584, 583, 0,
	596, 466, 576, 357, 0, 480, 513, 502, 585, 468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	297, 0, 0, 327, 517, 499, 509, 500, 485, 486,
	487, 494, 307, 488, 489, 490, 462, 491, 463, 492,
	493, 0, 516, 467, 388, 341, 534, 533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	0, 0, 270, 197, 464, 581, 465, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 273, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 260, 393,
	1371, 271, 384, 423, 276, 391, 266, 356, 380, 0,
	0, 262, 408, 390, 338, 317, 318, 261, 0, 375,
	295, 309, 292, 354, 0, 407, 435, 291, 426, 0,
	418, 264, 0, 417, 353, 404, 409, 339, 333, 263,
	406, 337, 332, 321, 299, 451, 322, 323, 313, 365,
	331, 366, 314, 343, 342, 344, 0, 0, 0, 0,
	0, 446, 447, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 575, 0, 0, 578, 0,
	420, 0, 0, 0, 0, 0, 0, 392, 0, 0,
	324, 0, 0, 0, 436, 0, 378, 359, 598, 0,
	0, 376, 329, 405, 367, 411, 394, 419, 372, 368,
	255, 395, 294, 340, 267, 269, 289, 296, 298, 300,
	301, 349, 350, 362, 383, 396, 397, 398, 293, 277,
	377, 278, 311, 279, 256, 285, 283, 286, 385, 287,
	258, 363, 402, 0, 306, 373, 336, 259, 335, 364,
	401, 400, 268, 427, 433, 434, 521, 0, 439, 599,
	600, 601, 448, 453, 454, 455, 457, 458, 459, 460,
	522, 539, 506, 477, 441, 530, 473, 478, 542, 0,
	0, 0, 432, 325, 326, 0, 304, 252, 253, 595,
	290, 355, 544, 577, 469, 0, 531, 470, 479, 282,
	503, 515, 514, 351, 431, 0, 526, 529, 461, 594,
	0, 523, 538, 597, 537, 591, 361, 0, 382, 535,
	482, 0, 527, 501, 0, 528, 497, 532, 0, 471,
	0, 389, 413, 425, 442, 445, 472, 557, 558, 559,
	257, 444, 561, 562, 563, 564, 565, 566, 567, 560,
	416, 504, 481, 507, 424, 484, 483, 0, 0, 518,
	440, 519, 520, 345, 346, 347, 348, 308, 545, 275,
	443, 371, 0, 505, 0, 0, 0, 0, 0, 0,
	0, 0, 510, 511, 508, 602, 0, 568, 569, 0,
	0, 437, 438, 303, 310, 456, 312, 274, 360, 305,
	422, 319, 0, 449, 512, 450, 571, 574, 572, 573,
	352, 315, 316, 386, 320, 330, 374, 421, 358, 379,
	272, 412, 387, 334, 498, 525, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 245, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 552, 551, 550, 549, 548, 547, 546,
	0, 0, 495, 399, 284, 250, 280, 281, 288, 592,
	589, 403, 593, 0, 254, 476, 328, 0, 369, 302,
	540, 541, 206, 207, 208, 209, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 223, 224, 225,
	226, 227, 228, 229, 230, 543, 221, 222, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 244, 0, 0, 0, 251, 246, 247, 248, 249,
	0, 0, 0, 428, 429, 430, 452, 414, 474, 590,
	0, 0, 0, 0, 0, 0, 0, 524, 536, 570,
	0, 579, 580, 582, 584, 583, 0, 596, 466, 576,
	357, 0, 480, 513, 502, 585, 468, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 297, 0, 0,
	327, 517, 499, 509, 500, 485, 486, 487, 494, 307,
	488, 489, 490, 462, 491, 463, 492, 493, 0, 516,
	467, 388, 341, 534, 533, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 196, 0, 0, 0, 0, 0, 0, 270,
	197, 464, 581, 465, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 273, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 260, 393, 1369, 271, 384,
	423, 276, 391, 266, 356, 380, 0, 0, 262, 408,
	390, 338, 317, 318, 261, 0, 375, 295, 309, 292,
	354, 0, 407, 435, 291, 426, 0, 418, 264, 0,
	417, 353, 404, 409, 339, 333, 263, 406, 337, 332,
	321, 299, 451, 322, 323, 313, 365, 331, 366, 314,
	343, 342, 344, 0, 0, 0, 0, 0, 446, 447,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 575, 0, 0, 578, 0, 420, 0, 0,
	0, 0, 0, 0, 392, 0, 0, 324, 0, 0,
	0, 436, 0, 378, 359, 598, 0, 0, 376, 329,
	405, 367, 411, 394, 419, 372, 368, 255, 395, 294,
	340, 267, 269, 289, 296, 298, 300, 301, 349, 350,
	362, 383, 396, 397, 398, 293, 277, 377, 278, 311,
	279, 256, 285, 283, 286, 385, 287, 258, 363, 402,
	0, 306, 373, 336, 259, 335, 364, 401, 400, 268,
	427, 433, 434, 521, 0, 439, 599, 600, 601, 448,
	453, 454, 455, 457, 458, 459, 460, 522, 539, 506,
	477, 441, 530, 473, 478, 542, 0, 0, 0, 432,
	325, 326, 0, 304, 252, 253, 595, 290, 355, 544,
	577, 469, 0, 531, 470, 479, 282, 503, 515, 514,
	351, 431, 0, 526, 529, 461, 594, 0, 523, 538,
	597, 537, 591, 361, 0, 382, 535, 482, 0, 527,
	501, 0, 528, 497, 532, 0, 471, 0, 389, 413,
	425, 442, 445, 472, 557, 558, 559, 257, 444, 561,
	562, 563, 564, 565, 566, 567, 560, 416, 504, 481,
	507, 424, 484, 483, 0, 0, 518, 440, 519, 520,
	345, 346, 347, 348, 308, 545, 275, 443, 371, 0,
	505, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	511, 508, 602, 0, 568, 569, 0, 0, 437, 438,
	303, 310, 456, 312, 274, 360, 305, 422, 319, 0,
	449, 512, 450, 571, 574, 572, 573, 352, 315, 316,
	386, 320, 330, 374, 421, 358, 379, 272, 412, 387,
	334, 498, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 551, 550, 549, 548, 547, 546, 0, 0, 495,
	399, 284, 250, 280, 281, 288, 592, 589, 403, 593,
	0, 254, 476, 328, 0, 369, 302, 540, 541, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 223, 224, 225, 226, 227, 228,
	229, 230, 543, 221, 222, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 244, 0,
	0, 0, 251, 246, 247, 248, 249, 0, 0, 0,
	428, 429, 430, 452, 414, 474, 590, 0, 0, 0,
	0, 0, 0, 0, 524, 536, 570, 0, 579, 580,
	582, 584, 583, 0, 596, 466, 576, 357, 0, 480,
	513, 502, 585, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 297, 0, 0, 327, 517, 499,
	509, 500, 485, 486, 487, 494, 307, 488, 489, 490,
	462, 491, 463, 492, 493, 0, 516, 467, 388, 341,
	534, 533, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 196,
	0, 0, 0, 0, 0, 0, 270, 197, 464, 581,
	465, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	273, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 475, 0, 0, 0,
	0, 0, 260, 393, 410, 271, 384, 423, 276, 391,
	266, 356, 380, 0, 0, 262, 408, 390, 338, 317,
	318, 261, 0, 375, 295, 309, 292, 354, 0, 407,
	435, 291, 426, 0, 418, 264, 0, 417, 353, 404,
	409, 339, 333, 263, 406, 337, 332, 321, 299, 451,
	322, 323, 313, 365, 331, 366, 314, 343, 342, 344,
	0, 0, 0, 0, 0, 446, 447, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 0, 578, 0, 420, 0, 0, 0, 0, 0,
	0, 392, 0, 0, 324, 0, 0, 0, 436, 0,
	378, 359, 598, 0, 0, 376, 329, 405, 367, 411,
	394, 419, 372, 368, 255, 395, 294, 340, 267, 269,
	681, 296, 298, 300, 301, 349, 350, 362, 383, 396,
	397, 398, 293, 277, 377, 278, 311, 279, 256, 285,
	283, 286, 385, 287, 258, 363, 402, 0, 306, 373,
	336, 259, 335, 364, 401, 400, 268, 427, 433, 434,
	521, 0, 439, 599, 600, 601, 448, 453, 454, 455,
	457, 458, 459, 460, 522, 539, 506, 477, 441, 530,
	473, 478, 542, 0, 0, 0, 432, 325, 326, 0,
	304, 252, 253, 595, 290, 355, 544, 577, 469, 0,
	531, 470, 479, 282, 503, 515, 514, 351, 431, 0,
	526, 529, 461, 594, 0, 523, 538, 597, 537, 591,
	361, 0, 382, 535, 482, 0, 527, 501, 0, 528,
	497, 532, 0, 471, 0, 389, 413, 425, 442, 445,
	472, 557, 558, 559, 257, 444, 561, 562, 563, 564,
	565, 566, 567, 560, 416, 504, 481, 507, 424, 484,
	483, 0, 0, 518, 440, 519, 520, 345, 346, 347,
	348, 308, 545, 275, 443, 371, 0, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 510, 511, 508, 602,
	0, 568, 569, 0, 0, 437, 438, 303, 310, 456,
	312, 274, 360, 305, 422, 319, 0, 449, 512, 450,
	571, 574, 572, 573, 352, 315, 316, 386, 320, 330,
	374, 421, 358, 379, 272, 412, 387, 334, 498, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 553, 552, 551, 550,
	549, 548, 547, 546, 0, 0, 495, 399, 284, 250,
	280, 281, 288, 592, 589, 403, 593, 0, 254, 476,
	328, 0, 369, 302, 540, 541, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 223, 224, 225, 226, 227, 228, 229, 230, 543,
	221, 222, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 0, 0, 0, 251,
	246, 247, 248, 249, 0, 0, 0, 428, 429, 430,
	452, 414, 474, 590, 0, 0, 0, 0, 0, 0,
	0, 524, 536, 570, 0, 579, 580, 582, 584, 583,
	0, 596, 466, 576, 357, 0, 480, 513, 502, 585,
	468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 0, 327, 517, 499, 509, 500, 485,
	486, 487, 494, 307, 488, 489, 490, 462, 491, 463,
	492, 493, 0, 516, 467, 388, 341, 534, 533, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 0, 270, 197, 464, 581, 465, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 273, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 0, 260,
	393, 410, 271, 384, 423, 276, 391, 266, 356, 380,
	0, 0, 262, 408, 390, 338, 317, 318, 261, 0,
	375, 295, 309, 292, 354, 0, 407, 435, 291, 426,
	0, 418, 264, 0, 417, 353, 404, 409, 339, 333,
	263, 406, 337, 332, 321, 299, 451, 322, 323, 313,
	365, 331, 366, 314, 343, 342, 344, 0, 0, 0,
	0, 0, 446, 447, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 575, 0, 0, 578,
	0, 420, 0, 0, 0, 0, 0, 0, 392, 0,
	0, 324, 0, 0, 0, 436, 0, 378, 359, 598,
	0, 0, 376, 329, 405, 367, 411, 394, 419, 640,
	368, 255, 395, 294, 340, 267, 269, 289, 296, 298,
	300, 301, 349, 350, 362, 383, 396, 397, 398, 293,
	277, 377, 278, 311, 279, 256, 285, 283, 286, 385,
	287, 258, 363, 402, 0, 306, 373, 336, 259, 335,
	364, 401, 400, 268, 427, 433, 434, 521, 0, 439,
	599, 600, 601, 448, 453, 454, 455, 457, 458, 459,
	460, 522, 539, 506, 477, 441, 530, 473, 478, 542,
	0, 0, 0, 432, 325, 326, 0, 304, 252, 253,
	595, 290, 355, 544, 577, 469, 0, 531, 470, 479,
	282, 503, 515, 514, 351, 431, 0, 526, 529, 461,
	594, 0, 523, 538, 597, 537, 591, 361, 0, 382,
	535, 482, 0, 527, 501, 0, 528, 497, 532, 0,
	471, 0, 389, 413, 425, 442, 445, 472, 557, 558,
	559, 257, 444, 561, 562, 563, 564, 565, 566, 641,
	560, 416, 504, 481, 507, 424, 484, 483, 0, 0,
	518, 440, 519, 520, 345, 346, 347, 348, 308, 545,
	275, 443, 371, 0, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 510, 511, 508, 602, 0, 568, 569,
	0, 0, 437, 438, 303, 310, 456, 312, 274, 360,
	305, 422, 319, 0, 449, 512, 450, 571, 574, 572,
	573, 352, 315, 316, 386, 320, 330, 374, 421, 358,
	379, 272, 412, 387, 334, 498, 525, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 245, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 553, 552, 551, 550, 549, 548, 547,
	546, 0, 0, 495, 399, 284, 250, 280, 281, 288,
	592, 589, 403, 593, 0, 254, 476, 328, 0, 369,
	302, 540, 541, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 223, 224,
	225, 226, 227, 228, 229, 230, 543, 221, 222, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 0, 0, 0, 251, 246, 247, 248,
	249, 0, 0, 0, 428, 429, 430, 452, 414, 474,
	590, 0, 0, 0, 0, 0, 0, 0, 524, 536,
	570, 0, 579, 580, 582, 584, 583, 0, 596, 466,
	576, 660, 659, 666, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 663, 664, 0, 665, 669, 0, 0,
	651, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	674, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 678, 0, 0, 680, 0, 0, 0,
	0, 679, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 652, 654, 653,
	0, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	0, 0, 0, 0, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 655, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 657, 661, 667, 0, 668, 670, 0, 0, 671,
	672, 673, 0, 0, 675, 676,
}

var yyPact = [...]int{
	306, -1000, -1000, -1000, -333, 13782, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41853,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41853,
	-329, 41256, 41256, -1000, -1000, 2412, -1000, 40062, 14986, 41853,
	387, 386, 41853, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 777, -1000, 44241, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 720, 4800, 43644, 10767, -252, -1000, 1447, -82, 2286,
	910, 936, 1153, 1153, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 3786, 850, 40659,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 3297, 369, 850, 19762, 39, 37, 1447, 364, -136,
	-134, -139, 395, -1000, 1161, 438, 164, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10767, 10767,
	13782, -357, 13782, 10767, 41853, 41853, -1000, -1000, -1000, -1000,
	-329, 40062, 720, 4800, 10767, 2286, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -134, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-136, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -139, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 37, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 4303, -1000, 1491, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2786, 1490, 2285, 626, 41853, -1000, 1476,
	626, -1000, -1000, -1000, 1447, 3169, -1000, 41853, 41853, 118,
	1681, -1000, 390, 470, 340, 1471, -1000, -1000, -1000, -1000,
	-1000, -1000, 513, 3121, -1000, 41853, 41853, 2830, 41853, -1000,
	2055, 555, 44848, 2980, 1211, 821, 2835, -1000, -1000, 2779,
	-1000, 252, 256, 175, 577, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 237, -1000, 3039, -1000, -1000, 235, -1000, -1000,
	212, -1000, -1000, -1000, 36, -1000, -1000, -1000, -1000, -1000,
	-1000, -67, -1000, -1000, 971, 1964, 10767, 1733, -1000, 2680,
	-1000, -1000, -1000, -1000, 6549, 12573, 12573, 12573, 12573, -1000,
	-1000, 2598, 10767, 2773, 2770, 2769, -1000, -1000, -1000, -1000,
	-1000, -1000, 1468, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1792, -1000, -1000, -1000, 13175, -1000, 2768, 2765,
	2757, 2754, 2753, 2752, 2746, 2727, 2726, 2724, 2719, 2718,
	2716, 2714, 2487, 14379, 2712, 2283, 2278, 2710, 2706, 2704,
	2258, 2487, 2487, 2703, 2702, 2701, 2699, 2697, 2696, 2687,
	2686, 2682, 2681, 2676, 2673, 2672, 2667, 2666, 2658, 2657,
	2656, 2646, 2645, 2643, 2639, 2636, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1122,
	-1000, 2631, 3137, 2482, -1000, 3026, 3024, 3021, 3014, -300,
	2630, 1995, -1000, -1000, 68, -1000, -116, -1000, -1000, 923,
	-1000, 873, -1000, 41853, 41853, 147, 853, 709, 709, 709,
	709, 709, 758, 709, 3052, 774, 772, 769, 766, 709,
	-97, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1680, 1667,
	2886, 860, -1000, -1000, -1000, -1000, 1321, 41853, -1000, 2550,
	1541, 1541, 3048, 568, 559, 549, 1541, 434, -1000, 1653,
	1653, 1653, 1653, 1541, 417, 573, 3058, 3058, 47, 1653,
	8, 1541, 1541, 8, 1541, 1541, 1650, 171, -308, -1000,
	-1000, -1000, -1000, 1653, 1653, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 3034, 3033, 720, 720, 41853, 156, 41853, 720,
	720, 720, 735, -19, 43047, 42450, 2055, 548, 531, 1330,
	1665, -1000, 1599, 41853, 41853, 1599, 1599, 22747, 22150, -1000,
	41853, -1000, 3137, 2482, 2484, 1563, 2477, 2482, -147, -150,
	-151, 720, 720, 720, 720, 720, 191, 720, 720, 720,
	720, 720, 41853, 41853, 39465, 720, 720, 8957, 8957, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13782, 1888,
	1846, 161, -56, -325, 219, -1000, -1000, 41853, 2946, 198,
	-1000, -1000, -1000, 2497, -1000, 2536, 2536, 2536, 2536, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2536, 2536,
	2549, 2618, -1000, -1000, 2535, 2535, 2535, 2497, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2537, 2537, 2546, 2546, 2537, 41853, 10767,
	41853, 2956, 348, 2612, -1000, 41853, 332, 3137, 2955, 3058,
	3096, -1000, -1000, 1467, 1994, 2257, -1000, -1000, 390, 1536,
	-1000, 1002, -1000, -1000, -1000, -1000, 41853, -67, 336, -1000,
	-1000, 2223, 2610, -1000, 534, 1133, 1405, -1000, 254, 5086,
	34090, 2055, 34090, 41853, -1000, -1000, -1000, -1000, -1000, -1000,
	31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 231, -1000, 10767, 10767, 10767, 10767,
	10767, -1000, 606, 11971, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 12573, 12573, 12573, 12573, 12573, 12573, 12573, 12573, 12573,
	12573, 12573, 12573, 2595, 1637, 12573, 12573, 12573, 12573, 1563,
	2826, 1327, 253, -1000, -1000, -1000, -1000, -1000, 1694, 1964,
	10767, 10767, 10767, 41853, -1000, -1000, 3344, 10767, 10767, 3926,
	10767, 3012, 10767, 10767, 10767, 2457, 5340, 41853, 10767, -1000,
	2456, 2455, -1000, -1000, 1850, 10767, -1000, -1000, 10767, -1000,
	-1000, 10767, 12573, 10767, -1000, -1000, -1000, 1303, 3012, 3012,
	3012, 1668, 10767, 10767, 3012, 3012, 3012, 1663, 3012, 3012,
	3012, 3012, 3012, 3012, 3012, 3012, 2454, 2450, 2446, 10165,
	3058, -252, -1000, 8355, 2955, 3058, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -303, 2609, 41853, 2256,
	2254, -345, -29, 900, 876, 879, -1000, 3001, -1000, 2608,
	41853, 709, 709, 709, -1000, 41853, 1737, 34090, 41853, 41853,
	2055, 41853, 41853, 41853, 709, 709, 709, 709, 41853, -1000,
	2925, 34090, 2890, 735, -1000, 41853, 1321, 3000, 41853, 3111,
	12573, 12573, -1000, 38868, 1653, 1541, 1541, -1000, -1000, 41853,
	-1000, -1000, -1000, 1653, 41853, 1653, 1653, 3111, 1653, -1000,
	-1000, -1000, 1541, 1541, -1000, -1000, 10767, -1000, -1000, 1653,
	1653, -1000, -1000, 3111, 41853, 28, 3111, 3111, 2, -1000,
	-1000, -1000, 1541, 41853, 41853, 709, 41853, -1000, 41853, 41853,
	-1000, -1000, 41853, 41853, 3647, 41853, 38271, 3031, -1000, 34090,
	41853, 41853, 31702, -1000, 1232, -1000, -39, -1000, -46, -19,
	1599, -19, 1599, -1000, 530, 528, 20956, 473, 34090, 5942,
	-1000, -1000, 1599, 1599, 5942, 5942, 1507, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1311, -1000, 197, 3058, -1000, -1000,
	-1000, -1000, -1000, 1991, 1990, 1972, 41853, 41853, 34090, 2055,
	41853, 720, 41853, 41853, 41853, 41853, 41853, -1000, 2607, 1449,
	-1000, 2979, 41853, 41853, 1364, -1000, -1000, 17971, 1445, 1364,
	-1000, 1710, -1000, 10767, 13782, -284, 10767, 13782, 13782, 10767,
	13782, -1000, 10767, 188, -1000, -1000, -1000, -1000, 1970, -1000,
	1968, -1000, -1000, -1000, -1000, -1000, 2241, 2241, -1000, 1966,
	-1000, -1000, -1000, -1000, 1965, -1000, -1000, 1953, -1000, -1000,
	-1000, 2445, 971, -1000, 2236, 2833, -253, -1000, 19165, 41853,
	41853, -1000, -1000, -253, -1000, 18568, 41853, 3058, -1000, -258,
	2955, 10767, 41853, -1000, 3047, -1000, 390, 320, -1000, -1000,
	-1000, -1000, -1000, -1000, 1441, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1307, -1000, 41853, -1000, -1000, 254,
	34090, 35881, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 218,
	-1000, -1000, 178, -1000, 757, 159, 1535, -1000, -1000, 160,
	182, 124, 803, 1964, -1000, 1719, 1719, 1739, -1000, 623,
	-1000, -1000, -1000, -1000, 2598, -1000, -1000, -1000, 1604, 1469,
	-1000, 1566, 1566, 1511, 1511, 1511, 1511, 1511, 1655, 1655,
	-1000, -1000, -1000, 6549, 2595, 12573, 12573, 12573, 12573, 683,
	683, 2312, 3372, -1000, 10767, 1709, -1000, 10767, 2208, 2020,
	1339, 1440, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2440, 2439, 1998, 3119, 2438, 10767, -1000, -1000,
	1514, 1506, 1501, -1000, 1901, 9563, -1000, -1000, -1000, 2434,
	1439, 2429, -1000, -1000, -1000, 2427, 1494, 1027, 2426, 2213,
	2416, 1279, 10767, 10767, 10767, 10767, 2415, 1493, 1492, 10767,
	10767, 10767, 10767, 2413, 10767, 10767, 10767, 10767, 10767, 10767,
	10767, 10767, 59, 59, 59, 1257, 1250, -1000, -1000, 1433,
	-1000, 1964, -1000, -1000, 2955, -1000, 2594, 1952, 1243, -1000,
	-1000, -1000, 2156, -1000, -1000, 898, 871, 890, 41853, 967,
	2591, 41853, 41853, 41853, 183, -1000, 2977, 1120, -1000, 159,
	-89, 397, 999, 2825, 3118, -163, 41853, 41853, 41853, 41853,
	2994, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 37674,
	-1000, 2589, 1432, -1000, -1000, 10767, -1000, -1000, 2823, 41853,
	41853, 3111, 3111, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1653, 3111, 3111, 1097, 1541, 1653, -1000, -1000, 1653, -1000,
	-1000, 1653, -1000, -1000, 1438, -1000, 41853, -1000, -1000, -1000,
	2990, 2550, 1241, -1000, -1000, -1000, 3095, 941, 697, 697,
	931, 453, 3094, 16777, -1000, 1575, 961, 752, 2909, 240,
	-1000, 1575, -200, 666, 1575, 1575, 1575, 1575, 1575, 1575,
	1575, 500, 499, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
	1575, 1575, 1575, 1575, 915, 1575, 1575, 1575, 1575, 1575,
	-1000, 1575, 2588, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	537, 174, 3030, 293, 291, 1120, 3029, 302, 2662, 1216,
	-1000, -1000, -1000, -1000, 25135, 25135, 20359, 25135, -1000, 1538,
	-19, -32, -1000, -1000, 1232, 5942, 1232, 5942, -1000, -1000,
	751, -1000, -1000, 999, -1000, 41853, 41853, -1000, -1000, 2584,
	1666, -1000, -1000, 14379, -1000, 5942, 5942, -1000, -1000, 25732,
	41853, -1000, -83, -1000, -57, 2955, -1000, -1000, -1000, 1225,
	-1000, -1000, 1227, 999, 2832, 41853, 1225, 1225, 1225, -1000,
	-1000, 16180, 41853, 41853, -1000, -1000, 3111, 8957, -1000, 31702,
	-1000, -1000, 37075, -1000, 36478, 3111, 1658, -1000, 13782, 1818,
	158, -1000, 202, -327, 155, 1767, 154, 1964, -1000, -1000,
	2397, 2390, 1431, -1000, 1425, 2389, 1424, 1412, -1000, 5,
	-1000, 2948, 1004, -1000, 2573, -1000, 1409, 2883, -1000, 1221,
	-1000, 1660, 1400, -1000, 1004, 1346, 2872, 1221, 2955, 2184,
	-1000, 1196, -1000, 1969, 1429, 115, -1000, -1000, 41853, 2223,
	1343, 35881, 1028, -1000, 739, 1428, 1427, -1000, 34090, 242,
	34090, -1000, 34090, -1000, -1000, 362, -1000, 41853, 2954, -1000,
	-1000, -1000, 2156, 1656, -348, 41853, -1000, -1000, -1000, -1000,
	-1000, 1335, -1000, 683, 683, 2312, 2275, -1000, 12573, -1000,
	12573, 2771, 1644, -1000, 10767, 1814, 4202, 4202, 2516, 23941,
	41853, -1000, -1000, 10767, 10767, -1000, 2761, -1000, -1000, -1000,
	-1000, 10767, 10767, 1973, -1000, 41853, -1000, -1000, -1000, -1000,
	23941, -1000, 12573, -1000, 10767, 1111, 1111, 2755, 1319, 59,
	59, 59, 2748, 2731, 2693, 1318, 59, 2641, 2633, 2599,
	2576, 2539, 2515, 2492, 2381, -1000, 2572, -1000, -1000, 1809,
	11369, 8355, -1000, -1000, 264, 1186, 1938, 114, -1000, 1654,
	-1000, -1000, -1000, 867, 203, 2387, 1177, -1000, -1000, 41853,
	-1000, -1000, -1000, 16180, 2550, 2571, 2550, 72, 1575, -1000,
	551, 34090, 518, -1000, 41853, 1944, 1651, 2827, 427, 2944,
	41853, 2570, 2565, 2560, 2554, 2986, 379, 4424, 41853, 1255,
	-1000, 1420, 438, -1000, 41853, 1964, -1000, 2055, -1000, 1541,
	-1000, -1000, 3111, -1000, -1000, 10767, 10767, 3111, 1541, 1541,
	1653, 41853, -1000, 379, 4424, 2984, 3929, 485, 2483, -1000,
	41853, -1000, -1000, -1000, 676, -1000, 892, 709, 41853, 1761,
	892, 1760, 2553, -1000, -1000, 41853, 41853, 41853, 41853, -1000,
	-1000, 41853, -1000, 41853, 41853, 41853, 41853, 41853, 35284, -1000,
	41853, 41853, -1000, 41853, 1757, 41853, 1756, 2993, -1000, 1575,
	1575, 830, -1000, -1000, 522, -1000, 35284, 1937, 1931, 1930,
	1929, 2183, 2178, 2177, 1575, 1575, 1925, 2176, 34687, 2169,
	1035, 1922, 1921, 1911, 1894, 2167, 780, -1000, 2164, 1880,
	1871, 1870, 41853, 2552, 2102, -1000, -1000, 72, 1575, 290,
	41853, 1643, 551, 394, 2001, 21553, 41853, 31702, 31702, 31702,
	31702, -1000, 2859, 2858, -1000, 2848, 2847, 2871, 41853, 31702,
	2550, -1000, 34687, -1000, -1000, -1000, 1563, 1317, 2888, 914,
	10767, -1000, -1000, -47, -53, -1000, -1000, -1000, 34090, 2163,
	473, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3045, 41853,
	41853, 630, 2385, 1163, -1000, -1000, -1000, 4424, 2536, 2536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2536,
	2536, 2549, -1000, -1000, 2535, 2535, 2535, 2497, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2537, 2537,
	2546, 2546, 2537, -1000, -1000, 3104, -1000, 1157, -1000, -1000,
	1414, -1000, 3104, 1707, -335, 13782, 1657, 1565, -1000, 10767,
	13782, 10767, -285, 273, -287, -1000, -1000, -1000, 2160, -1000,
	-1000, -1000, 1907, -1000, 1906, 81, 113, 1746, -253, 8355,
	358, 41853, -253, 41853, 8355, -1000, 41853, 352, -253, 3045,
	5, 10767, 2923, -1000, -1000, 41853, 1905, -1000, -1000, -1000,
	3113, 34090, 2055, 1526, 33493, -1000, 234, -1000, 209, 532,
	2159, -1000, 764, 112, 2157, 2156, -1000, -1000, -1000, -1000,
	12573, -1000, -1000, -1000, -1000, 1964, 10767, 2383, -1000, 877,
	877, 2382, 2380, -1000, 2536, 2536, -1000, 2497, 2535, 2497,
	877, 877, 2379, -1000, 1942, 2323, -1000, 2228, 2222, 10767,
	-1000, 2378, 3496, 1219, -101, -227, 59, 59, -1000, -1000,
	-1000, -1000, 59, 59, 59, 59, -1000, 59, 59, 59,
	59, 59, 59, 59, 59, 643, -140, -318, -141, -322,
	-1000, 2363, 1156, -1000, -1000, -1000, -1000, -1000, 3926, 1147,
	-1000, 2156, 2154, -1000, 2146, 2145, 967, 4424, 2362, 2983,
	15583, 2982, 2009, -1000, -1000, -1000, 32896, 510, -1000, -1000,
	-1000, 659, 228, 1896, 501, -1000, 41853, 302, 2897, 1642,
	2139, 41853, -1000, -1000, -1000, -1000, -1000, -1000, 2944, -1000,
	896, 331, 30508, 15583, 15583, 15583, 344, 351, 1641, -1000,
	626, 1112, 1411, 31702, 41853, -1000, 31105, 2358, -1000, 999,
	3111, -1000, 1964, 1964, -1000, 3111, 3111, 1541, -1000, 351,
	-1000, 344, -1000, 897, 17374, 421, 393, 363, -1000, 585,
	-1000, -1000, 597, 2908, 4424, -1000, 41853, -1000, 41853, -1000,
	41853, 41853, 709, 10767, 2908, 41853, 737, -1000, -1000, 984,
	353, 315, 656, 656, 1126, -1000, 2953, -1000, -1000, 1044,
	-1000, -1000, -1000, -1000, 41853, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23941, 23941, 3017, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2138, 2134,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 41853,
	1316, -1000, 1639, 2009, 32896, 1638, 1599, 2119, 510, 1944,
	1636, -1000, 2118, -1000, 1008, 41853, 41853, -1000, 1096, -1000,
	1635, 2819, 2774, 2819, -1000, -1000, -1000, -1000, 2855, -1000,
	2851, -1000, -1000, 1096, -1000, -1000, -1000, -1000, -1000, 914,
	-1000, 3043, 892, 892, 892, 2355, -1000, -1000, -1000, 1028,
	2347, -1000, -1000, -1000, 3132, -1000, -1000, -1000, -1000, -1000,
	-1000, 16180, 2943, 3100, 3093, 32299, 3100, -1000, -335, 1585,
	-1000, 1780, 152, 1732, 41853, -1000, -1000, -1000, 2343, 2324,
	-260, 103, 3091, 3089, 954, -1000, 2321, 1026, -253, -1000,
	-1000, 1004, -1000, -1000, -1000, -253, -1000, 1004, -1000, 81,
	-1000, -1000, 2936, -1000, -1000, 2055, -1000, 200, -1000, -1000,
	-1000, -1000, -1000, -1000, 136, -1000, 41853, -1000, 1015, 110,
	-1000, 1964, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 10767, -1000,
	-1000, -1000, 2149, -1000, -1000, 10767, 2319, 2117, 2314, 2116,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 3137, -1000, 3088, 2313, 2310, 2309,
	2308, 2307, 2305, -1000, 10767, 2303, 3926, -1000, -1000, -1000,
	-1000, -1000, -1000, 783, 344, 2300, 1010, -1000, -1000, -1000,
	-1000, 344, -1000, 2115, 157, -1000, -1000, -1000, 2110, 2108,
	1889, -1000, -1000, 1864, 1347, 166, -1000, -1000, -1000, -1000,
	-1000, -1000, 2001, 1974, 1634, -350, -1000, 2532, -1000, 1575,
	1575, 1575, 41853, 1312, -1000, 1575, 1575, 2298, 2297, 2296,
	-165, 672, 1587, 1586, -1000, 1885, 25135, 31702, 31105, 1094,
	-1000, 1408, -1000, -1000, -1000, -1000, -1000, 3111, 672, -1000,
	412, 1883, 12573, 2531, 12573, 2529, 432, 2528, 1310, -1000,
	41853, -1000, -1000, 41853, 283, 2526, -1000, 2517, 2822, 398,
	2514, 2510, 41853, 2090, -1000, 2908, 41853, 641, 2934, -1000,
	-1000, -1000, 308, -1000, -1000, 445, -1000, 41853, -1000, 41853,
	-1000, 1473, -1000, 23941, -1000, -1000, 1309, -1000, 2102, 2101,
	-1000, 157, 2100, 5942, -1000, -1000, 2897, 2097, -1000, 41853,
	1008, 1008, 3137, 41853, 8355, -1000, -1000, 10767, 2507, -1000,
	10767, -1000, -1000, -1000, -1000, -1000, 2505, 2921, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1736, -1000, 10767, 10767, -1000,
	-1000, 707, 13782, -292, 257, -1000, -1000, -1000, -262, 2092,
	-1000, -1000, 3087, 2083, 2034, 41853, -1000, -1000, 1004, 1004,
	-260, -1000, -1000, 999, -1000, -1000, 2, 504, -1000, 2053,
	-1000, 2003, 59, -1000, 59, -1000, 201, 10767, -1000, -1000,
	-1000, -1000, -1000, -1000, 1988, -1000, 2295, 4424, -168, -165,
	15583, -168, -1000, -1000, 335, -1000, -1000, 298, -1000, -1000,
	1854, 547, -1000, -1000, -1000, 1632, 1769, 2045, 28717, 23941,
	24538, 2082, -1000, -1000, 30508, 1736, 1736, 4714, 231, 4714,
	-1000, 2504, 943, 1584, -1000, 1881, -1000, 1878, -1000, 3111,
	1094, 1408, -1000, -1000, 1518, -1000, 943, 2483, 3082, -1000,
	3166, 41853, 2750, 41853, 2502, 1616, 12573, -1000, 597, 2868,
	-1000, -1000, 283, -1000, -1000, 1773, 12573, -1000, -1000, 2073,
	24538, 729, 1613, 1608, 756, 2501, -1000, 463, 3128, -1000,
	-1000, -1000, 827, 2500, -1000, 1745, 1741, -1000, 41853, -1000,
	28717, 28717, 494, 494, 28717, 28717, 2498, 656, -1000, -1000,
	12573, -1000, -1000, 1575, -1000, -1000, -1000, 1575, 1451, -1000,
	-1000, -1000, -1000, -1000, -1000, 1974, -1000, -1000, 3058, -1000,
	-1000, 1964, 41853, 1964, 29911, -1000, 3079, 3078, -1000, 1782,
	1964, 971, -1000, -335, 41853, 41853, -270, 1874, -1000, 2072,
	97, -1000, -1000, 994, -262, -273, 76, 105, 1606, -1000,
	-1000, -1000, -1000, 2292, -1000, 620, -1000, -1000, -1000, 971,
	-1000, -1000, -160, -1000, -1000, 350, -1000, -1000, -1000, 517,
	2070, -1000, -1000, 297, -1000, -1000, 2065, -1000, -1000, 107,
	-1000, 1601, 1308, -1000, 2497, 10767, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 586, 4653, -1000, 961, -1000, 2,
	586, 27523, 536, 245, -1000, 1857, -1000, -1000, 3137, -1000,
	527, -1000, 423, -1000, 1306, -1000, 1285, 29314, 1853, 2074,
	-1000, 4491, 734, -1000, -1000, 2312, -1000, -1000, -1000, -1000,
	-1000, -1000, 2059, 2058, -1000, -1000, -1000, -1000, -1000, 1852,
	2496, -51, 3009, 2056, -1000, -1000, 2494, 1272, 1265, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1251, 1242, 28717,
	-1000, -1000, 2312, 1848, 23941, 1575, -1000, -1000, 1217, 1215,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2490, -1000, -1000,
	3076, -270, -1000, 2051, 732, 84, 105, -1000, 3075, 96,
	3073, 3071, 2050, -1000, -1000, 653, -255, 53, 48, 45,
	-1000, -1000, -1000, 10767, 41853, 449, -1000, -1000, -1000, 135,
	-1000, -1000, -1000, -1000, 2045, 2040, -1000, 28717, 2953, 1948,
	401, 3070, 4714, -1000, 1575, -1000, 401, 1204, -1000, 1575,
	1575, -1000, 377, -1000, 1582, -1000, 1847, -1000, 3058, -1000,
	356, -1000, 407, -1000, -1000, -1000, 1187, -1000, -1000, -1000,
	4491, 413, -1000, 533, 2489, -1000, -1000, 2280, 10767, 2487,
	1575, 1978, -155, 28717, 2805, 2796, 2794, 2601, 1167, -1000,
	-1000, 23941, -1000, -1000, 28120, 41853, 2034, -1000, -1000, 2486,
	1837, 103, 89, 3067, -1000, 2034, 3064, 2034, 2034, 966,
	1720, -1000, 78, 65, 63, -1000, -1000, -1000, -1000, 472,
	-1000, 208, -1000, -1000, -1000, 251, -1000, -1000, 2953, -1000,
	3062, 485, -1000, 23941, -1000, -1000, 27523, 1736, 1736, -1000,
	-1000, 1820, -1000, -1000, -1000, -1000, 1810, -1000, -1000, -1000,
	1130, -1000, 41853, 792, 7753, -1000, 1933, -1000, 41853, -1000,
	2751, -1000, 207, 1061, 251, 494, 251, 494, 251, 494,
	251, 494, 227, -1000, -1000, -1000, 1056, -1000, -1000, 3007,
	23344, 91, -1000, -1000, -1000, 2036, -1000, 2034, -1000, -1000,
	-1000, 71, 653, -1000, -1000, -1000, 2033, -1000, -1000, -1000,
	-1000, 1575, 1575, 2032, 2030, 323, -1000, -1000, -1000, 26926,
	421, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 413, 4714,
	-1000, 7753, 1055, -1000, 1964, -1000, 656, -1000, -1000, 2683,
	2518, 3117, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 41853, -1000, 41853, -1000, 1049, -1000, -1000, -1000,
	1407, -1000, -1000, -1000, -1000, 1574, -1000, -310, 1804, 1803,
	-1000, -1000, 41853, -1000, 41853, 412, -1000, 4714, 1036, -1000,
	7753, -1000, -1000, 3125, -1000, 3123, 849, 849, 251, 251,
	251, 251, -1000, 958, -1000, 1570, -1000, 26329, 41853, 2018,
	-1000, -1000, 2007, -1000, -1000, -1000, 1033, 2483, -1000, -1000,
	-1000, -1000, -1000, 1841, 471, -1000, 41853, 7151, -1000, 1370,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1964,
	41853, -1000,
}

var yyPgo = [...]int{
	0, 170, 3149, 246, 183, 3721, 95, 250, 238, 224,
	249, 3720, 3719, 3718, 2974, 2972, 3717, 3716, 3715, 3714,
	3713, 3711, 3703, 3701, 3696, 3693, 3692, 3690, 3687, 3686,
	3684, 3683, 3682, 3681, 3680, 3678, 3676, 3675, 3674, 3672,
	3671, 3670, 3666, 3665, 3664, 3663, 244, 3662, 3661, 3660,
	3659, 3657, 3654, 3652, 3651, 3650, 3649, 3648, 3647, 3646,
	3644, 3630, 3629, 3628, 3627, 3626, 3623, 3622, 3621, 3620,
	3617, 3615, 3614, 3613, 3610, 3609, 3608, 3607, 3606, 218,
	3604, 2964, 3601, 3600, 3597, 3596, 3594, 3593, 3592, 229,
	3591, 3590, 3587, 3584, 3583, 3582, 3581, 3580, 3578, 3577,
	3576, 240, 3572, 3571, 3569, 3568, 3567, 3566, 235, 3560,
	178, 201, 3559, 3558, 3557, 3555, 3550, 3546, 233, 186,
	65, 3545, 49, 3544, 3543, 223, 3542, 151, 3541, 146,
	3538, 3537, 3536, 3535, 3533, 3531, 3530, 3528, 3527, 3525,
	3523, 3506, 3505, 3503, 3501, 3499, 90, 3494, 258, 3493,
	70, 3492, 3490, 125, 358, 199, 251, 2606, 257, 248,
	181, 185, 91, 3488, 2948, 3487, 160, 228, 158, 28,
	3485, 129, 3482, 259, 57, 32, 231, 138, 56, 159,
	122, 3481, 221, 109, 108, 3479, 3478, 136, 242, 174,
	3477, 105, 3476, 3475, 3470, 3466, 3465, 200, 192, 3464,
	3462, 132, 3461, 3460, 123, 3459, 75, 119, 168, 116,
	3458, 89, 121, 127, 148, 175, 3457, 117, 3452, 3451,
	3450, 3449, 173, 3448, 3446, 152, 61, 3437, 3436, 3435,
	68, 3434, 77, 3433, 27, 3432, 66, 3428, 3427, 3426,
	3424, 3423, 3422, 3421, 3420, 3418, 3417, 3416, 46, 3414,
	3407, 7, 13, 12, 3404, 24, 3400, 169, 3399, 3398,
	3397, 3396, 3395, 96, 86, 3392, 93, 164, 3390, 10,
	25, 72, 3389, 3387, 220, 210, 103, 149, 3385, 302,
	3384, 3381, 3379, 155, 3378, 407, 3376, 3375, 3374, 3373,
	3372, 3371, 135, 3368, 217, 42, 3367, 128, 134, 3366,
	35, 47, 198, 207, 3365, 3364, 3360, 478, 194, 94,
	36, 0, 3359, 156, 3358, 3355, 3353, 255, 3351, 239,
	232, 166, 182, 253, 236, 3350, 3349, 71, 3346, 162,
	48, 55, 130, 73, 21, 237, 3343, 1337, 8, 190,
	3342, 212, 3341, 176, 16, 100, 144, 3337, 3336, 29,
	260, 3334, 3333, 3332, 124, 3330, 3329, 172, 81, 3328,
	3326, 3325, 3323, 37, 3321, 38, 15, 3320, 102, 3319,
	256, 3318, 245, 150, 177, 206, 154, 222, 230, 79,
	78, 3317, 1688, 153, 97, 14, 3316, 225, 3314, 163,
	126, 3300, 83, 3299, 243, 261, 214, 3298, 180, 11,
	45, 31, 26, 44, 9, 98, 211, 3297, 3294, 19,
	54, 3293, 131, 3292, 18, 3291, 3289, 62, 3, 3288,
	3286, 17, 20, 3285, 34, 205, 171, 118, 88, 67,
	3284, 3283, 51, 139, 3282, 137, 188, 157, 3278, 74,
	3277, 3274, 3273, 282, 3272, 263, 3271, 3270, 3269, 3268,
	3267, 3265, 3264, 3263, 3258, 3255, 120, 43, 3254, 3253,
	3252, 3251, 82, 145, 3250, 3247, 3246, 3244, 39, 133,
	3243, 23, 3242, 33, 30, 41, 3239, 92, 3238, 4,
	213, 3237, 3235, 5, 3234, 3233, 1, 2, 3228, 3227,
	113, 3226, 87, 22, 167, 106, 3225, 3224, 84, 219,
	143, 3223, 3222, 101, 234, 208, 3220, 99, 247, 252,
	3218, 216, 3216, 3215, 3212, 3211, 3206, 3205, 1084, 3203,
	3202, 241, 69, 76, 111, 3201, 3200, 3199, 80, 161,
	115, 112, 64, 85, 3198, 110, 204, 3197, 197, 3196,
	3194, 107, 3192, 3191, 3189, 3188, 189, 3187, 3186, 187,
	226, 3185, 3182, 298, 3179, 3173, 3172, 3171, 3169, 3168,
	3161, 3157, 3156, 3152, 254, 227, 3134,
}

//line mysql_sql.y:11048
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() tree.GroupBy {
	v, _ := st.union.(tree.GroupBy)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 559, 562, 562, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 116, 116, 115, 544, 544, 544, 545,
	545, 112, 134, 133, 136, 136, 135, 135, 132, 132,
	128, 131, 131, 130, 130, 129, 124, 126, 126, 125,
	127, 127, 113, 101, 114, 489, 489, 488, 488, 487,
	487, 440, 440, 486, 486, 486, 485, 485, 485, 484,
	484, 483, 483, 482, 482, 480, 480, 481, 479, 478,
	478, 478, 476, 476, 476, 472, 472, 474, 473, 473,
	475, 467, 467, 470, 470, 468, 468, 468, 468, 471,
	466, 466, 466, 465, 465, 100, 100, 100, 384, 384,
	99, 99, 398, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 396, 395, 395, 394, 394, 399, 399, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 397,
	397, 397, 397, 397, 397, 397, 397, 397, 397, 90,
	90, 90, 90, 90, 95, 95, 95, 550, 550, 549,
	549, 551, 551, 551, 551, 552, 552, 93, 93, 93,
	94, 393, 393, 393, 91, 92, 92, 383, 383, 388,
	388, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 392, 392, 392, 390, 390, 389,
	389, 391, 391, 84, 84, 84, 87, 86, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 85, 85, 85,
	85, 85, 85, 80, 80, 80, 80, 80, 79, 79,
	81, 81, 380, 380, 379, 96, 96, 97, 547, 547,
	546, 548, 548, 548, 548, 98, 104, 104, 104, 104,
	104, 104, 104, 103, 103, 106, 106, 105, 107, 89,
	89, 89, 89, 89, 89, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 514, 514, 514, 516, 516, 315,
	316, 563, 318, 314, 314, 314, 510, 510, 511, 512,
	513, 513, 513, 102, 11, 11, 11, 11, 11, 11,
	11, 11, 13, 78, 83, 83, 256, 256, 261, 261,
	262, 262, 262, 267, 267, 268, 268, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 244,
	244, 244, 239, 239, 239, 239, 240, 240, 241, 241,
	242, 242, 242, 242, 243, 243, 308, 308, 263, 263,
	263, 265, 265, 264, 260, 258, 258, 258, 258, 258,
	258, 258, 259, 259, 259, 259, 266, 266, 76, 82,
	82, 82, 527, 527, 77, 538, 538, 443, 443, 329,
	329, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 448, 449, 325,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	53, 56, 52, 52, 52, 369, 369, 51, 564, 564,
	303, 303, 64, 63, 55, 65, 66, 67, 68, 69,
	70, 50, 62, 62, 62, 62, 62, 62, 62, 62,
	73, 461, 461, 566, 566, 566, 71, 72, 442, 442,
	442, 61, 60, 59, 58, 57, 57, 49, 49, 48,
	48, 54, 140, 141, 141, 322, 322, 322, 324, 324,
	320, 565, 565, 412, 412, 323, 323, 47, 47, 47,
	47, 74, 321, 321, 302, 319, 319, 319, 12, 12,
	10, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 25, 26, 28, 377, 377,
	374, 27, 19, 18, 18, 22, 21, 17, 17, 20,
	23, 24, 24, 9, 9, 9, 9, 14, 14, 15,
	161, 161, 212, 212, 522, 522, 518, 518, 519, 519,
	519, 520, 520, 521, 521, 108, 455, 455, 455, 455,
	455, 455, 8, 183, 183, 454, 454, 454, 454, 454,
	454, 381, 381, 381, 499, 499, 499, 500, 182, 182,
	177, 177, 456, 456, 346, 501, 501, 464, 464, 463,
	463, 462, 462, 180, 180, 181, 181, 164, 164, 119,
	119, 469, 469, 469, 469, 477, 477, 439, 439, 248,
	248, 295, 295, 296, 296, 154, 154, 155, 155, 155,
	155, 155, 155, 553, 553, 554, 555, 556, 556, 557,
	557, 557, 558, 558, 558, 558, 558, 507, 507, 509,
	509, 508, 179, 179, 175, 175, 176, 176, 176, 174,
	174, 173, 172, 172, 171, 169, 169, 169, 170, 170,
	170, 187, 187, 157, 157, 157, 156, 156, 156, 156,
	156, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 158, 158, 515, 515, 515, 444, 444,
	444, 451, 451, 276, 276, 277, 277, 275, 275, 159,
	159, 160, 160, 160, 160, 274, 274, 273, 162, 162,
	168, 167, 167, 163, 163, 163, 163, 284, 284, 283,
	283, 283, 283, 111, 117, 117, 118, 186, 186, 282,
	281, 281, 281, 185, 185, 184, 184, 178, 178, 166,
	166, 166, 166, 280, 165, 278, 543, 543, 542, 542,
	541, 539, 539, 539, 540, 540, 540, 540, 491, 491,
	491, 491, 491, 309, 309, 309, 313, 313, 312, 312,
	312, 312, 312, 317, 7, 7, 7, 7, 7, 7,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 38, 196, 197, 39, 198, 198, 199,
	199, 200, 200, 201, 202, 203, 203, 203, 203, 37,
	188, 188, 189, 189, 190, 190, 191, 192, 192, 192,
	195, 193, 194, 194, 561, 561, 560, 36, 36, 29,
	147, 147, 148, 148, 148, 150, 150, 245, 245, 245,
	149, 149, 151, 151, 151, 523, 526, 524, 524, 528,
	528, 528, 529, 529, 529, 529, 530, 530, 30, 137,
	142, 533, 533, 533, 532, 532, 534, 534, 535, 535,
	299, 299, 300, 300, 145, 146, 146, 144, 139, 153,
	153, 153, 153, 153, 138, 143, 525, 531, 531, 531,
	378, 378, 375, 376, 376, 373, 372, 372, 372, 537,
	537, 536, 536, 536, 310, 310, 31, 368, 368, 370,
	371, 371, 371, 362, 362, 362, 362, 35, 366, 366,
	367, 367, 367, 367, 367, 367, 367, 363, 363, 365,
	365, 361, 361, 361, 361, 361, 361, 34, 152, 152,
	360, 360, 357, 357, 355, 355, 356, 356, 354, 354,
	354, 358, 358, 42, 75, 43, 44, 45, 41, 359,
	359, 33, 33, 33, 33, 121, 120, 120, 120, 120,
	120, 123, 123, 298, 298, 297, 297, 122, 40, 224,
	224, 431, 431, 426, 426, 426, 426, 426, 446, 446,
	446, 427, 427, 427, 428, 428, 428, 430, 430, 430,
	429, 429, 429, 429, 429, 445, 445, 447, 447, 447,
	400, 400, 401, 401, 401, 404, 404, 418, 418, 419,
	419, 417, 417, 424, 424, 423, 423, 422, 422, 421,
	421, 420, 420, 420, 420, 415, 415, 414, 414, 402,
	402, 402, 402, 402, 403, 403, 403, 413, 413, 416,
	416, 272, 272, 271, 271, 232, 232, 233, 233, 270,
	270, 230, 230, 231, 231, 231, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 269, 269, 269, 269, 269, 269, 269, 269, 269,
	269, 497, 497, 498, 235, 235, 246, 246, 246, 246,
	246, 246, 234, 234, 236, 236, 213, 213, 211, 211,
	204, 204, 205, 205, 206, 206, 206, 210, 210, 209,
	209, 209, 209, 207, 207, 208, 208, 208, 208, 208,
	208, 386, 386, 494, 494, 495, 495, 490, 490, 490,
	493, 493, 493, 493, 493, 493, 496, 496, 496, 492,
	492, 214, 293, 293, 293, 311, 311, 311, 311, 292,
	292, 292, 229, 229, 228, 228, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 385, 385,
	326, 326, 327, 327, 255, 254, 254, 254, 254, 254,
	252, 253, 251, 251, 251, 251, 251, 250, 250, 249,
	249, 249, 364, 364, 247, 247, 238, 238, 238, 237,
	237, 237, 425, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 290,
	290, 290, 291, 291, 291, 291, 291, 291, 336, 336,
	342, 342, 506, 506, 505, 215, 215, 215, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 225, 225, 225,
	409, 409, 409, 409, 410, 410, 410, 410, 411, 411,
	411, 407, 407, 408, 408, 347, 348, 348, 452, 452,
	453, 453, 405, 405, 406, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 460, 460, 460, 286, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 286, 517, 517, 517, 502, 502, 502,
	503, 503, 503, 503, 503, 503, 503, 503, 503, 503,
	503, 503, 504, 504, 504, 504, 504, 504, 504, 504,
	504, 504, 504, 504, 504, 504, 504, 504, 504, 288,
	288, 288, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 349, 349, 350,
	350, 457, 457, 457, 457, 457, 457, 458, 458, 459,
	459, 459, 459, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 334, 285, 285, 285, 351, 343, 343, 344,
	344, 345, 345, 337, 337, 337, 337, 337, 337, 338,
	338, 340, 340, 340, 340, 340, 340, 340, 340, 340,
	340, 340, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 332, 339, 339, 341, 341, 353, 353, 353,
	352, 352, 352, 352, 352, 352, 352, 227, 227, 227,
	227, 331, 331, 331, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 217, 217, 217, 217,
	221, 221, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 222, 222, 222, 222,
	222, 220, 220, 220, 220, 220, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 109, 110, 110, 219, 294, 294,
	432, 432, 435, 435, 433, 433, 434, 436, 436, 436,
	437, 437, 437, 438, 438, 438, 441, 441, 301, 301,
	301, 307, 307, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 6, 4, 0, 1, 1, 0,
	1, 5, 2, 2, 6, 9, 6, 9, 4, 7,
	8, 0, 1, 1, 2, 4, 6, 1, 2, 4,
	0, 2, 10, 10, 2, 0, 2, 1, 3, 3,
	3, 0, 2, 1, 3, 5, 0, 2, 3, 1,
	3, 1, 1, 1, 3, 1, 1, 1, 1, 0,
	3, 3, 0, 3, 3, 0, 1, 3, 0, 1,
	3, 0, 2, 1, 2, 3, 4, 3, 3, 1,
	0, 1, 1, 0, 1, 8, 5, 7, 0, 3,
	8, 5, 1, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 4, 1, 3, 1,
	2, 2, 2, 2, 2, 2, 1, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 1, 1, 1, 1,
	2, 2, 2, 1, 2, 1, 2, 2, 1, 2,
	1, 1, 2, 2, 1, 1, 1, 3, 2, 2,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 4, 1, 3, 3,
	1, 2, 2, 2, 1, 2, 2, 3, 4, 4,
	6, 1, 1, 1, 2, 4, 6, 1, 4, 1,
	3, 3, 4, 4, 4, 4, 3, 3, 2, 4,
	4, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 3, 1, 1, 1, 2, 2, 0, 1,
	4, 2, 4, 1, 5, 3, 2, 1, 2, 2,
	4, 4, 5, 2, 1, 3, 4, 4, 1, 2,
	9, 7, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 1, 2, 1, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 2, 4, 3, 3, 1,
	1, 1, 1, 1, 1, 2, 3, 4, 7, 2,
	3, 3, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 10, 7, 4, 4, 1, 3, 1, 6,
	3, 3, 3, 1, 1, 1, 3, 2, 4, 5,
	5, 6, 5, 5, 3, 2, 2, 1, 3, 4,
	3, 7, 5, 8, 2, 2, 1, 3, 2, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
	2, 1, 3, 2, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 6, 3, 3, 1, 1, 7, 7,
	8, 8, 0, 4, 7, 0, 3, 0, 2, 0,
	1, 1, 1, 1, 4, 2, 2, 3, 3, 4,
	5, 3, 4, 4, 2, 2, 2, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 2, 5, 5, 0, 2, 7, 0, 1,
	0, 1, 5, 5, 3, 3, 2, 4, 4, 4,
	4, 4, 1, 1, 1, 3, 3, 1, 1, 1,
	6, 0, 1, 1, 1, 1, 5, 5, 0, 1,
	1, 3, 3, 3, 4, 6, 7, 4, 4, 7,
	8, 3, 3, 3, 4, 0, 2, 2, 0, 2,
	2, 1, 1, 1, 1, 0, 1, 4, 4, 5,
	4, 3, 1, 3, 1, 1, 3, 5, 2, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 4, 4, 1, 3,
	1, 4, 6, 6, 4, 4, 4, 4, 4, 3,
	6, 3, 5, 1, 1, 2, 2, 11, 8, 9,
	1, 3, 2, 4, 0, 2, 0, 1, 1, 1,
	1, 0, 1, 0, 1, 4, 2, 1, 5, 4,
	4, 2, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 7, 1, 1, 1, 0, 1,
	1, 1, 1, 0, 2, 0, 3, 0, 2, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 3,
	1, 1, 1, 4, 4, 4, 3, 2, 2, 2,
	3, 2, 3, 4, 1, 3, 4, 0, 2, 1,
	1, 2, 2, 0, 1, 2, 4, 1, 3, 1,
	3, 2, 3, 1, 4, 3, 0, 1, 1, 2,
	5, 2, 2, 2, 0, 2, 3, 3, 0, 1,
	3, 1, 3, 0, 1, 2, 1, 1, 0, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 7, 1, 1, 7, 1, 3, 0,
	1, 1, 3, 1, 3, 0, 1, 1, 1, 14,
	1, 3, 0, 1, 1, 3, 1, 1, 2, 4,
	1, 1, 1, 1, 0, 1, 2, 9, 9, 7,
	1, 2, 3, 3, 3, 0, 4, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 4, 1, 1, 3,
	4, 3, 0, 1, 1, 1, 0, 2, 7, 8,
	8, 0, 3, 3, 0, 3, 0, 3, 0, 5,
	1, 3, 0, 3, 3, 0, 2, 9, 6, 0,
	2, 2, 3, 3, 4, 4, 1, 0, 2, 2,
	1, 3, 2, 1, 3, 2, 1, 3, 2, 0,
	1, 3, 4, 3, 1, 1, 4, 1, 3, 1,
	1, 1, 1, 0, 1, 1, 1, 11, 0, 2,
	3, 3, 2, 2, 3, 1, 1, 1, 3, 3,
	4, 0, 2, 2, 2, 2, 2, 6, 0, 4,
	1, 1, 0, 3, 0, 1, 1, 2, 4, 4,
	4, 0, 1, 8, 2, 4, 4, 4, 9, 0,
	2, 11, 9, 11, 8, 2, 2, 9, 4, 5,
	3, 0, 4, 1, 3, 0, 3, 5, 10, 0,
	2, 0, 2, 0, 3, 2, 4, 3, 0, 2,
	1, 0, 2, 3, 0, 2, 3, 0, 2, 1,
	0, 3, 2, 4, 3, 0, 1, 0, 1, 1,
	0, 6, 0, 3, 5, 0, 4, 0, 3, 1,
	3, 4, 5, 0, 3, 1, 3, 2, 3, 1,
	2, 0, 4, 6, 5, 0, 2, 0, 2, 4,
	5, 4, 5, 1, 5, 6, 5, 0, 3, 0,
	1, 1, 3, 3, 3, 0, 4, 1, 3, 3,
	3, 0, 1, 1, 3, 2, 3, 3, 3, 4,
	4, 3, 3, 3, 3, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 5,
	4, 1, 3, 3, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 3, 1, 3, 5, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 2, 1, 2, 2, 1,
	1, 2, 2, 2, 3, 3, 2, 2, 1, 5,
	6, 4, 1, 1, 1, 5, 4, 1, 1, 2,
	0, 1, 1, 2, 5, 0, 1, 1, 2, 2,
	3, 3, 1, 1, 2, 2, 2, 0, 1, 2,
	2, 2, 0, 3, 0, 3, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 3,
	5, 2, 2, 2, 2, 1, 1, 2, 5, 6,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 4,
	4, 4, 7, 7, 7, 7, 7, 7, 0, 2,
	0, 1, 1, 2, 4, 1, 2, 2, 1, 2,
	2, 1, 2, 2, 2, 2, 2, 0, 1, 1,
	1, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 2, 5, 0, 1, 3, 0, 1, 0, 2,
	0, 2, 0, 1, 6, 8, 8, 6, 6, 5,
	5, 5, 6, 6, 6, 6, 5, 6, 6, 6,
	6, 6, 6, 6, 6, 1, 1, 1, 4, 4,
	6, 8, 6, 4, 5, 4, 4, 4, 3, 4,
	6, 6, 7, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 8, 4, 2, 3, 2, 4, 2, 2, 4,
	6, 2, 2, 4, 6, 4, 2, 0, 1, 2,
	3, 1, 1, 1, 1, 1, 1, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 3, 0, 1, 1,
	3, 1, 3, 3, 3, 3, 3, 2, 1, 1,
	1, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 1, 3, 4, 4, 5, 4, 5, 3, 4,
	5, 6, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 4, 4, 1, 2, 3, 5, 1, 1, 3,
	0, 1, 0, 3, 0, 3, 3, 0, 3, 5,
	0, 3, 5, 0, 1, 1, 0, 1, 1, 2,
	2, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -559, -562, -2, -5, 610, -1, -4, -110, -84,
	-7, -112, -113, -8, -108, -9, -10, -12, -88, -103,
	-105, -107, -106, -46, -11, -102, -79, -80, -90, -96,
	-99, -100, -101, -114, -109, -111, -154, -115, -116, 600,
	-85, -86, -87, -32, -31, -30, -29, -137, -142, 606,
	445, 14, 494, -14, -15, -507, -16, 258, -314, -315,
	-316, -318, -563, -47, -48, -49, -57, -58, -59, -60,
	-61, -71, -72, -73, -50, -51, -52, -55, -53, -64,
	-63, -65, -66, -67, -68, -69, -70, -54, -140, -141,
	-74, -56, -75, -77, -76, -82, -78, -83, -139, -144,
	-13, 233, -81, 76, -91, -92, -93, -94, -95, -97,
	-98, 369, 375, 432, 599, 61, -155, -157, 616, 617,
	158, 159, 161, 162, -33, -34, -35, -36, -37, -38,
	-40, -39, -41, -42, -43, -44, -45, 229, 16, 537,
	-17, -20, -18, -21, -19, -27, -28, -26, -23, -25,
	-138, -24, -143, -22, 253, 252, 38, 319, 320, 321,
	373, 251, 230, 15, 31, 42, 349, -156, 82, 529,
	530, 532, 231, -158, 13, 620, -6, -3, -2, -124,
	-128, -132, -135, -136, -133, -134, -4, -110, 116, 243,
	601, -311, 365, 602, 604, 603, 85, 93, -304, -306,
	445, 258, 369, 375, 599, 617, 542, 543, 544, 545,
	546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
	556, 566, 567, 557, 558, 559, 560, 561, 562, 563,
	564, 568, 569, 570, 571, 572, 573, 574, 575, 576,
	577, 578, 579, 580, 581, 497, 586, 587, 588, 589,
	525, 585, 347, 348, 534, 270, 294, 400, 300, 307,
	158, 177, 171, 199, 191, 530, 166, 274, 312, 275,
	92, 161, 480, 106, 457, 429, 164, 289, 291, 293,
	526, 527, 359, 296, 524, 295, 297, 299, 528, 276,
	350, 187, 182, 288, 272, 180, 277, 40, 278, 204,
	279, 280, 539, 453, 346, 459, 304, 52, 427, 181,
	454, 292, 456, 208, 212, 471, 472, 175, 176, 461,
	474, 203, 206, 207, 250, 343, 344, 43, 536, 262,
	475, 210, 202, 198, 483, 308, 306, 201, 174, 197,
	273, 65, 214, 213, 215, 423, 424, 425, 426, 281,
	282, 363, 470, 194, 183, 351, 167, 23, 478, 257,
	458, 376, 283, 301, 309, 209, 211, 264, 269, 538,
	529, 431, 268, 305, 476, 179, 261, 290, 256, 479,
	168, 532, 378, 284, 162, 298, 473, 482, 64, 391,
	173, 165, 247, 159, 266, 271, 285, 286, 287, 523,
	311, 310, 302, 531, 195, 263, 200, 185, 172, 196,
	160, 265, 481, 392, 597, 349, 410, 193, 190, 267,
	240, 477, 460, 163, 414, 393, 188, 313, 593, 594,
	595, 364, 342, 314, 315, 186, 254, 451, 452, 318,
	420, 334, 394, 430, 401, 395, 221, 222, 322, 463,
	465, 205, 596, 323, 324, 325, 455, 326, 327, 328,
	329, 368, 56, 58, 94, 96, 618, 63, 29, 354,
	357, 389, 396, 336, 598, 152, 535, 333, 337, 358,
	25, 412, 380, 416, 415, 48, 49, 50, 53, 54,
	55, 57, 59, 60, 51, 522, 373, 386, 484, 45,
	47, 383, 27, 360, 411, 433, 332, 413, 444, 46,
	442, 443, 464, 26, 362, 361, 62, 44, 419, 421,
	422, 316, 330, 371, 607, 485, 366, 382, 385, 367,
	335, 356, 387, 67, 66, 379, 608, 374, 372, 331,
	540, 541, 338, 565, 352, 428, 519, 518, 517, 516,
	515, 514, 513, 512, 319, 320, 321, 397, 398, 399,
	409, 402, 403, 404, 405, 406, 407, 408, 447, 448,
	609, 466, 468, 469, 467, 235, 619, 353, 238, 611,
	612, 95, 613, 615, 614, 28, -391, -389, -311, 530,
	599, 375, 529, 532, 369, 349, 617, 373, 258, 319,
	320, 321, 445, -198, -311, 619, -164, 39, -211, -311,
	-164, -81, -15, -14, -156, -157, -211, 237, -319, 24,
	427, -89, 428, 233, 82, -311, -9, -101, -8, -108,
	-79, -154, 432, -317, -311, 319, 319, -317, 237, -311,
	268, 408, -443, 243, -395, -368, 269, -394, -370, -397,
	-371, 32, 229, 231, 230, 265, 16, 373, 239, 14,
	13, 374, 251, 25, 26, 28, 15, 375, 377, 29,
	378, 381, 382, 383, 42, 386, 387, 258, 85, 93,
	88, 276, -197, -311, -345, -337, 113, -340, -332, -333,
	-335, -486, -480, -330, 82, 140, 141, 148, 114, -334,
	-425, 36, 116, 546, 585, 495, -286, -287, -288, -289,
	-290, -291, -311, -481, -479, 88, 97, 100, 103, 104,
	102, 101, 152, 184, 99, 89, 153, -157, 85, -502,
	555, -305, 578, 586, 587, 588, 589, 577, 61, -450,
	-459, 236, -457, 151, 189, 254, 185, 14, 146, 420,
	186, 552, 574, 497, 556, 566, 581, 548, 549, 550,
	543, 544, 545, 547, 557, 559, 573, -460, 569, 579,
	580, 565, 582, 583, 584, 615, 87, 86, 572, 571,
	558, 553, 554, 560, 542, 551, 561, 562, 570, 575,
	576, 357, 106, 358, 359, 487, 350, 360, 243, 427,
	70, 361, 362, 363, 364, 365, 494, 366, 71, 367,
	356, 258, 410, 368, 188, 205, 499, 498, 500, 491,
	488, 486, 489, 490, 492, 493, 563, 564, 568, -117,
	-118, 591, -553, -279, -554, 6, 7, 8, 9, -555,
	153, -544, 429, 538, 88, 163, 160, -382, 163, 112,
	168, 167, -382, 322, 264, -359, -147, 347, 410, 326,
	94, 268, -362, -360, 526, -445, 316, 312, 288, 238,
	109, -148, 248, 247, 107, 487, 236, 384, 307, 56,
	58, -518, -519, 226, 227, 228, -509, 520, -508, -311,
	359, 96, 27, 237, 370, 264, 465, 463, 464, 466,
	467, 468, 469, -62, -461, -442, 460, 459, -323, 452,
	458, 450, 462, 453, 348, 328, 327, 229, 611, 527,
	521, -301, 394, 430, 484, 485, 371, 431, 471, 473,
	454, 106, 192, 189, 238, 240, 237, 347, 487, 410,
	94, 326, -518, 160, 471, 473, 268, 408, 41, -388,
	420, -387, -389, 472, 483, 86, 87, 470, -301, 106,
	451, 451, -553, -279, -155, -157, -111, -507, 528, 528,
	528, 238, 347, 410, 268, 239, 237, 523, 526, 240,
	487, 236, 319, 370, 264, 326, 94, -444, -515, 32,
	-451, 223, 224, 225, 33, 34, -1, 120, 620, -337,
	-337, -6, 623, -6, -337, -311, -311, 155, -217, -221,
	-218, -220, -219, -223, -222, 189, 190, 151, 193, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 206, 207,
	204, 31, 205, 254, 185, 186, 187, 188, 208, 171,
	191, 535, 216, 172, 217, 173, 218, 174, 219, 175,
	176, 220, 177, 180, 181, 182, 183, 179, 154, 82,
	154, 88, -180, 260, -211, 154, -180, -553, -173, -174,
	11, -211, -292, -311, 429, 123, -89, -89, 428, -510,
	-511, -512, -514, 233, 428, 427, 154, 276, 17, -317,
	-317, 80, -211, -370, 268, -395, -368, 36, 79, 155,
	241, 155, 79, 82, 371, 347, 410, 372, 487, 237,
	384, 240, 268, 385, 347, 410, 237, 240, 487, 268,
	347, 237, 240, 410, 268, 385, 450, 451, 240, 27,
	376, 379, 380, 451, -465, 483, 155, 112, 109, 110,
	111, -337, 130, -352, 123, 124, 125, 126, 127, 128,
	129, 137, 136, 147, 140, 141, 142, 143, 144, 145,
	146, 138, 139, 133, 113, 131, 135, 132, 115, -157,
	-337, -345, 61, -335, -335, -335, -335, -425, -342, -337,
	82, 82, 82, 154, 101, 88, -337, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, -458,
	82, 82, -349, -350, 82, 82, -330, -292, 82, 88,
	88, 82, 82, 82, 88, -350, -350, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 82, 82, 82, 82, 82, 82,
	-174, 155, -173, 82, -173, -174, -158, -157, 32, 33,
	32, 33, 32, 33, 32, 33, -556, 608, 82, 97,
	618, 221, 476, 537, 166, 167, 168, -196, -311, -198,
	370, 240, 523, 240, -148, -357, 243, -357, -357, -357,
	-357, 239, -357, 24, 237, 237, 237, 237, -357, 494,
	123, 123, 59, -520, 170, 155, -509, -179, 82, -322,
	131, 135, -322, 24, 266, 266, 266, -322, 306, -564,
	-565, 17, 133, -320, -565, -320, -320, -322, -566, 239,
	461, 43, 267, 266, -175, -176, 22, -175, 455, 451,
	-412, 456, 457, -324, -565, -323, -322, -322, -323, -322,
	-322, -322, 32, 237, 240, 487, 326, 612, -564, -564,
	31, 31, -443, -443, -211, -443, 521, -302, -311, -443,
	-443, -443, -521, 242, -550, -549, 474, -552, 476, 160,
	-389, 160, -389, -370, 268, 268, 155, 123, 24, -390,
	123, 134, -389, -389, -390, -390, -234, 41, -310, 151,
	-311, 88, -234, 41, -547, -546, -211, -174, -158, -157,
	83, 83, 83, 531, 531, 531, -443, -443, -443, -443,
	-443, -445, -443, -443, -443, -443, -443, -317, -188, -311,
	-198, 243, -443, -443, -159, -160, 142, -337, -311, -159,
	-3, -126, -125, 117, 118, 120, 602, 365, 601, 605,
	599, -389, 41, -438, 392, 391, -432, -434, 82, -433,
	82, -433, -433, -433, -433, -433, 82, 82, -435, 82,
	-435, -435, -432, -436, 82, -436, -437, 82, -437, -436,
	-311, -343, -345, -311, 39, -454, 61, -154, 82, 31,
	82, -311, -455, 61, -154, 82, 31, -174, -119, 39,
	-176, 21, 154, 97, 88, -89, 83, 155, -513, 103,
	104, -516, 203, 195, -311, -104, 88, -7, -8, -9,
	-10, -46, -79, -154, -482, -480, 82, 32, 419, 79,
	17, -396, 237, 487, 370, 264, 240, 347, -394, -377,
	-374, -372, -310, -370, -373, -372, -399, -292, 451, -120,
	434, 433, 318, -337, -337, -337, -337, -337, 102, 113,
	342, 103, 104, -332, -353, 32, 314, 315, -333, -333,
	-333, -333, -333, -333, -333, -333, -333, -333, -333, -333,
	-341, -351, -425, 82, 133, 131, 135, 132, 115, -335,
	-335, -333, -333, 83, 155, -506, -505, 117, -337, -337,
	-337, -311, -503, -504, 501, 502, 503, 504, 505, 506,
	507, 508, 509, 510, 511, 361, 356, 362, 360, 350,
	368, 363, 364, 188, 518, 519, 512, 513, 514, 515,
	516, 517, -343, -343, -337, -503, -343, -285, 33, 32,
	-345, -345, -345, 83, -337, -517, 340, 339, 341, -177,
	-311, -343, 83, 83, 83, 97, -345, -345, -343, -333,
	-343, -504, -285, -285, -285, -285, 142, -345, -345, -285,
	-285, -285, -285, 142, -285, -285, -285, -285, -285, -285,
	-285, -285, 83, 83, 83, 142, -345, -175, -118, -463,
	-462, -337, 41, -119, -176, -557, 609, 82, -292, -545,
	88, 88, 621, 477, 478, 164, 167, 166, 35, 82,
	-188, -357, -357, -357, -523, -311, 113, -378, -375, -372,
	-311, -311, -368, -311, -311, -211, -357, -357, -357, -357,
	-211, -245, 53, 54, 55, -372, -149, 56, 57, -521,
	-508, 35, -178, -311, -275, 18, -335, -335, -372, 268,
	-564, -322, -322, -303, -302, -324, -319, -324, -324, -275,
	-320, -322, -322, -337, -324, -320, -275, -311, 451, -275,
	-275, -412, -322, -321, -311, -321, -357, -302, -303, -303,
	-211, -211, -256, -261, -257, -262, 260, 234, 354, 355,
	232, 230, 11, 231, -269, 307, -358, 495, -240, -241,
	77, 42, -243, 258, 396, 389, 270, 274, 92, 275,
	429, 276, 239, 278, 279, 280, 295, 297, 250, 281,
	282, 283, 420, 284, 159, 296, 285, 286, 287, 372,
	-235, 6, 329, 41, 51, 52, 443, 442, 540, 537,
	271, -523, -523, 31, 31, -378, -311, -311, -167, -162,
	-166, -163, -168, -278, -280, -165, 82, -211, -157, -311,
	155, 475, 477, 478, -550, -390, -550, -390, 32, 419,
	-393, 419, 32, -368, -387, 471, 473, -383, 88, 420,
	-373, -392, 79, 151, -462, -390, -390, -392, -392, 150,
	155, -548, 476, 477, 226, -175, 97, 97, 97, -213,
	-211, -523, -377, -368, -311, -443, -213, -213, -213, -311,
	-311, 82, 154, 36, -311, -311, -274, 155, -273, 17,
	-312, -311, 35, 88, 154, -274, -127, -125, 119, -337,
	-6, 601, -337, -6, -6, -337, -6, -337, -441, 393,
	97, 97, -294, 88, -294, 97, 97, 97, 83, 88,
	-381, 79, -456, -346, -501, 591, -182, 83, -177, -499,
	-500, -177, -181, -311, -456, -182, 83, -499, -175, 592,
	-119, -172, -171, -337, -311, 24, -89, -511, 154, 155,
	-178, -396, -376, -373, -398, 142, -311, -384, 155, 537,
	624, 86, 241, -537, -536, 411, 83, 155, -466, 242,
	494, 88, 621, 427, 221, 222, 102, 342, 103, 104,
	-425, -345, -341, -335, -335, -333, -333, -339, 255, -339,
	112, -337, -336, -505, 119, -337, 35, 35, 155, 80,
	154, 83, 83, 17, 17, 83, -337, 83, 83, 83,
	83, 17, 17, -337, 83, 154, 83, 83, 83, 83,
	80, 83, 155, 83, 155, -345, -345, -337, -345, 83,
	83, 83, -337, -337, -337, -345, 83, -337, -337, -337,
	-337, -337, -337, -337, -337, -406, 446, -406, -406, 155,
	155, 155, 83, -119, 82, 97, 155, -298, -297, 88,
	165, 168, 168, 167, -197, -199, -200, -201, -202, -203,
	133, 156, 157, 82, -211, -211, -211, -526, 397, 36,
	-538, 155, 41, -536, 487, -145, 318, -361, 80, -152,
	17, 537, -211, -211, -211, -211, -224, 35, 17, -161,
	-212, -311, 82, 83, 155, -337, -369, 80, -311, -303,
	-275, -275, -324, -275, -275, 155, 23, -322, -324, -324,
	-320, 154, -302, -431, 35, -179, 155, 21, 260, -210,
	-308, -207, -209, 245, -327, -208, 248, -495, 246, 244,
	107, 249, 303, 108, 239, -308, -308, 245, -244, 241,
	35, -308, -259, 239, 345, 303, 246, 21, 260, -258,
	239, 108, -311, 245, 249, 246, 244, -307, 123, -301,
	150, 241, 43, 372, -307, 541, 260, -307, -307, -307,
	-307, -307, -307, -307, 277, 277, -307, -307, -307, -307,
	-307, -307, -307, -307, -307, -307, -307, 160, -307, -307,
	-307, -307, -307, -307, 82, 272, 273, -527, 397, 31,
	353, 353, -538, 31, -153, 347, 31, -281, -282, -283,
	-284, 68, 72, 74, 69, 70, 71, 75, 31, 155,
	-309, -313, 35, -311, 88, -309, -157, -162, -167, -309,
	82, -549, -551, 479, 476, 482, -392, -392, 241, 82,
	123, -392, -392, 41, -310, -546, 483, 477, -119, 155,
	79, -213, -189, -190, -191, -192, -217, -292, 190, 193,
	195, 196, 197, 198, 199, 200, 201, 202, 203, 206,
	207, 204, 205, 254, 185, 186, 187, 188, 208, 171,
	191, 535, 172, 173, 174, 175, 176, 177, 180, 181,
	182, 183, 179, -311, -198, -275, -160, -162, -311, 88,
	-311, 142, -275, 120, -6, 118, -131, -130, -129, 121,
	599, 605, 120, 120, 120, 83, 83, 83, 155, 83,
	83, 83, 155, 83, 155, -469, 456, 40, 155, 82,
	83, 155, 61, 155, 123, 83, 155, 83, 61, -119,
	88, 155, -169, 37, 38, 154, 429, -311, -480, 83,
	-398, 155, 241, 154, 154, -374, 375, -310, -376, 21,
	537, -292, 39, -298, 123, 621, -311, 83, -339, -339,
	112, -335, -332, 83, 120, -337, 118, -215, -217, 391,
	392, -215, -216, -222, 151, 189, 254, 188, 187, 185,
	391, 392, -234, -311, -337, -337, 83, -337, -337, 17,
	-311, -234, -333, -337, -174, -174, 83, 83, -405, -406,
	-405, -405, 83, 83, 83, 83, -405, 83, 83, 83,
	83, 83, 83, 83, 83, 82, 97, 100, 97, 100,
	-462, -558, 63, 607, 62, 419, 102, 308, 155, 97,
	622, 155, 123, 168, 383, 83, 155, -292, -189, -179,
	82, -179, -529, 458, 399, 409, -307, -329, -328, 349,
	42, -448, 420, 405, 406, -375, 268, -311, -535, 95,
	123, 79, 333, 337, 334, 335, 336, -355, -356, -354,
	-358, -523, 82, 82, 82, 82, 35, -426, 323, -217,
	-211, -161, -311, 17, 155, -522, 154, -1, -311, -368,
	-322, -275, -337, -337, -275, -322, -322, -324, -311, -426,
	-217, 35, -257, 234, 231, -402, 305, 306, -403, -416,
	308, -418, 82, -214, -292, -208, -494, -495, -357, -311,
	108, -494, 108, 82, -214, -292, -292, -260, -321, -292,
	-311, -311, -311, -311, -265, -264, -292, -267, 32, -268,
	-311, -311, -311, -311, 108, -311, 108, -239, 41, 48,
	49, 50, -307, -307, 192, -242, 41, 419, 421, 422,
	-267, 97, 97, 97, 97, 88, 88, 88, -307, -307,
	97, 88, -313, 88, -496, 167, 45, 46, 97, 97,
	97, 97, 41, 88, -246, 41, 288, 292, 289, 290,
	291, 88, 97, 41, 97, 41, 97, 41, -311, 82,
	-497, -498, 88, -529, -307, 353, -389, 123, -329, -534,
	318, -146, 92, 32, -183, 234, 231, -523, -380, -379,
	-292, -166, -166, -166, -166, 68, 68, 68, 73, 68,
	73, 68, -283, -380, -168, -179, -313, 83, -543, -542,
	-541, -539, 76, 242, 77, -343, 476, 480, 481, -376,
	-325, 88, -383, -187, 24, -211, -211, -447, 298, 299,
	83, 155, -217, -277, 19, 154, -277, 116, -6, -127,
	-129, -337, -6, -337, 601, 365, 602, 88, 97, 97,
	-477, 440, 435, 437, 108, -346, -464, -463, 61, -154,
	-177, -456, -500, -462, -311, 61, -154, -456, -187, -469,
	-171, -170, 44, -311, 97, 17, -373, -368, 142, 142,
	-311, 376, -384, 88, 398, 88, 237, 622, 88, -298,
	-332, -337, 83, -225, 176, 175, -225, 83, 83, -433,
	-433, -432, -435, -432, -225, -225, 83, 83, 24, 83,
	83, 83, -337, 83, 83, 155, -452, 496, -453, 567,
	-405, -405, -405, -405, -405, -405, -405, -405, -405, -405,
	-405, -405, -405, -405, -348, -347, 260, 441, 614, 614,
	441, 614, 614, 83, 155, -503, 155, -297, 88, 88,
	88, -201, -217, 83, 35, -204, -205, -206, -214, -207,
	-209, 35, -530, 92, -524, 88, -311, -531, 92, 400,
	153, 351, 41, 401, 402, 417, 346, 97, 97, 407,
	-525, -311, -153, -533, 52, 123, 88, -211, -354, -301,
	150, 279, 326, -272, -271, -311, 88, -204, -204, -204,
	-154, -427, 325, 21, 97, 141, -180, 80, 154, -162,
	-212, -311, 142, 83, -275, -275, -275, -322, -427, -154,
	-414, 309, 82, -412, 82, -412, 108, 334, -419, -417,
	260, -263, 45, 47, -217, -492, -311, -490, -492, -311,
	-490, -490, -357, -337, -263, -214, 241, 31, 231, -266,
	331, 332, 337, -385, 304, 113, -385, 155, -169, 155,
	-311, -234, -234, 31, 88, 88, -213, 83, 155, 123,
	-530, -524, 123, -390, 88, -531, -535, 123, 88, 155,
	-183, -183, -275, 155, 123, -185, -184, 79, 80, -186,
	79, -184, 68, 68, -275, -541, -540, 24, -495, -495,
	-495, 83, 83, 15, -191, 41, -276, 20, 21, 142,
	-276, 120, 118, 120, 120, -311, 83, 83, -439, 593,
	-473, -475, 435, 21, 21, 15, 242, 83, -456, -456,
	-477, 45, 46, -368, -384, 420, -211, 155, 622, -337,
	83, -337, 83, 88, 83, 88, -174, 21, 83, 83,
	83, 83, 83, 83, -337, 83, -503, 235, -154, 83,
	155, -154, 88, -528, 411, 88, 88, 97, 41, 97,
	153, 403, -449, -146, -532, 92, 123, 621, 82, -307,
	-307, -307, -311, 83, 155, -307, -307, 83, 83, 83,
	-232, 537, -428, 259, 97, 141, 97, 141, 97, -309,
	-162, -311, -275, -522, 154, -275, -428, -404, 310, 97,
	-333, 82, -333, 82, -413, 307, 82, 83, 155, -311,
	-292, -229, -228, -226, 102, 113, 41, 389, -227, 92,
	150, 293, 296, 295, 271, 294, -255, -326, 79, 395,
	331, 332, -358, 593, 525, 244, 107, 108, 377, -327,
	82, 82, 80, 313, 82, 82, -492, 83, -263, -292,
	41, -266, 41, 343, 304, -264, -311, 150, -234, 83,
	-498, 88, -528, 88, -392, -533, 88, -523, -174, -379,
	-462, -337, 82, -337, 82, 68, 11, 19, -330, 152,
	-337, -345, 243, -6, 602, 365, -248, 594, 88, 21,
	88, -471, 88, -380, -439, -122, -467, -412, 276, 83,
	83, -405, -405, -408, -407, -411, 441, 305, 449, -345,
	83, 83, -193, -217, -150, 537, -232, -206, -150, 21,
	537, 350, 41, 97, 41, 404, 123, 103, 104, -299,
	-300, 88, -363, -365, -292, 82, -234, -236, -310, 151,
	88, -271, -330, -330, -230, -231, -269, -358, -121, -120,
	-230, 82, -429, 159, 97, 141, 97, 97, -275, -275,
	-429, -418, 21, 83, -399, 83, -399, 82, 123, -333,
	-417, -420, 61, -226, 102, -333, 88, -236, -237, 41,
	292, 288, 123, 123, -238, 41, 272, 273, -247, 82,
	303, 15, 192, 82, 108, 108, -211, -363, -363, -493,
	333, 334, 335, 338, 337, 336, -493, -363, -363, 82,
	-386, -385, -333, -307, -307, 150, -532, -175, -178, -491,
	-311, 244, 21, 21, -311, -311, -295, 595, 97, 88,
	437, -248, -440, 596, -476, 440, -470, -468, 435, 436,
	437, 438, 123, 83, -410, 115, 403, 407, -331, -334,
	97, 100, 184, 153, 536, -151, 60, 483, 88, 398,
	88, 350, 88, 622, 155, 123, 83, 155, -432, -337,
	-400, 260, 155, -269, -301, -122, -400, -233, -270, -311,
	88, -446, 167, 324, 537, 97, 141, 97, -174, -430,
	167, 324, -403, 83, 83, 83, -399, 97, 83, -424,
	-421, 82, -269, 262, 133, 88, 88, 97, 82, -457,
	31, 88, -364, 82, 83, 83, 83, 83, -363, 97,
	-234, -307, 83, 83, 155, 82, 21, -295, 88, -478,
	242, -474, -475, 439, -468, 21, 437, 21, 21, 88,
	-409, -410, 407, -331, -334, 591, 447, 447, 447, -195,
	-311, 303, 420, -300, 88, -366, -365, -169, 83, -401,
	312, 21, -269, -307, -401, 83, 155, -307, -307, 324,
	97, 141, 97, -175, 324, -415, 311, 83, -424, -269,
	-423, -422, 310, 263, 82, 83, -337, -349, -307, 83,
	-250, -249, 533, -363, -366, 80, -366, 80, -366, 80,
	-366, 80, 83, -234, -311, 244, -296, -311, -471, -485,
	82, 97, -473, -472, -474, 21, -471, 21, -471, -471,
	-123, 155, 112, 448, 448, 448, -194, 35, 442, 376,
	-367, 250, 343, 344, 92, 537, 331, 332, -169, 21,
	-402, -234, -270, -330, -330, 97, 97, 83, 155, -311,
	259, 82, -344, -338, -337, 259, 83, -311, -254, -252,
	-253, 79, 454, 301, 302, 83, -493, -493, -493, -493,
	-255, 83, 155, -489, 31, 83, -484, -483, -293, -479,
	-311, 440, 441, 88, -471, 444, -409, 88, -307, -307,
	88, 88, 330, -292, 82, -414, -422, -421, -344, 83,
	155, -385, -253, 79, -252, 79, 16, 15, -366, -366,
	-366, -366, -311, -488, -487, -486, 83, 155, 154, 123,
	-561, -560, 613, 97, 97, -311, -399, -404, 83, -338,
	-251, 298, 299, 31, 167, -251, 155, 123, -483, -311,
	88, 88, 83, -418, 102, 41, 300, -487, 41, -337,
	154, -311,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 0,
	263, 264, 265, 854, 855, 856, 857, 858, 859, 0,
	0, 0, 0, 613, 614, 0, 580, 0, 0, 0,
	0, 0, 0, 470, 471, 472, 473, 474, 475, 476,
	477, 478, 479, 480, 481, 482, 483, 484, 485, 486,
	487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
	497, 498, 499, 354, 355, 356, 357, 358, 359, 360,
	361, 0, 288, 284, 209, 210, 211, 212, 213, 295,
	296, 447, 0, 0, 0, 0, 695, -2, 56, 0,
	277, 0, 268, 268, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, -2, 626, 0,
	581, 582, 583, 584, 585, 586, 587, 588, 589, 590,
	591, 592, 593, 594, 343, 344, 345, 339, 340, 342,
	341, -2, 0, 626, 0, 0, 0, 703, 0, 0,
	0, 0, 0, 746, 768, 23, 0, 7, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 0, 0,
	19, 0, 19, 0, 0, 0, 1245, 1246, 1247, 1248,
	2014, 1984, -2, 1759, 1736, 1910, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
	2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
	2087, 2088, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700,
	1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710,
	1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720,
	1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730,
	1731, 1732, 1733, 1734, 1735, 1737, 1738, 1739, 1740, 1741,
	1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751,
	1752, 1753, 1754, 1755, 1756, 1757, 1758, 1760, 1761, 1762,
	1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
	1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
	1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,
	1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
	1823, 1824, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833,
	1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
	1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853,
	1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 1873,
	1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881, 1882, 1883,
	1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
	1935, 1936, 1937, 1938, 1939, 1940, -2, 1942, 1943, 1944,
	1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
	1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
	1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
	1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1985,
	1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
	1996, 1997, 1998, 1999, -2, -2, -2, 2003, 2004, 2005,
	2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016,
	2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026,
	2027, 2028, 2029, 2030, 2031, 2032, 0, 261, 259, 1706,
	1736, 1759, 1813, 1824, 1825, 1859, 1910, 1941, 1984, 2000,
	2001, 2002, 2014, 0, 877, 0, 673, 0, 678, 1198,
	673, 289, 615, 616, 703, 729, 578, 0, 325, 0,
	1750, 329, 1991, 0, 0, 575, 319, 320, 321, 322,
	323, 324, 0, 0, 853, 0, 0, 315, 0, 283,
	1815, 2013, 0, 0, 0, 0, 0, 153, 987, 155,
	989, 159, 166, 0, 0, 171, 172, 175, 176, 177,
	178, 179, 0, 183, 0, 185, 188, 0, 190, 191,
	0, 194, 195, 196, 0, 206, 207, 208, 990, 991,
	992, -2, 84, 875, 1664, 1551, 0, 1558, 1571, 1582,
	1325, 1326, 1327, 1328, 0, 0, 0, 0, 0, 1335,
	1336, 0, 1360, 2047, 2088, 0, 1343, 1344, 1345, 1346,
	1347, 1348, 93, 105, 106, 1604, 1605, 1606, 1607, 1608,
	1609, 1610, 1920, 1612, 1613, 1614, 1522, 1312, 1245, 0,
	2056, 0, 2078, 2083, 2084, 2085, 2086, 2077, 0, 0,
	1507, 0, 1497, 0, 0, -2, -2, 0, 0, 1884,
	-2, 2053, 2074, 2082, 2057, 2058, 2081, 2049, 2050, 2051,
	2044, 2045, 2046, 2048, 2060, 2062, 2073, 0, 2069, 2079,
	2080, 1989, 0, 0, 0, 2030, 107, 108, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1518, -2, -2, 1521, -2,
	1524, -2, -2, -2, -2, 1529, 1530, -2, 1532, -2,
	-2, -2, -2, -2, -2, -2, 1509, 1510, 1511, 1512,
	1501, 1502, 1503, 1504, 1505, 1506, -2, -2, -2, 729,
	804, 0, 729, 0, 704, 751, 754, 757, 760, 707,
	0, 0, 57, 58, 0, 278, 279, 267, 269, 0,
	273, 0, 266, 0, 0, 0, 0, 1022, 1022, 1022,
	1022, 1022, 0, 1022, 0, 0, 0, 0, 0, 1022,
	0, 910, 994, 995, 996, 1020, 1021, 1086, 0, 0,
	0, 631, 627, 628, 629, 630, 717, 0, 719, 722,
	555, 555, 502, 0, 0, 0, 555, 0, 516, 508,
	0, 0, 0, 555, 0, 0, 724, 724, 0, 558,
	565, 555, 555, -2, 555, 555, 555, 0, 0, 1034,
	522, 523, 524, 508, 508, 527, 528, 529, 539, 540,
	566, 1688, 0, 0, 447, 447, 0, 447, 0, 447,
	447, 447, 633, 1854, 1757, 1830, 1815, 2013, 0, 234,
	1884, 239, 0, 1758, 1777, 0, 0, 1795, 0, -2,
	0, 305, 729, 0, 0, 703, 0, 0, 0, 0,
	0, 447, 447, 447, 447, 447, 1085, 447, 447, 447,
	447, 447, 0, 0, 0, 447, 447, 0, 0, 769,
	770, 765, 766, 767, 771, 772, 5, 6, 19, 0,
	0, 0, 0, 0, 0, 63, 62, 0, 1665, 1683,
	1617, 1618, 1619, 1670, 1621, 1674, 1674, 1674, 1674, 1650,
	1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1674, 1674,
	0, 0, 1663, 1641, 1672, 1672, 1672, 1670, 1667, 1622,
	1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
	1633, 1634, 1635, 1677, 1677, 1680, 1680, 1677, 0, 1547,
	0, 0, 0, 0, 677, 0, 0, 729, -2, 0,
	0, 579, 326, 1249, 0, 0, 330, 331, 0, 0,
	346, 0, 349, 334, 335, 336, 0, 133, 0, 317,
	318, 0, 0, 285, 0, 0, 0, 448, 0, 0,
	0, 0, 0, 0, 163, 160, 167, 170, 180, 187,
	0, 199, 201, 204, 161, 168, 173, 174, 181, 202,
	162, 164, 165, 169, 203, 205, 182, 186, 200, 184,
	189, 192, 193, 198, 0, 134, 0, 0, 0, 0,
	0, 1557, 0, 0, 1590, 1591, 1592, 1593, 1594, 1595,
	1596, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -2,
	1551, 0, 0, 1331, 1332, 1333, 1334, 1337, 0, 1361,
	0, 0, 0, 0, 1611, 1615, 0, 1547, 1547, 0,
	1547, 1543, 0, 0, 0, 0, 0, 0, 1547, 1483,
	0, 0, 1485, 1498, 0, 0, 1487, 1488, 0, 1491,
	1492, 1547, 0, 1547, 1496, 1479, 1480, 0, 1543, 1543,
	1543, 1543, 0, 0, 1543, 1543, 1543, 1543, 1543, 1543,
	1543, 1543, 1543, 1543, 1543, 1543, 0, 0, 0, 0,
	724, 0, 730, 0, -2, 0, 748, 750, 752, 753,
	755, 756, 758, 759, 761, 762, 709, 0, 0, 59,
	0, 0, 0, 0, 271, 0, 276, 0, 874, 0,
	0, 1022, 1022, 1022, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1022, 1022, 1022, 1022, 0, 1040,
	0, 0, 0, 633, 632, 0, 718, 0, 0, 777,
	0, 0, 501, 0, 508, 555, 555, 514, 515, 510,
	509, 561, 562, 558, 0, 558, 558, 777, 0, 533,
	534, 535, 555, 555, 541, 725, 0, 542, 543, 558,
	0, 563, 564, 777, 0, 0, 777, 777, 0, 551,
	552, 553, 555, 0, 0, 1022, 0, 571, 510, 510,
	1689, 1690, 0, 0, 1031, 0, 0, 0, 574, 0,
	0, 0, 0, 634, 214, 217, 0, 220, 0, 1854,
	0, 1854, 0, 227, 0, 0, 0, 0, 0, 0,
	257, 258, 0, 0, 0, 0, 248, 251, 1192, 1193,
	984, 985, 252, 253, 297, 298, 0, 724, 747, 749,
	743, 744, 745, 0, 0, 0, 0, 0, 0, 0,
	0, 447, 0, 0, 0, 0, 0, 609, 0, 890,
	611, 0, 0, 0, 785, 779, 781, 848, 93, 785,
	8, 80, 77, 0, 19, 0, 0, 19, 19, 0,
	19, 262, 0, 1686, 1684, 1685, 1620, 1671, 0, 1646,
	0, 1647, 1648, 1649, 1659, 1660, 0, 0, 1642, 0,
	1643, 1644, 1645, 1636, 0, 1637, 1638, 0, 1639, 1640,
	260, 0, 1548, 878, 0, 651, 665, 646, 0, 654,
	0, 1199, 635, 665, 637, 0, 654, 724, 701, 0,
	679, 0, 0, 327, 0, 332, 0, 0, 348, 350,
	351, 352, 337, 338, 576, 313, 314, 306, 307, 308,
	309, 310, 311, 312, 316, 103, 0, 286, 287, 0,
	0, 0, 147, 148, 149, 150, 151, 152, 154, 138,
	598, 600, 976, 988, 0, 979, 0, 157, 197, 130,
	0, 0, 0, 1552, 1553, 1554, 1555, 1556, 1561, 0,
	1563, 1565, 1567, 1569, 0, 1587, -2, -2, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
	1572, 1585, 1586, 0, 0, 0, 0, 0, 0, 1583,
	1583, 1578, 0, 1329, 0, 1358, 1362, 0, 0, 0,
	0, 94, 1542, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 0, 0, 1551, 0, 0, 0, 1544, 1545,
	0, 0, 0, 1438, 0, 0, 1444, 1445, 1446, 0,
	660, 0, 1508, 1484, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 803, 805, 0,
	669, 671, 672, 698, 679, 705, 0, 0, 0, 55,
	60, 53, 1055, 280, 281, 0, 0, 275, 0, -2,
	0, 0, 0, 0, 0, 925, 0, 445, 970, 0,
	0, 0, 986, 1011, 1018, 0, 0, 0, 0, 0,
	1059, 912, 917, 918, 919, 913, 914, 920, 921, 0,
	720, 0, 0, 817, 500, 0, 556, 557, 505, 1815,
	510, 777, 777, 517, 511, 518, 560, 519, 520, 521,
	558, 777, 777, 726, 555, 558, 544, 559, 558, 547,
	548, 0, 554, 567, 572, 568, 0, 570, 525, 526,
	1061, 722, 364, 365, 366, 368, 0, 416, 416, 416,
	399, 416, 0, 0, 387, 1691, 0, 0, 0, 0,
	396, 1691, 0, 0, 1691, 1691, 1691, 1691, 1691, 1691,
	1691, 0, 0, 1691, 1691, 1691, 1691, 1691, 1691, 1691,
	1691, 1691, 1691, 1691, 0, 1691, 1691, 1691, 1691, 1691,
	1178, 1691, 0, 1032, 406, 407, 408, 409, 414, 415,
	0, 442, 0, 0, 0, 445, 0, 959, 790, 0,
	791, 792, 788, 819, 843, 843, 0, 843, 823, 1198,
	0, 0, 225, 226, 215, 0, 216, 0, 228, 229,
	0, 231, 232, 233, 240, 1757, 1830, 235, 237, 0,
	0, 241, 254, 255, 256, 0, 0, 246, 247, 0,
	0, 300, 301, 303, 0, 679, 1035, 1036, 1037, 595,
	1196, 596, 597, 601, 0, 0, 604, 605, 606, 607,
	608, 892, 0, 0, 964, 965, 777, 0, 786, 0,
	782, 849, 0, 851, 0, 777, 0, 78, 19, 0,
	71, 68, 0, 0, 0, 0, 0, 1666, 1616, 1687,
	0, 0, 0, 1668, 0, 0, 0, 0, 61, 681,
	642, 0, 645, 662, 0, 666, 0, 0, 658, 650,
	655, 0, 0, 675, 636, 0, 0, 641, 679, 0,
	702, 731, 732, 735, 1250, 0, 333, 347, 0, 0,
	0, 0, 141, 973, 0, 142, 146, 136, 0, 0,
	0, 978, 0, 975, 980, 0, 156, 0, 0, 131,
	132, 1046, 1055, 0, 0, 0, 1562, 1564, 1566, 1568,
	1570, 0, 1573, 1583, 1583, 1579, 0, 1574, 0, 1576,
	0, 1552, 0, 1363, 0, 0, 0, 0, 0, 0,
	0, 1428, 1429, 0, 0, 1433, 0, 1435, 1436, 1437,
	1439, 0, 0, 0, 1443, 0, 1482, 1500, 1486, 1489,
	0, 1493, 0, 1495, 0, 729, 729, 0, 0, 1402,
	1402, 1402, 0, 0, 0, 0, 1402, 0, 0, 0,
	0, 0, 0, 0, 0, 1349, 0, 1350, 1351, 0,
	0, 0, 806, 699, 0, 0, 0, 0, 1053, 0,
	282, 270, 272, 0, 0, 0, 880, 881, 883, 0,
	886, 887, 888, 892, 722, 0, 722, 932, 1691, 1023,
	449, 0, 0, 972, 0, 948, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 1063, 0, 0, 0,
	620, 624, 23, 723, 0, 778, 503, 0, 504, 555,
	512, 513, 777, 536, 537, 0, 0, 777, 555, 555,
	558, 0, 569, 1063, 0, 0, 1031, 1129, 1097, 377,
	0, 1207, 1208, 417, 0, 1214, 1223, 1022, 1282, 0,
	1223, 0, 0, 1225, 1226, 0, 0, 0, 0, 400,
	401, 0, 386, 0, 0, 0, 0, 0, 0, 385,
	0, 0, 427, 0, 0, 0, 0, 0, 1692, 1691,
	1691, 0, 394, 395, 0, 398, 0, 0, 0, 0,
	0, 0, 0, 0, 1691, 1691, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1169, 0, 0,
	0, 0, 0, 0, 0, 1184, 1185, 932, 1691, 0,
	0, 0, 449, 946, 955, 0, 0, 0, 0, 0,
	0, 810, 0, 0, 809, 0, 0, 0, 0, 0,
	722, 844, 0, 846, 847, 821, -2, 0, 790, 826,
	1547, 218, 219, 0, 0, 224, 242, 244, 0, 0,
	0, 243, 245, 249, 250, 299, 302, 304, 741, 0,
	0, 1087, 0, 893, 894, 896, 897, 0, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1741, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 891, 612, 775, 780, 787, 850, 852,
	94, 783, 775, 0, 81, 19, 80, 72, 73, 0,
	19, 0, 0, 0, 0, 1676, 1675, 1661, 0, 1662,
	1673, 1678, 0, 1681, 0, 685, 0, 0, 665, 667,
	0, 0, 665, 0, 0, 674, 0, 0, 665, 741,
	681, 0, 738, 736, 737, 0, 0, 577, 104, 353,
	0, 0, 0, 0, 0, 599, 0, 977, 138, 0,
	0, 158, 0, 0, 0, 1055, 1050, 1546, 1575, 1577,
	0, 1584, 1580, 1330, 1338, 1359, 0, 0, 1365, 1377,
	1377, 0, 0, 1368, 1674, 1674, 1371, 1670, 1672, 1670,
	1377, 1377, 0, 95, 0, 0, 1434, 0, 0, 0,
	661, 0, 0, 0, 1398, 1400, 1402, 1402, 1409, 1403,
	1410, 1411, 1402, 1402, 1402, 1402, 1416, 1402, 1402, 1402,
	1402, 1402, 1402, 1402, 1402, 1396, 0, 0, 1605, 1606,
	670, 0, 0, 712, 713, 714, 715, 716, 0, 0,
	54, 1055, 0, 274, 0, 0, 885, 0, 0, 0,
	1200, 0, 936, 933, 934, 935, 0, 967, 450, 451,
	452, 453, 0, 0, 0, 971, 0, 959, 941, 0,
	0, 0, 1012, 1013, 1014, 1015, 1016, 1017, -2, 1026,
	0, 0, 0, 1200, 1200, 1200, 0, 1071, 0, 1060,
	673, 0, -2, 0, 0, 622, 0, 0, 818, 506,
	777, 530, 727, 728, 545, 777, 777, 555, 573, 1071,
	1062, 0, 367, 416, 0, 1117, 0, 0, 1123, 0,
	1130, 370, 0, 418, 0, 1213, 1239, 1224, 1239, 1283,
	1239, 1239, 1022, 0, 418, 0, 0, 388, 424, 0,
	0, 0, 0, 0, 384, 421, 735, 371, 373, 374,
	375, 425, 426, 428, 0, 430, 431, 390, 402, 403,
	404, 405, 0, 0, 0, 397, 410, 411, 412, 413,
	372, 1146, 1147, 1148, 1151, 1152, 1153, 1154, 0, 0,
	1157, 1158, 1159, 1160, 1161, 1236, 1237, 1238, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1186, 1187, 1188, 1189, 1190,
	1191, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 0,
	0, 1181, 0, 936, 0, 0, 0, 0, 967, 948,
	0, 958, 0, 960, 961, 0, 0, 643, 777, 292,
	0, 813, 807, 0, 796, 811, 812, 799, 0, 801,
	0, 797, 798, 777, 789, 820, 845, 822, 825, 827,
	828, 834, 0, 0, 0, 0, 221, 222, 223, 230,
	0, 469, 236, 697, 0, 1197, 602, 603, 1088, 1089,
	610, 0, 898, 773, 0, 0, 773, 76, 79, 0,
	74, 0, 0, 0, 0, 66, 64, 1669, 0, 0,
	687, 118, 0, 0, 0, 663, 0, 668, 665, 649,
	659, 648, 656, 657, 676, 665, 640, 639, 700, 685,
	733, 734, 0, 1251, 328, 0, 974, 138, 143, 144,
	145, 139, 137, 981, 0, 983, 0, 1048, 0, 0,
	1581, 1364, 1339, 1366, 1378, 1379, 1367, 1340, 1341, 1369,
	1370, 1372, 1373, 1374, 1375, 1376, 1342, 1430, 0, 1432,
	1440, 1441, 0, 1490, 1494, 0, 0, 0, 0, 0,
	1407, 1408, 1412, 1413, 1414, 1415, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 729, 1397, 0, 0, 0, 0,
	0, 0, 0, 710, 0, 0, 0, 1054, 1056, 873,
	876, 882, 884, 0, 0, 0, 1201, 1202, 1204, 1205,
	1206, 0, 909, 0, 0, 927, 928, 938, 0, 0,
	0, 455, 456, 0, 0, 0, 468, 464, 465, 466,
	446, 966, 955, 944, 0, 0, 954, 0, 1027, 1691,
	1691, 1691, 0, 0, 1131, 1691, 1691, 0, 0, 0,
	1135, 1074, 0, 0, 1065, 0, 843, 0, 0, 777,
	621, 624, 625, 721, 507, 549, 546, 777, 1074, 363,
	1095, 0, 0, 0, 0, 0, 1127, 0, 0, 1099,
	0, 389, 419, 0, -2, 0, 1240, 0, 1227, 1240,
	0, 0, 1239, 0, 378, 418, 0, 0, 0, 432,
	436, 437, 0, 434, 1278, 0, 435, 0, 423, 0,
	429, 1149, 1150, 0, 1155, 1156, 0, 1180, 0, 0,
	438, 0, 0, 0, 439, 444, 941, 0, 956, 0,
	962, 963, 729, 0, 0, 793, 814, 0, 0, 794,
	0, 795, 800, 802, 291, 829, 0, 0, 831, 832,
	833, 824, 238, 742, 895, 0, 763, 0, 0, 784,
	764, 0, 19, 0, 0, 69, 1679, 1682, 689, 0,
	686, 119, 0, 0, 0, 0, 653, 664, 647, 638,
	687, 739, 740, 140, 135, 982, 121, 0, 1049, 0,
	1442, 0, 1402, 1399, 1402, 1401, 1393, 0, 1352, 1353,
	1354, 1355, 1356, 1357, 0, 708, 0, 0, 915, 1135,
	0, 915, 937, 926, 0, 968, 969, 0, 457, 458,
	0, 461, 467, 939, 940, 0, 0, 952, 0, 0,
	0, 0, 1019, 1033, 0, 0, 0, -2, 0, -2,
	1044, 0, 1080, 0, 1072, 0, 1064, 0, 1067, 777,
	777, -2, 618, 623, 0, 550, 1080, 1097, 0, 1118,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 1111,
	420, 1241, -2, 1254, 1256, 0, 1032, 1259, 1260, 0,
	0, 0, 0, 0, 0, 1304, 1268, 0, 0, 1272,
	1273, 1274, 0, 0, 1277, 0, 1599, 1600, 0, 1281,
	0, 0, 0, 0, 0, 0, 0, 1221, 379, 380,
	0, 382, 383, 1691, 1279, 422, 376, 1691, 392, 1179,
	1182, 1183, 443, 440, 441, 944, 947, 644, 724, 293,
	294, 815, 0, 808, 838, 835, 0, 0, 899, 0,
	774, 776, 70, 75, 0, 0, 691, 0, 688, 0,
	682, 684, 129, 652, 689, 91, 112, 0, 0, 1431,
	1481, 1405, 1406, 0, 1394, 0, 1388, 1389, 1390, 1395,
	711, 706, 0, 901, 908, 922, 1038, 1203, 907, 0,
	0, 454, 459, 0, 462, 463, 0, 942, 943, 0,
	950, 0, 0, 1007, 1670, 0, 1028, 1029, 1194, 1195,
	1030, 1132, 1133, 1134, 1090, -2, 1143, 0, 1042, 121,
	1090, 0, 1068, 0, 1075, 0, 1073, 1066, 729, 619,
	1077, 369, 1129, 1119, 0, 1121, 0, 0, 0, 0,
	1100, -2, 0, 1255, 1257, 1258, 1261, 1262, 1263, 1309,
	1310, 1311, 0, 0, 1266, 1306, 1307, 1308, 1267, 0,
	0, 0, 0, 0, 1597, 1598, 1302, 0, 0, 1228,
	1230, 1231, 1232, 1233, 1234, 1235, 1229, 0, 0, 0,
	1220, 1222, 381, 0, 0, 1691, 957, 290, 0, 0,
	839, 841, 836, 837, 65, 67, 82, 0, 690, 120,
	0, 691, 83, 0, 109, 0, 122, 123, 0, 0,
	0, 0, 0, 1404, 1391, 0, 0, 0, 0, 0,
	1601, 1602, 1603, 0, 0, 0, 923, 924, 929, 0,
	931, 460, 945, 949, 952, 0, 998, 0, 735, 0,
	1092, 0, 1031, 1145, 1691, 1045, 1092, 0, 1137, 1691,
	1691, 1058, 0, 1070, 0, 1082, 0, 1076, 724, 362,
	0, 1079, 1115, 1120, 1122, 1124, 0, 1128, 1126, 1101,
	-2, 0, 1109, 0, 0, 1264, 1265, 0, 0, 1497,
	1691, 0, 1297, 0, 998, 998, 998, 998, 0, 433,
	391, 0, 816, 830, 0, 0, 0, 680, 92, 96,
	0, 118, 115, 0, 124, 0, 0, 0, 0, 1051,
	0, 1380, 0, 0, 0, 1384, 1385, 1386, 1387, 0,
	900, 0, 930, 951, 953, 997, 1008, 1009, 735, 1041,
	0, 1129, 1144, 0, 1043, 1136, 0, 0, 0, 1069,
	1081, 0, 1084, 617, 1078, 1096, 0, 1125, 1102, 1110,
	0, 1105, 0, 0, 0, 1305, 0, 1271, 0, 1276,
	1285, 1298, 0, 0, 1209, 0, 1211, 0, 1215, 0,
	1217, 0, 0, 393, 840, 842, 0, 693, 683, 85,
	0, 0, 113, 114, 116, 0, 125, 0, 127, 128,
	1047, 0, 0, 1381, 1382, 1383, 0, 902, 903, 916,
	999, 1691, 1691, 0, 0, 0, 1005, 1006, 1010, 0,
	1117, 1149, 1138, 1139, 1140, 1083, 1116, 1104, 0, -2,
	1112, 0, 0, 1549, 1559, 1560, 1269, 1275, 1284, 1286,
	1287, 0, 1299, 1300, 1301, 1303, 998, 998, 998, 998,
	1219, 692, 0, 1057, 0, 97, 0, 99, 101, 102,
	1242, 110, 111, 117, 126, 0, 1392, 904, 0, 0,
	1002, 1003, 0, 1093, 0, 1095, 1106, -2, 0, 1114,
	0, 1270, 1288, 0, 1289, 0, 0, 0, 1210, 1212,
	1216, 1218, 694, 86, 87, 0, 98, 0, 0, 0,
	889, 905, 0, 1000, 1001, 1004, 0, 1097, 1113, 1550,
	1290, 1292, 1293, 0, 0, 1291, 0, 0, 100, 1243,
	1052, 906, 1094, 1091, 1294, 1296, 1295, 88, 89, 90,
	0, 1244,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 114, 3, 3, 3, 145, 137, 3,
	82, 83, 142, 140, 155, 141, 154, 143, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 623, 620,
	124, 123, 125, 3, 624, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 147, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 621, 136, 622, 148,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	115, 116, 117, 118, 119, 120, 121, 122, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 138, 139,
	144, 146, 149, 150, 151, 152, 153, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:796
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:803
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:809
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:817
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:823
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:827
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:842
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:846
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:852
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:857
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:861
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:901
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      false,
				Dir:       yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:909
		{
			yyLOCAL = &tree.BackupStart{
				Timestamp: yyDollar[2].str,
				IsS3:      true,
				Option:    yyDollar[5].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:919
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:939
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:945
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:952
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:960
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:966
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:975
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:985
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:993
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().ToLower()),
			}
		}
		yyVAL.union = yyLOCAL
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 65:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1009
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1019
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1027
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1037
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1044
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().ToLower()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1053
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1063
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1067
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1073
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1077
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1083
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1092
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1102
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1106
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1112
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1121
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1125
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1131
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1152
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1165
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1172
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1176
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1182
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1186
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1199
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1207
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1211
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1225
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1229
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1233
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1242
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1246
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1252
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1261
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1272
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1276
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1282
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1286
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1292
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1296
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1302
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarExpr{
				Name:   r,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1326
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            return 1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1345
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1349
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1353
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1358
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1362
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[2].str,
				TerminatedBy: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1369
		{
			yyLOCAL = &tree.Lines{
				StartingBy:   yyDollar[3].str,
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1377
		{
			yyVAL.str = ""
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1384
		{
			yyVAL.str = yyDollar[3].str
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1389
		{
			yyVAL.str = "\n"
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1396
		{
			yyVAL.str = yyDollar[3].str
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1401
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1405
		{
			res := &tree.Fields{
				Terminated: "\t",
				EscapedBy:  0,
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != "" {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != 0 {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != 0 {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1429
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1433
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1445
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1463
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1480
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1503
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1507
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1511
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1516
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1520
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1526
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1539
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1550
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1563
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1567
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1577
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1590
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1603
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1609
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1615
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1622
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  yyDollar[1].cstrUnion().Compare(),
				TabName: yyDollar[3].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:1630
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: yyDollar[1].cstrUnion().Compare(),
			}
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1639
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1643
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1647
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1651
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1655
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:1659
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1666
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:1670
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1676
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:1683
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1692
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:1696
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1702
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1706
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1710
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1714
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1718
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1722
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1726
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1730
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1734
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1738
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1742
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1746
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1750
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1754
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1758
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1762
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1766
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1770
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1774
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1778
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1782
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1786
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1790
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1794
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1798
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1802
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1806
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1810
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1814
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1818
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1822
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1826
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1830
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1834
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1838
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1842
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1846
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1850
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1854
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1858
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1862
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1866
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1870
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1874
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1878
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1882
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1886
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1890
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1894
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:1898
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1911
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1918
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1925
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1935
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:1939
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1945
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:1952
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1960
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1964
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1968
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:1972
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1978
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:1982
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1988
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1995
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2002
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2011
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2041
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2045
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2049
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2055
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2061
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2065
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2072
		{
			yyVAL.str = yyDollar[3].str
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2078
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2082
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2088
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2096
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2105
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2114
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2122
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2130
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2153
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				return 1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2176
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2183
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2190
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumValWithType(constant.MakeString(yyDollar[4].str), yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2198
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2205
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2212
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2221
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2225
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2229
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2235
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2239
		{
			yyVAL.str = yyDollar[1].str
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2245
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2249
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2255
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2259
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2270
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2276
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2281
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2285
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2289
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2293
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2297
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2301
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2305
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2309
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2313
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2319
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2323
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2327
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2331
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2336
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2341
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2347
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Name:          yyDollar[2].cstrUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2354
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2360
		{
			yyLOCAL = &tree.Use{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2367
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.Use{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2384
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2391
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2402
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].joinTableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2413
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2417
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2423
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2433
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2439
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2443
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2449
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2455
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2459
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2463
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2467
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2473
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2485
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2491
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 314:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2495
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2501
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2505
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2511
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2517
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2528
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2534
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2538
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2542
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2546
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2550
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2554
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2562
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2570
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2580
		{
			if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2621
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:2625
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:2631
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2637
		{
			yyVAL.str = yyDollar[1].str
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2642
		{
			yyVAL.str = "true"
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2643
		{
			yyVAL.str = "false"
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2644
		{
			yyVAL.str = yyDollar[1].str
		}
	case 353:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2649
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.AlterSequence{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].alterTypeOptionUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].cycleOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.AlterView{
				Name:     yyDollar[4].tableNameUnion(),
				ColNames: yyDollar[5].identifierListUnion(),
				AsSource: yyDollar[7].selectUnion(),
				IfExists: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2692
		{
			yyLOCAL = &tree.AlterTable{
				Table:   yyDollar[3].tableNameUnion(),
				Options: yyDollar[4].alterTableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2699
		{
			yyLOCAL = &tree.AlterTable{
				Table:            yyDollar[3].tableNameUnion(),
				PartitionOptions: yyDollar[4].alterPartitionOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2708
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:2712
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2718
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2722
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			partitionDef := &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
			opt := &tree.AlterPartitionRedefinePartitionClause{
				PartitionOption: partitionDef,
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2737
		{
			opt := &tree.AlterPartitionAddPartitionClause{
				Typ:        tree.AlterPartitionAddPartition,
				Partitions: yyDollar[3].partitionsUnion(),
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2745
		{
			opt := &tree.AlterPartitionDropPartitionClause{
				Typ:            tree.AlterPartitionDropPartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:2758
		{
			opt := &tree.AlterPartitionTruncatePartitionClause{
				Typ:            tree.AlterPartitionTruncatePartition,
				PartitionNames: yyDollar[3].PartitionNamesUnion(),
			}
			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2773
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2777
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2783
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:2787
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2793
		{
			opt := &tree.AlterOptionAdd{
				Def: yyDollar[2].tableDefUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2800
		{
			opt := &tree.AlterTableModifyColumnClause{
				Typ:       tree.AlterTableModifyColumn,
				NewColumn: yyDollar[3].columnTableDefUnion(),
				Position:  yyDollar[4].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2809
		{
			opt := &tree.AlterTableChangeColumnClause{
				Typ:           tree.AlterTableChangeColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumn:     yyDollar[4].columnTableDefUnion(),
				Position:      yyDollar[5].alterColPositionUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2819
		{
			opt := &tree.AlterTableRenameColumnClause{
				Typ:           tree.AlterTableRenameColumn,
				OldColumnName: yyDollar[3].unresolvedNameUnion(),
				NewColumnName: yyDollar[5].unresolvedNameUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2828
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:         tree.AlterTableAlterColumn,
				ColumnName:  yyDollar[3].unresolvedNameUnion(),
				DefalutExpr: tree.NewAttributeDefault(yyDollar[6].exprUnion()),
				OptionType:  tree.AlterColumnOptionSetDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 382:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2838
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				Visibility: yyDollar[5].indexVisibilityUnion(),
				OptionType: tree.AlterColumnOptionSetVisibility,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 383:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2848
		{
			opt := &tree.AlterTableAlterColumnClause{
				Typ:        tree.AlterTableAlterColumn,
				ColumnName: yyDollar[3].unresolvedNameUnion(),
				OptionType: tree.AlterColumnOptionDropDefault,
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 384:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2857
		{
			opt := &tree.AlterTableOrderByColumnClause{
				Typ:              tree.AlterTableOrderByColumn,
				AlterOrderByList: yyDollar[3].alterColumnOrderByUnion(),
			}
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2865
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2869
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2873
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2877
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2881
		{
			yyLOCAL = tree.AlterTableOption(
				&tree.AlterAddCol{
					Column:   yyDollar[3].columnTableDefUnion(),
					Position: yyDollar[4].alterColPositionUnion(),
				},
			)
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2890
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2896
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2900
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2904
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2908
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2912
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2916
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2920
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:2924
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2929
		{
			yyVAL.str = ""
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:2960
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2964
		{
			yyVAL.str = string("COLUMN")
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2969
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2975
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ: tree.ColumnPositionFirst,
			}
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:2981
		{
			yyLOCAL = &tree.ColumnPosition{
				Typ:            tree.ColumnPositionAfter,
				RelativeColumn: yyDollar[2].unresolvedNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2990
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:2994
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3000
		{
			yyLOCAL = &tree.AlterColumnOrder{Column: yyDollar[1].unresolvedNameUnion(), Direction: yyDollar[2].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3007
		{
			yyLOCAL = &tree.AlterTableName{
				Name: yyDollar[1].unresolvedObjectNameUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3015
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropIndex,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3022
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3029
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3036
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropColumn,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3043
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3050
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3057
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ: tree.AlterTableDropPrimaryKey,
			}
		}
		yyVAL.union = yyLOCAL
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3065
		{
			yyLOCAL = &tree.AlterOptionAlterIndex{
				Visibility: yyDollar[3].indexVisibilityUnion(),
				Name:       tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 433:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3072
		{
			yyLOCAL = &tree.AlterOptionAlterReIndex{
				KeyType:       tree.INDEX_TYPE_IVFFLAT,
				AlgoParamList: int64(yyDollar[6].item.(int64)),
				Name:          tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3080
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3087
		{
			yyLOCAL = &tree.AlterOptionAlterCheck{
				Type:    yyDollar[1].str,
				Enforce: yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3096
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3100
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 438:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3107
		{
			yyLOCAL = &tree.AlterAccount{
				IfExists:     yyDollar[3].boolValUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].alterAccountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 439:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3119
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				DbName:         yyDollar[3].str,
				UpdateConfig:   yyDollar[7].str,
				IsAccountLevel: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3127
		{
			yyLOCAL = &tree.AlterDataBaseConfig{
				AccountName:    yyDollar[4].str,
				UpdateConfig:   yyDollar[8].str,
				IsAccountLevel: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3135
		{
			assignments := []*tree.VarAssignmentExpr{
				&tree.VarAssignmentExpr{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3148
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3154
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3165
		{
			yyLOCAL = &tree.AlterUser{
				IfExists:           yyDollar[3].boolValUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3176
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3180
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3185
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3189
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3194
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3198
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3214
		{
			yyLOCAL = &tree.UserMiscOptionAccountUnlock{}
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3218
		{
			yyLOCAL = &tree.UserMiscOptionAccountLock{}
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3222
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNone{}
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3226
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireInterval{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3230
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireNever{}
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3234
		{
			yyLOCAL = &tree.UserMiscOptionPasswordExpireDefault{}
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3238
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryDefault{}
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3242
		{
			yyLOCAL = &tree.UserMiscOptionPasswordHistoryCount{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3246
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalDefault{}
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3250
		{
			yyLOCAL = &tree.UserMiscOptionPasswordReuseIntervalCount{Value: yyDollar[4].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3254
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentNone{}
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3258
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentDefault{}
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.UserMiscOptionPasswordRequireCurrentOptional{}
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3266
		{
			yyLOCAL = &tree.UserMiscOptionFailedLoginAttempts{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3270
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeCount{Value: yyDollar[2].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3274
		{
			yyLOCAL = &tree.UserMiscOptionPasswordLockTimeUnbounded{}
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:3280
		{
			yyVAL.item = nil
		}
	case 468:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3285
		{
			yyVAL.item = nil
		}
	case 500:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3326
		{
			yyLOCAL = &tree.ShowCollation{}
		}
		yyVAL.union = yyLOCAL
	case 501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3332
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3340
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3344
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3348
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{tree.NewRole(yyDollar[5].cstrUnion().Compare())}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:3361
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3367
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3372
		{
		}
	case 510:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3376
		{
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3381
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3391
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3401
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3409
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3415
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3421
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3427
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3433
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3439
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3445
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3454
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3458
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3462
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3466
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3470
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3474
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3478
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3482
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3488
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3497
		{
		}
	case 532:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3499
		{
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3508
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3518
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3527
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3531
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3535
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3541
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3547
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3553
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3559
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3568
		{
			yyLOCAL = &tree.ShowTables{
				Open:   false,
				Full:   yyDollar[2].fullOptUnion(),
				DBName: yyDollar[4].str,
				Like:   yyDollar[5].comparisionExprUnion(),
				Where:  yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3578
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3590
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3594
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3600
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3612
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3626
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3632
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3639
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3643
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3652
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:3656
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3661
		{
			yyVAL.str = ""
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3665
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3671
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 565:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3684
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3688
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 567:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3694
		{
			yyLOCAL = &tree.ShowCreateTable{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3699
		{
			yyLOCAL = &tree.ShowCreateView{Name: yyDollar[4].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 569:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3703
		{
			yyLOCAL = &tree.ShowCreateDatabase{IfNotExists: yyDollar[4].ifNotExistsUnion(), Name: yyDollar[5].str}
		}
		yyVAL.union = yyLOCAL
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3707
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 571:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3713
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3719
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 573:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3723
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3729
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3735
		{
			yyLOCAL = tree.SetUnresolvedObjectName(1, [3]string{yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3739
		{
			yyLOCAL = tree.SetUnresolvedObjectName(2, [3]string{yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:3743
		{
			yyLOCAL = tree.SetUnresolvedObjectName(3, [3]string{yyDollar[5].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare()})
		}
		yyVAL.union = yyLOCAL
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3749
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3753
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 595:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3778
		{
			yyLOCAL = &tree.DropSequence{
				IfExists: yyDollar[3].boolValUnion(),
				Names:    yyDollar[4].tableNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3787
		{
			yyLOCAL = &tree.DropAccount{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     yyDollar[4].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3796
		{
			yyLOCAL = &tree.DropUser{
				IfExists: yyDollar[3].boolValUnion(),
				Users:    yyDollar[4].usersUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3805
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:3809
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:3815
		{
			yyLOCAL = &tree.User{
				Username: yyDollar[1].usernameRecordUnion().Username,
				Hostname: yyDollar[1].usernameRecordUnion().Hostname,
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3824
		{
			yyLOCAL = &tree.DropRole{
				IfExists: yyDollar[3].boolValUnion(),
				Roles:    yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3833
		{
			yyLOCAL = &tree.DropIndex{
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TableName: yyDollar[6].tableNameUnion(),
				IfExists:  yyDollar[3].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3843
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[4].boolValUnion(), Names: yyDollar[5].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3847
		{
			yyLOCAL = &tree.DropTable{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3853
		{
			yyLOCAL = &tree.DropConnector{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3859
		{
			yyLOCAL = &tree.DropView{IfExists: yyDollar[3].boolValUnion(), Names: yyDollar[4].tableNamesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3869
		{
			yyLOCAL = &tree.DropDatabase{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare()), IfExists: yyDollar[3].boolValUnion()}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3875
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3881
		{
			yyLOCAL = &tree.DropFunction{
				Name: yyDollar[3].functionNameUnion(),
				Args: yyDollar[5].funcArgsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3890
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[3].procNameUnion(),
				IfExists: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3897
		{
			yyLOCAL = &tree.DropProcedure{
				Name:     yyDollar[5].procNameUnion(),
				IfExists: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3908
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3913
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 617:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3920
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3936
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3949
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3960
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:3964
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3970
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:3975
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3982
		{
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:3984
		{
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3987
		{
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3996
		{
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4000
		{
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4005
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4014
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4021
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 638:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4027
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 639:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4035
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4042
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4049
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4069
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4079
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4083
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4089
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4096
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4102
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4110
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4117
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:4124
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				return 1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4143
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4147
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:4151
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4156
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4160
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:4164
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:4170
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4179
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4183
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4189
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4193
		{
			yyVAL.str = yyDollar[3].cstrUnion().Compare()
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4199
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:4203
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4209
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 665:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4214
		{
		}
	case 667:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4218
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4225
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:4229
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:4236
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4245
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4251
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4255
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4261
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4265
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4270
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4287
		{
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4294
		{
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: '"',
			}
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4301
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: yyDollar[4].str,
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:4319
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				return 1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: ",",
				EnclosedBy: b,
			}
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4338
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: "\n",
			}
		}
		yyVAL.union = yyLOCAL
	case 686:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:4344
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 687:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4351
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 688:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4355
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 689:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4368
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:4372
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4377
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 692:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4381
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4388
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 694:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:4393
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4400
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 697:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4406
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 698:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4410
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 699:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4414
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 700:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4418
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 701:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4422
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 702:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:4426
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 703:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4431
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4435
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:4441
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:4451
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4466
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:4470
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4484
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4488
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:4494
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4503
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4507
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4511
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4515
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:4519
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4525
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:4532
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4541
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:4545
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:4551
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 722:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4559
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 723:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4563
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4568
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4572
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4578
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4582
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:4586
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4591
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4595
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4601
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4607
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:4611
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:4617
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4622
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4626
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:4630
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 738:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4635
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 739:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4639
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 740:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:4643
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 741:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4648
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 742:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:4652
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 743:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4660
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4664
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4668
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4682
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4686
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4696
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4706
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4716
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4728
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4736
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4744
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4753
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4761
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4769
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4777
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4785
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4793
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4801
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4809
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:4817
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4827
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: yyDollar[2].boolValUnion(),
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:4838
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: false,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4852
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 766:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4856
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 767:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4860
		{
			yyVAL.str = strings.ToLower(yyDollar[1].str)
		}
	case 768:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4865
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4869
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4873
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4882
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4886
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4891
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 776:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.GroupBy
//line mysql_sql.y:4895
		{
			yyLOCAL = tree.GroupBy(yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4900
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 778:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:4904
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4910
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:4914
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4920
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4924
		{
			yyDollar[2].cstrUnion().SetConfig(0)
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4929
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:4933
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.SetUnresolvedNameWithStar(yyDollar[3].cstrUnion().Compare(), yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4938
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4946
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:4952
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].joinTableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4960
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4968
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].joinTableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:4978
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4984
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:4993
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5002
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:5011
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5021
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5025
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 799:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5035
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 800:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5039
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 801:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5043
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 802:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5047
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 803:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5053
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5063
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 805:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5067
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5073
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5079
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5083
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5089
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 810:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5095
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 811:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5099
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 812:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5103
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5109
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5113
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5119
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:5123
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5129
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5133
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5139
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5143
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5153
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5166
		{
			yyLOCAL = yyDollar[2].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:5172
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5178
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].cstrUnion().Compare()))
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:  tree.FuncName2ResolvableFunctionReference(name),
					Exprs: yyDollar[3].exprsUnion(),
					Type:  tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:5191
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5209
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:5213
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:5219
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5229
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5233
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:5237
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5242
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5246
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5250
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:5254
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5259
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5263
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5267
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5271
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5275
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5280
		{
			yyVAL.str = ""
		}
	case 844:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5284
		{
			yyVAL.str = yyDollar[1].str
		}
	case 845:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5288
		{
			yyVAL.str = yyDollar[2].str
		}
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5294
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5300
		{
			yyLOCAL = tree.NewCStr("", yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5304
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5308
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5312
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:5316
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5322
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 873:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5361
		{
			yyLOCAL = &tree.CreateExtension{
				Language: yyDollar[3].str,
				Name:     tree.Identifier(yyDollar[5].str),
				Filename: tree.Identifier(yyDollar[7].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5371
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5377
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 876:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5383
		{
			yyLOCAL = &tree.CreateProcedure{
				Name: yyDollar[3].procNameUnion(),
				Args: yyDollar[5].procArgsUnion(),
				Body: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5393
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:5398
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().ToLower()), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().ToLower()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5404
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5411
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:5415
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:5421
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:5427
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5432
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5436
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5440
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:5444
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5451
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				return 1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				return 1
			}

			yyLOCAL = &tree.CreateFunction{
				Replace:    yyDollar[2].sourceOptionalUnion(),
				Name:       yyDollar[4].functionNameUnion(),
				Args:       yyDollar[6].funcArgsUnion(),
				ReturnType: yyDollar[9].funcReturnUnion(),
				Language:   yyDollar[11].str,
				Import:     yyDollar[12].boolValUnion(),
				Body:       yyDollar[13].str,
				Handler:    yyDollar[14].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5475
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:5480
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5486
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5493
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:5497
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:5503
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5509
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5513
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:5517
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5523
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:5529
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5535
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5539
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5545
		{
			yyVAL.str = ""
		}
	case 906:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5552
		{
			yyVAL.str = yyDollar[2].str
		}
	case 907:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5558
		{
			yyLOCAL = &tree.CreateView{
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5567
		{
			yyLOCAL = &tree.CreateView{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				Name:        yyDollar[5].tableNameUnion(),
				ColNames:    yyDollar[6].identifierListUnion(),
				AsSource:    yyDollar[8].selectUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5579
		{
			yyLOCAL = &tree.CreateAccount{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         yyDollar[4].str,
				AuthOption:   yyDollar[5].accountAuthOptionUnion(),
				StatusOption: yyDollar[6].accountStatusUnion(),
				Comment:      yyDollar[7].accountCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5591
		{
			yyVAL.str = yyDollar[1].str
		}
	case 911:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5595
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 912:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5601
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 913:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5605
		{
			yyVAL.str = "DEFINER = "
		}
	case 914:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5609
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 915:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5614
		{
			yyVAL.str = ""
		}
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:5618
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 922:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5632
		{
			yyVAL.str = ""
		}
	case 925:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5640
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 926:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:5646
		{
			yyLOCAL = tree.AccountAuthOption{
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].str,
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 927:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5656
		{
			yyVAL.str = yyDollar[1].str
		}
	case 928:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5660
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5666
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 930:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5673
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 931:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:5679
		{
			yyLOCAL = tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5687
		{
			yyLOCAL = tree.AccountStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5693
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusOpen,
			}
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5700
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusSuspend,
			}
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:5707
		{
			yyLOCAL = tree.AccountStatus{
				Exist:  true,
				Option: tree.AccountStatusRestricted,
			}
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5715
		{
			yyLOCAL = tree.AccountComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:5721
		{
			yyLOCAL = tree.AccountComment{
				Exist:   true,
				Comment: yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 938:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5730
		{
			yyLOCAL = &tree.CreateUser{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Users:              yyDollar[4].usersUnion(),
				Role:               yyDollar[5].accountRoleUnion(),
				MiscOpt:            yyDollar[6].userMiscOptionUnion(),
				CommentOrAttribute: yyDollar[7].accountCommentOrAttributeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 939:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5742
		{
			yyLOCAL = &tree.CreatePublication{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Database:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				AccountsSet: yyDollar[7].accountsSetOptionUnion(),
				Comment:     yyDollar[8].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 940:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5754
		{
			yyLOCAL = &tree.CreateStage{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Url:         yyDollar[5].str,
				Credentials: yyDollar[6].stageCredentialsUnion(),
				Status:      yyDollar[7].stageStatusUnion(),
				Comment:     yyDollar[8].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 941:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5766
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 942:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5772
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:5779
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5787
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:5793
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5801
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:5807
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5815
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:5821
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5830
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5834
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5839
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5843
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5850
		{
			yyVAL.str = yyDollar[3].str
		}
	case 955:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5855
		{
			yyVAL.str = ""
		}
	case 956:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:5859
		{
			yyVAL.str = yyDollar[2].str
		}
	case 957:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5865
		{
			yyLOCAL = &tree.AlterStage{
				IfNotExists:       yyDollar[3].boolValUnion(),
				Name:              tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				UrlOption:         yyDollar[6].stageUrlUnion(),
				CredentialsOption: yyDollar[7].stageCredentialsUnion(),
				StatusOption:      yyDollar[8].stageStatusUnion(),
				Comment:           yyDollar[9].stageCommentUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 958:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5879
		{
			yyLOCAL = &tree.AlterPublication{
				IfExists:    yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				AccountsSet: yyDollar[5].accountsSetOptionUnion(),
				Comment:     yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5889
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5893
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5899
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5905
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:5911
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5920
		{
			yyLOCAL = &tree.DropPublication{
				IfExists: yyDollar[3].boolValUnion(),
				Name:     tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:5929
		{
			yyLOCAL = &tree.DropStage{
				IfNotExists: yyDollar[3].boolValUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5938
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 967:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5943
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5949
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: true,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:5957
		{
			yyLOCAL = tree.AccountCommentOrAttribute{
				Exist:     true,
				IsComment: false,
				Str:       yyDollar[2].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6063
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6067
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6073
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6083
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:6087
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 975:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:6093
		{
			yyLOCAL = &tree.User{
				Username:   yyDollar[1].usernameRecordUnion().Username,
				Hostname:   yyDollar[1].usernameRecordUnion().Hostname,
				AuthOption: yyDollar[2].userIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 976:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6103
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 977:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6107
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 978:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:6111
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6116
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6120
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6126
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6133
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:6139
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6148
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 986:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6155
		{
			yyLOCAL = &tree.CreateRole{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Roles:       yyDollar[4].rolesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 987:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6164
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 988:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:6168
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 989:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:6174
		{
			yyLOCAL = &tree.Role{UserName: yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 990:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6188
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 991:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6192
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 992:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6196
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 993:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6201
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 994:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6205
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 995:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6209
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 996:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:6213
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 997:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6219
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = &tree.IndexOption{IType: yyDollar[5].indexTypeUnion()}
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = &tree.IndexOption{IType: tree.INDEX_TYPE_INVALID}
			}
			yyLOCAL = &tree.CreateIndex{
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Table:       yyDollar[7].tableNameUnion(),
				IndexCat:    yyDollar[2].indexCategoryUnion(),
				KeyParts:    yyDollar[9].keyPartsUnion(),
				IndexOption: io,
				MiscOption:  nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 998:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6240
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 999:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6244
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1000:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6270
		{
			yyLOCAL = &tree.IndexOption{KeyBlockSize: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1001:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6274
		{
			yyLOCAL = &tree.IndexOption{AlgoParamList: int64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1002:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6278
		{
			yyLOCAL = &tree.IndexOption{AlgoParamVectorOpType: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1003:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6282
		{
			yyLOCAL = &tree.IndexOption{Comment: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1004:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6286
		{
			yyLOCAL = &tree.IndexOption{ParserName: yyDollar[3].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 1005:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6290
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_VISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1006:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:6294
		{
			yyLOCAL = &tree.IndexOption{Visible: tree.VISIBLE_TYPE_INVISIBLE}
		}
		yyVAL.union = yyLOCAL
	case 1007:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6300
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:6304
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1009:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6310
		{
			// Order is parsed but just ignored as MySQL dtree.
			yyLOCAL = &tree.KeyPart{ColName: yyDollar[1].unresolvedNameUnion(), Length: int(yyDollar[2].lengthOptUnion()), Direction: yyDollar[3].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1010:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:6315
		{
			yyLOCAL = &tree.KeyPart{Expr: yyDollar[2].exprUnion(), Direction: yyDollar[4].directionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6320
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6324
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6328
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1014:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6332
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:6340
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6346
		{
			yyLOCAL = &tree.CreateDatabase{
				IfNotExists:        yyDollar[3].ifNotExistsUnion(),
				Name:               tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SubscriptionOption: yyDollar[5].subscriptionOptionUnion(),
				CreateOptions:      yyDollar[6].createOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6357
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:6361
		{
			yyLOCAL = &tree.SubscriptionOption{From: tree.Identifier(yyDollar[2].str), Publication: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6371
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6375
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6384
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6390
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1027:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:6394
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6400
		{
			yyLOCAL = &tree.CreateOptionCharset{IsDefault: yyDollar[1].defaultOptionalUnion(), Charset: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6404
		{
			yyLOCAL = &tree.CreateOptionCollate{IsDefault: yyDollar[1].defaultOptionalUnion(), Collate: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:6408
		{
			yyLOCAL = &tree.CreateOptionEncryption{Encrypt: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6413
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6417
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6423
		{
			yyLOCAL = &tree.CreateConnector{
				TableName: yyDollar[4].tableNameUnion(),
				Options:   yyDollar[7].connectorOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6432
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1035:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6438
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6456
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6474
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6492
		{
			yyLOCAL = &tree.CreateSource{
				Replace:     yyDollar[2].sourceOptionalUnion(),
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				SourceName:  yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Options:     yyDollar[9].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1039:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6503
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6507
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1041:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6513
		{
			yyLOCAL = &tree.CreateTable{
				Temporary:       yyDollar[2].boolValUnion(),
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6525
		{
			yyLOCAL = &tree.CreateTable{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Table:       *yyDollar[5].tableNameUnion(),
				Defs:        yyDollar[7].tableDefsUnion(),
				Param:       yyDollar[9].loadParamUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6534
		{
			yyLOCAL = &tree.CreateTable{
				IsClusterTable:  true,
				IfNotExists:     yyDollar[4].ifNotExistsUnion(),
				Table:           *yyDollar[5].tableNameUnion(),
				Defs:            yyDollar[7].tableDefsUnion(),
				Options:         yyDollar[9].tableOptionsUnion(),
				PartitionOption: yyDollar[10].partitionOptionUnion(),
				ClusterByOption: yyDollar[11].clusterByOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6546
		{
			yyLOCAL = &tree.CreateTable{
				IsDynamicTable: true,
				IfNotExists:    yyDollar[4].ifNotExistsUnion(),
				Table:          *yyDollar[5].tableNameUnion(),
				AsSource:       yyDollar[7].selectUnion(),
				DTOptions:      yyDollar[8].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6557
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1046:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6564
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1047:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6574
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1048:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6587
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1049:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6595
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1050:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:6604
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1051:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6613
		{
			yyVAL.str = ""
		}
	case 1052:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6617
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1053:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6623
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1054:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6627
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1055:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6632
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1056:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6636
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1057:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:6643
		{
			yyLOCAL = &tree.TailParameter{
				Fields:       yyDollar[1].fieldsUnion(),
				Lines:        yyDollar[2].linesUnion(),
				IgnoredLines: uint64(yyDollar[3].int64ValUnion()),
				ColumnList:   yyDollar[4].loadColumnsUnion(),
				Assignments:  yyDollar[5].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1058:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6654
		{
			yyLOCAL = &tree.CreateSequence{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        yyDollar[4].tableNameUnion(),
				Type:        yyDollar[5].columnTypeUnion(),
				IncrementBy: yyDollar[6].incrementByOptionUnion(),
				MinValue:    yyDollar[7].minValueOptionUnion(),
				MaxValue:    yyDollar[8].maxValueOptionUnion(),
				StartWith:   yyDollar[9].startWithOptionUnion(),
				Cycle:       yyDollar[10].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1059:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6667
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1060:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:6681
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6685
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:6689
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6695
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6699
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6706
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6713
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:6720
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6727
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6731
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6735
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6739
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6743
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:6750
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6757
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6761
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:6768
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6775
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6779
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:6785
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6791
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6795
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6802
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6809
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:6816
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6823
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6827
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6832
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6836
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6840
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6845
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:6849
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = &tree.PartitionOption{
				PartBy:     *yyDollar[3].partitionByUnion(),
				SubPartBy:  yyDollar[5].partitionByUnion(),
				Partitions: yyDollar[6].partitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6859
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6863
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()},
			}

		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:6870
		{
			yyLOCAL = &tree.ClusterByOption{
				ColumnList: yyDollar[4].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6877
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:6881
		{
			yyLOCAL = &tree.PartitionBy{
				IsSubPartition: true,
				PType:          yyDollar[3].partitionByUnion(),
				Num:            uint64(yyDollar[4].int64ValUnion()),
			}
		}
		yyVAL.union = yyLOCAL
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6890
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1098:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6894
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1099:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6900
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:6904
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6910
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: nil,
				Subs:    yyDollar[4].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:6919
		{
			yyLOCAL = &tree.Partition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Values:  yyDollar[3].valuesUnion(),
				Options: yyDollar[4].tableOptionsUnion(),
				Subs:    yyDollar[5].subPartitionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6929
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6933
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6939
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:6943
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6949
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1108:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:6956
		{
			yyLOCAL = &tree.SubPartition{
				Name:    tree.Identifier(yyDollar[2].cstrUnion().Compare()),
				Options: yyDollar[3].tableOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6965
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:6969
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6974
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6978
		{
			expr := tree.NewMaxValue()
			yyLOCAL = &tree.ValuesLessThan{ValueList: tree.Exprs{expr}}
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6983
		{
			yyLOCAL = &tree.ValuesLessThan{ValueList: yyDollar[5].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:6987
		{
			yyLOCAL = &tree.ValuesIn{ValueList: yyDollar[4].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6992
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:6996
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7006
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7010
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				return 1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7021
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7029
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.RangeType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7037
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					Expr: yyDollar[3].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7045
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.ListType{
					ColumnList: yyDollar[4].unresolveNamesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7056
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:    yyDollar[1].boolValUnion(),
					Algorithm: yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7065
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.KeyType{
					Linear:     yyDollar[1].boolValUnion(),
					ColumnList: yyDollar[5].unresolveNamesUnion(),
					Algorithm:  yyDollar[3].int64ValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:7075
		{
			yyLOCAL = &tree.PartitionBy{
				PType: &tree.HashType{
					Linear: yyDollar[1].boolValUnion(),
					Expr:   yyDollar[4].exprUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7085
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7089
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7094
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7098
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7104
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:7108
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1133:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7114
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:7118
		{
			yyLOCAL = &tree.ConnectorOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7123
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7127
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7133
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7137
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7143
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7147
		{
			yyLOCAL = &tree.CreateSourceWithOption{Key: tree.Identifier(yyDollar[1].str), Val: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7152
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7156
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7162
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7166
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:7170
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7176
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7180
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7184
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7188
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7192
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7196
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7200
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7205
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7209
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7213
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7217
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7221
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7225
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7229
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7233
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7237
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7241
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7245
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7249
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7253
		{
			yyLOCAL = &tree.TableOptionPackKeys{Value: yyDollar[3].item.(int64)}
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7257
		{
			yyLOCAL = &tree.TableOptionPackKeys{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7261
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7265
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7269
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7273
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7277
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7281
		{
			yyLOCAL = &tree.TableOptionStatsAutoRecalc{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7285
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1174:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7289
		{
			yyLOCAL = &tree.TableOptionStatsPersistent{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7293
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Value: uint64(yyDollar[3].item.(int64))}
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7297
		{
			yyLOCAL = &tree.TableOptionStatsSamplePages{Default: true}
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7301
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7305
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7309
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:7313
		{
			yyLOCAL = &tree.TableOptionProperties{Preperties: yyDollar[3].propertiesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7319
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:7323
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:7329
		{
			yyLOCAL = tree.Property{Key: yyDollar[1].str, Value: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7335
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7339
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7345
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7349
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7353
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7357
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7361
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:7365
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7379
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7383
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7392
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:7397
		{
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(yyDollar[1].cstrUnion().Compare()), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7403
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7410
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:7414
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7420
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7424
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7428
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7434
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7438
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7444
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7453
		{
			yyLOCAL = &tree.FullTextIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].str,
				Empty:       true,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7462
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid the type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7493
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				default:
					yylex.Error("Invalid type of index")
					return 1
				}
			}
			yyLOCAL = &tree.Index{
				IfNotExists: yyDollar[2].ifNotExistsUnion(),
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				KeyType:     keyTyp,
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7526
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7540
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7546
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7555
		{
			yyLOCAL = &tree.PrimaryKeyIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7564
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[7].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7573
		{
			yyLOCAL = &tree.UniqueIndex{
				KeyParts:    yyDollar[5].keyPartsUnion(),
				Name:        yyDollar[3].strsUnion()[0],
				Empty:       yyDollar[3].strsUnion()[1] == "",
				IndexOption: yyDollar[9].indexOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7582
		{
			yyLOCAL = &tree.ForeignKey{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				KeyParts:    yyDollar[6].keyPartsUnion(),
				Name:        yyDollar[4].str,
				Refer:       yyDollar[8].attributeReferenceUnion(),
				Empty:       true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1220:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:7592
		{
			yyLOCAL = &tree.CheckIndex{
				Expr:     yyDollar[3].exprUnion(),
				Enforced: yyDollar[5].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1221:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7600
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7606
		{
			yyVAL.str = ""
		}
	case 1224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7610
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7620
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7626
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7632
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7652
		{
			yyVAL.str = ""
		}
	case 1240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7656
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1241:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:7662
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7668
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7672
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7676
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7682
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7686
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7690
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7694
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, yylex.(*Lexer).lower)
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7700
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7704
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:7708
		{
			yyLOCAL = tree.SetUnresolvedName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7713
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7717
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7723
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:7727
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7733
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7737
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7741
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7745
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7749
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7753
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7758
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7762
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7766
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7770
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7774
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7778
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7782
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7786
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7790
		{
			yyLOCAL = tree.NewAttributeCheck(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7794
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7807
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7811
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7815
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7819
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7823
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:7827
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7833
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7837
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7842
		{
			yyVAL.str = ""
		}
	case 1281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7846
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7852
		{
			yyVAL.str = ""
		}
	case 1283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7856
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1284:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:7862
		{
			yyLOCAL = &tree.AttributeReference{
				TableName: yyDollar[2].tableNameUnion(),
				KeyParts:  yyDollar[3].keyPartsUnion(),
				Match:     yyDollar[4].matchTypeUnion(),
				OnDelete:  yyDollar[5].referenceOnRecordUnion().OnDelete,
				OnUpdate:  yyDollar[5].referenceOnRecordUnion().OnUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7874
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7881
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7888
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7895
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:7902
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7911
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7917
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7923
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7927
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7931
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7935
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:7939
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7944
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7951
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7955
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:7959
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7964
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7968
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7973
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:7977
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:7993
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:7999
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8003
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8007
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8011
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8015
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8019
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8023
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8027
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8031
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8035
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8039
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8043
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8047
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8053
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8057
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8061
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8065
		{
			yyLOCAL = tree.NewParenExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8069
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8073
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8077
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8081
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8085
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8089
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8093
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8097
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8102
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8110
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8114
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8118
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8122
		{
			name := tree.SetUnresolvedName("convert")
			es := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8131
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8135
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8139
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8143
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8147
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8151
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8157
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1350:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8165
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8173
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8183
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8193
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8202
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8212
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1356:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8222
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1357:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8231
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				return 1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1358:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8241
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1359:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8245
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8250
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:8254
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8260
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:8264
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:8270
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8279
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8291
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8308
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8325
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8338
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1371:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8351
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8363
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8377
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8392
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8407
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8424
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8439
		{
		}
	case 1381:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8446
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8450
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8454
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8460
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8464
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8468
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:8472
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8478
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8482
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:8486
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8492
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1392:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8500
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8510
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:8514
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1395:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8521
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1396:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8526
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:8530
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8535
		{
			yyVAL.str = ","
		}
	case 1399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8539
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1400:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8544
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8548
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1402:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8553
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1404:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:8560
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1405:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8586
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1406:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8597
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumValWithType(constant.MakeString(yyDollar[6].str), yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1407:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8608
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1408:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8618
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1409:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8628
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1410:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8638
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8647
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1412:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8656
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1413:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8666
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8676
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8686
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8696
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			es := tree.NewNumValWithType(constant.MakeString("*"), "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8706
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8716
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8726
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8736
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8746
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8756
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8766
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8776
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8795
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8803
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8811
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8819
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8827
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8837
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8845
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[4].exprUnion()},
				Type:  yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8854
		{
			name := tree.SetUnresolvedName("nextval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8862
		{
			name := tree.SetUnresolvedName("setval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8870
		{
			name := tree.SetUnresolvedName("currval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8878
		{
			name := tree.SetUnresolvedName("lastval")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8886
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8897
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumValWithType(constant.MakeString("both"), "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8907
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			arg2 := tree.NewNumValWithType(constant.MakeString(" "), " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8919
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			arg0 := tree.NewNumValWithType(constant.MakeInt64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8930
		{
			column := tree.SetUnresolvedName(strings.ToLower(yyDollar[3].str))
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:8952
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1479:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:8988
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9000
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9012
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9023
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9031
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1484:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9038
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			yyLOCAL = &tree.FuncExpr{
				Func: tree.FuncName2ResolvableFunctionReference(name),
			}
		}
		yyVAL.union = yyLOCAL
	case 1485:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9045
		{
			name := tree.SetUnresolvedName(strings.ToLower(yyDollar[1].str))
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1486:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9057
		{
			name := tree.SetUnresolvedName("binary")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1487:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9065
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1488:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9075
		{
			name := tree.SetUnresolvedName("binary")
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1489:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9085
		{
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9093
		{
			cn := tree.NewNumValWithType(constant.MakeString(yyDollar[5].str), yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.SetUnresolvedName("char")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9104
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("date")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9113
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("time")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9122
		{
			name := tree.SetUnresolvedName("insert")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9130
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.SetUnresolvedName("mod")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9140
		{
			name := tree.SetUnresolvedName("password")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9148
		{
			val := tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_char)
			name := tree.SetUnresolvedName("timestamp")
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9158
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9162
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9168
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9172
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				return 1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(ival), str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9191
		{
		}
	case 1508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9193
		{
		}
	case 1542:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9234
		{
			name := tree.SetUnresolvedName("interval")
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumValWithType(constant.MakeString(str), str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9245
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9249
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:9253
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:9259
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9264
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9268
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9274
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9278
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1551:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9284
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:9288
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1553:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9295
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9299
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9303
		{
			name := tree.SetUnresolvedName(strings.ToLower("concat"))
			yyLOCAL = &tree.FuncExpr{
				Func:  tree.FuncName2ResolvableFunctionReference(name),
				Exprs: tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9311
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9315
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9319
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9324
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9328
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9334
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9338
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1563:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9342
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1564:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9346
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1565:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9350
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1566:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9354
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9358
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9362
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9366
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9370
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9378
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9382
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9386
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9390
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9394
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9398
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9402
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9406
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9410
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9414
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9424
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1585:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9430
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1586:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9434
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1587:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1588:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9445
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9449
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9455
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9459
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9463
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9467
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9471
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9485
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9489
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9493
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9497
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9503
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9516
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9521
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9527
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9531
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9544
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumValWithType(constant.MakeFloat64(fval), yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9549
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(true), "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9553
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeBool(false), "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9557
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9561
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9565
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9572
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[1].str), yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1613:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9576
		{
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeUint64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumValWithType(constant.MakeInt64(v), yylex.(*Lexer).scanner.LastToken, false, tree.P_int64)
			case string:
				yyLOCAL = tree.NewNumValWithType(constant.MakeString(v), v, false, tree.P_bit)
			default:
				yylex.Error("parse integral fail")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1614:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9590
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1615:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9594
		{
			yyLOCAL = tree.NewNumValWithType(constant.MakeString(yyDollar[2].str), yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9601
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9612
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9617
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9623
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9635
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9647
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9672
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9698
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9711
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9724
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9737
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9750
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9763
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9776
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1635:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9789
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1636:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9804
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1637:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9831
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9873
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1639:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9909
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				return 1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				return 1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1640:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9945
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1641:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9962
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1642:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9974
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1643:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:9994
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1644:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10014
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				return 1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1645:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1646:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10050
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1647:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10063
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1648:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10076
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1649:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10089
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1650:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10102
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1651:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10114
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1652:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10126
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1653:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10138
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1654:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10150
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1655:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10162
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1656:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10174
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1657:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10186
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1658:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10198
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1659:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10210
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1660:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10223
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1661:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10236
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1662:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10249
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1663:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10262
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1664:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10277
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1665:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10285
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumValWithType(constant.MakeUnknown(), "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1666:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:10294
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1667:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10304
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10327
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:10332
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10338
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10345
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10349
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10354
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10358
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:10364
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10370
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10377
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10384
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10393
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10400
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:10407
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10416
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10420
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10424
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10430
		{
		}
	case 1687:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:10432
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10442
		{
			yyVAL.str = ""
		}
	case 1692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10446
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
